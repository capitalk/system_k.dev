// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: capk_globals.proto

#ifndef PROTOBUF_capk_5fglobals_2eproto__INCLUDED
#define PROTOBUF_capk_5fglobals_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace capkproto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_capk_5fglobals_2eproto();
void protobuf_AssignDesc_capk_5fglobals_2eproto();
void protobuf_ShutdownFile_capk_5fglobals_2eproto();


enum side_t {
  BID = 1,
  ASK = 2
};
bool side_t_IsValid(int value);
const side_t side_t_MIN = BID;
const side_t side_t_MAX = ASK;
const int side_t_ARRAYSIZE = side_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* side_t_descriptor();
inline const ::std::string& side_t_Name(side_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    side_t_descriptor(), value);
}
inline bool side_t_Parse(
    const ::std::string& name, side_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<side_t>(
    side_t_descriptor(), name, value);
}
enum ord_type_t {
  MKT = 1,
  LIM = 2
};
bool ord_type_t_IsValid(int value);
const ord_type_t ord_type_t_MIN = MKT;
const ord_type_t ord_type_t_MAX = LIM;
const int ord_type_t_ARRAYSIZE = ord_type_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* ord_type_t_descriptor();
inline const ::std::string& ord_type_t_Name(ord_type_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    ord_type_t_descriptor(), value);
}
inline bool ord_type_t_Parse(
    const ::std::string& name, ord_type_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ord_type_t>(
    ord_type_t_descriptor(), name, value);
}
enum time_in_force_t {
  GFD = 0,
  GTC = 1,
  OPG = 2,
  IOC = 3,
  FOK = 4,
  GTX = 5,
  GTD = 6
};
bool time_in_force_t_IsValid(int value);
const time_in_force_t time_in_force_t_MIN = GFD;
const time_in_force_t time_in_force_t_MAX = GTD;
const int time_in_force_t_ARRAYSIZE = time_in_force_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* time_in_force_t_descriptor();
inline const ::std::string& time_in_force_t_Name(time_in_force_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    time_in_force_t_descriptor(), value);
}
inline bool time_in_force_t_Parse(
    const ::std::string& name, time_in_force_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<time_in_force_t>(
    time_in_force_t_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace capkproto

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::capkproto::side_t>() {
  return ::capkproto::side_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::capkproto::ord_type_t>() {
  return ::capkproto::ord_type_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::capkproto::time_in_force_t>() {
  return ::capkproto::time_in_force_t_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_capk_5fglobals_2eproto__INCLUDED
