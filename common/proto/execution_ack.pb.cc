// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: execution_ack.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "execution_ack.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace capkproto {

namespace {

const ::google::protobuf::Descriptor* execution_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  execution_ack_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_execution_5fack_2eproto() {
  protobuf_AddDesc_execution_5fack_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "execution_ack.proto");
  GOOGLE_CHECK(file != NULL);
  execution_ack_descriptor_ = file->message_type(0);
  static const int execution_ack_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_ack, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_ack, cl_order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_ack, exec_ack_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_ack, exec_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_ack, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_ack, fut_sett_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_ack, side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_ack, order_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_ack, last_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_ack, last_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_ack, cum_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_ack, last_spot_rate_),
  };
  execution_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      execution_ack_descriptor_,
      execution_ack::default_instance_,
      execution_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(execution_ack));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_execution_5fack_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    execution_ack_descriptor_, &execution_ack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_execution_5fack_2eproto() {
  delete execution_ack::default_instance_;
  delete execution_ack_reflection_;
}

void protobuf_AddDesc_execution_5fack_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::capkproto::protobuf_AddDesc_capk_5fglobals_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023execution_ack.proto\022\tcapkproto\032\022capk_g"
    "lobals.proto\"\212\002\n\rexecution_ack\022\020\n\010order_"
    "id\030\001 \001(\014\022\023\n\013cl_order_id\030\002 \001(\014\022\027\n\017exec_ac"
    "k_status\030\003 \001(\017\022\017\n\007exec_id\030\004 \001(\014\022\016\n\006symbo"
    "l\030\005 \001(\t\022\025\n\rfut_sett_date\030\006 \001(\t\022\037\n\004side\030\007"
    " \001(\0162\021.capkproto.side_t\022\021\n\torder_qty\030\010 \001"
    "(\001\022\020\n\010last_qty\030\t \001(\001\022\022\n\nlast_price\030\n \001(\001"
    "\022\017\n\007cum_qty\030\013 \001(\001\022\026\n\016last_spot_rate\030\014 \001("
    "\001", 321);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "execution_ack.proto", &protobuf_RegisterTypes);
  execution_ack::default_instance_ = new execution_ack();
  execution_ack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_execution_5fack_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_execution_5fack_2eproto {
  StaticDescriptorInitializer_execution_5fack_2eproto() {
    protobuf_AddDesc_execution_5fack_2eproto();
  }
} static_descriptor_initializer_execution_5fack_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int execution_ack::kOrderIdFieldNumber;
const int execution_ack::kClOrderIdFieldNumber;
const int execution_ack::kExecAckStatusFieldNumber;
const int execution_ack::kExecIdFieldNumber;
const int execution_ack::kSymbolFieldNumber;
const int execution_ack::kFutSettDateFieldNumber;
const int execution_ack::kSideFieldNumber;
const int execution_ack::kOrderQtyFieldNumber;
const int execution_ack::kLastQtyFieldNumber;
const int execution_ack::kLastPriceFieldNumber;
const int execution_ack::kCumQtyFieldNumber;
const int execution_ack::kLastSpotRateFieldNumber;
#endif  // !_MSC_VER

execution_ack::execution_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void execution_ack::InitAsDefaultInstance() {
}

execution_ack::execution_ack(const execution_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void execution_ack::SharedCtor() {
  _cached_size_ = 0;
  order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cl_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exec_ack_status_ = 0;
  exec_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fut_sett_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  side_ = 1;
  order_qty_ = 0;
  last_qty_ = 0;
  last_price_ = 0;
  cum_qty_ = 0;
  last_spot_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

execution_ack::~execution_ack() {
  SharedDtor();
}

void execution_ack::SharedDtor() {
  if (order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete order_id_;
  }
  if (cl_order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete cl_order_id_;
  }
  if (exec_id_ != &::google::protobuf::internal::kEmptyString) {
    delete exec_id_;
  }
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (fut_sett_date_ != &::google::protobuf::internal::kEmptyString) {
    delete fut_sett_date_;
  }
  if (this != default_instance_) {
  }
}

void execution_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* execution_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return execution_ack_descriptor_;
}

const execution_ack& execution_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_execution_5fack_2eproto();
  return *default_instance_;
}

execution_ack* execution_ack::default_instance_ = NULL;

execution_ack* execution_ack::New() const {
  return new execution_ack;
}

void execution_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_order_id()) {
      if (order_id_ != &::google::protobuf::internal::kEmptyString) {
        order_id_->clear();
      }
    }
    if (has_cl_order_id()) {
      if (cl_order_id_ != &::google::protobuf::internal::kEmptyString) {
        cl_order_id_->clear();
      }
    }
    exec_ack_status_ = 0;
    if (has_exec_id()) {
      if (exec_id_ != &::google::protobuf::internal::kEmptyString) {
        exec_id_->clear();
      }
    }
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    if (has_fut_sett_date()) {
      if (fut_sett_date_ != &::google::protobuf::internal::kEmptyString) {
        fut_sett_date_->clear();
      }
    }
    side_ = 1;
    order_qty_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    last_qty_ = 0;
    last_price_ = 0;
    cum_qty_ = 0;
    last_spot_rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool execution_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes order_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_order_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cl_order_id;
        break;
      }

      // optional bytes cl_order_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cl_order_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cl_order_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_exec_ack_status;
        break;
      }

      // optional sfixed32 exec_ack_status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_exec_ack_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &exec_ack_status_)));
          set_has_exec_ack_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_exec_id;
        break;
      }

      // optional bytes exec_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exec_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_exec_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_symbol;
        break;
      }

      // optional string symbol = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_fut_sett_date;
        break;
      }

      // optional string fut_sett_date = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fut_sett_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fut_sett_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fut_sett_date().data(), this->fut_sett_date().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_side;
        break;
      }

      // optional .capkproto.side_t side = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_side:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::capkproto::side_t_IsValid(value)) {
            set_side(static_cast< ::capkproto::side_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_order_qty;
        break;
      }

      // optional double order_qty = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_order_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &order_qty_)));
          set_has_order_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_last_qty;
        break;
      }

      // optional double last_qty = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_last_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_qty_)));
          set_has_last_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_last_price;
        break;
      }

      // optional double last_price = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_last_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_price_)));
          set_has_last_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_cum_qty;
        break;
      }

      // optional double cum_qty = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_cum_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cum_qty_)));
          set_has_cum_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_last_spot_rate;
        break;
      }

      // optional double last_spot_rate = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_last_spot_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_spot_rate_)));
          set_has_last_spot_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void execution_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes order_id = 1;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->order_id(), output);
  }

  // optional bytes cl_order_id = 2;
  if (has_cl_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->cl_order_id(), output);
  }

  // optional sfixed32 exec_ack_status = 3;
  if (has_exec_ack_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->exec_ack_status(), output);
  }

  // optional bytes exec_id = 4;
  if (has_exec_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->exec_id(), output);
  }

  // optional string symbol = 5;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->symbol(), output);
  }

  // optional string fut_sett_date = 6;
  if (has_fut_sett_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fut_sett_date().data(), this->fut_sett_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->fut_sett_date(), output);
  }

  // optional .capkproto.side_t side = 7;
  if (has_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->side(), output);
  }

  // optional double order_qty = 8;
  if (has_order_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->order_qty(), output);
  }

  // optional double last_qty = 9;
  if (has_last_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->last_qty(), output);
  }

  // optional double last_price = 10;
  if (has_last_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->last_price(), output);
  }

  // optional double cum_qty = 11;
  if (has_cum_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->cum_qty(), output);
  }

  // optional double last_spot_rate = 12;
  if (has_last_spot_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->last_spot_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* execution_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes order_id = 1;
  if (has_order_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->order_id(), target);
  }

  // optional bytes cl_order_id = 2;
  if (has_cl_order_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cl_order_id(), target);
  }

  // optional sfixed32 exec_ack_status = 3;
  if (has_exec_ack_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->exec_ack_status(), target);
  }

  // optional bytes exec_id = 4;
  if (has_exec_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->exec_id(), target);
  }

  // optional string symbol = 5;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->symbol(), target);
  }

  // optional string fut_sett_date = 6;
  if (has_fut_sett_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fut_sett_date().data(), this->fut_sett_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->fut_sett_date(), target);
  }

  // optional .capkproto.side_t side = 7;
  if (has_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->side(), target);
  }

  // optional double order_qty = 8;
  if (has_order_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->order_qty(), target);
  }

  // optional double last_qty = 9;
  if (has_last_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->last_qty(), target);
  }

  // optional double last_price = 10;
  if (has_last_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->last_price(), target);
  }

  // optional double cum_qty = 11;
  if (has_cum_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->cum_qty(), target);
  }

  // optional double last_spot_rate = 12;
  if (has_last_spot_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->last_spot_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int execution_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes order_id = 1;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->order_id());
    }

    // optional bytes cl_order_id = 2;
    if (has_cl_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cl_order_id());
    }

    // optional sfixed32 exec_ack_status = 3;
    if (has_exec_ack_status()) {
      total_size += 1 + 4;
    }

    // optional bytes exec_id = 4;
    if (has_exec_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->exec_id());
    }

    // optional string symbol = 5;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional string fut_sett_date = 6;
    if (has_fut_sett_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fut_sett_date());
    }

    // optional .capkproto.side_t side = 7;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }

    // optional double order_qty = 8;
    if (has_order_qty()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double last_qty = 9;
    if (has_last_qty()) {
      total_size += 1 + 8;
    }

    // optional double last_price = 10;
    if (has_last_price()) {
      total_size += 1 + 8;
    }

    // optional double cum_qty = 11;
    if (has_cum_qty()) {
      total_size += 1 + 8;
    }

    // optional double last_spot_rate = 12;
    if (has_last_spot_rate()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void execution_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const execution_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const execution_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void execution_ack::MergeFrom(const execution_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_cl_order_id()) {
      set_cl_order_id(from.cl_order_id());
    }
    if (from.has_exec_ack_status()) {
      set_exec_ack_status(from.exec_ack_status());
    }
    if (from.has_exec_id()) {
      set_exec_id(from.exec_id());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_fut_sett_date()) {
      set_fut_sett_date(from.fut_sett_date());
    }
    if (from.has_side()) {
      set_side(from.side());
    }
    if (from.has_order_qty()) {
      set_order_qty(from.order_qty());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_last_qty()) {
      set_last_qty(from.last_qty());
    }
    if (from.has_last_price()) {
      set_last_price(from.last_price());
    }
    if (from.has_cum_qty()) {
      set_cum_qty(from.cum_qty());
    }
    if (from.has_last_spot_rate()) {
      set_last_spot_rate(from.last_spot_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void execution_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void execution_ack::CopyFrom(const execution_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool execution_ack::IsInitialized() const {

  return true;
}

void execution_ack::Swap(execution_ack* other) {
  if (other != this) {
    std::swap(order_id_, other->order_id_);
    std::swap(cl_order_id_, other->cl_order_id_);
    std::swap(exec_ack_status_, other->exec_ack_status_);
    std::swap(exec_id_, other->exec_id_);
    std::swap(symbol_, other->symbol_);
    std::swap(fut_sett_date_, other->fut_sett_date_);
    std::swap(side_, other->side_);
    std::swap(order_qty_, other->order_qty_);
    std::swap(last_qty_, other->last_qty_);
    std::swap(last_price_, other->last_price_);
    std::swap(cum_qty_, other->cum_qty_);
    std::swap(last_spot_rate_, other->last_spot_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata execution_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = execution_ack_descriptor_;
  metadata.reflection = execution_ack_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace capkproto

// @@protoc_insertion_point(global_scope)
