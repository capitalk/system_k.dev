// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: execution_report.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "execution_report.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace capkproto {

namespace {

const ::google::protobuf::Descriptor* execution_report_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  execution_report_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_execution_5freport_2eproto() {
  protobuf_AddDesc_execution_5freport_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "execution_report.proto");
  GOOGLE_CHECK(file != NULL);
  execution_report_descriptor_ = file->message_type(0);
  static const int execution_report_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_report, cl_order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_report, orig_cl_order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_report, exec_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_report, exec_trans_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_report, order_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_report, exec_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_report, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_report, security_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_report, side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_report, order_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_report, ord_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_report, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_report, last_shares_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_report, last_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_report, leaves_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_report, cum_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_report, avg_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_report, time_in_force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_report, transact_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_report, exec_inst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_report, handl_inst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_report, order_reject_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_report, min_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_report, venue_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_report, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_report, exec_ref_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_report, exec_restatement_reason_),
  };
  execution_report_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      execution_report_descriptor_,
      execution_report::default_instance_,
      execution_report_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_report, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(execution_report, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(execution_report));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_execution_5freport_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    execution_report_descriptor_, &execution_report::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_execution_5freport_2eproto() {
  delete execution_report::default_instance_;
  delete execution_report_reflection_;
}

void protobuf_AddDesc_execution_5freport_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::capkproto::protobuf_AddDesc_capk_5fglobals_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026execution_report.proto\022\tcapkproto\032\022cap"
    "k_globals.proto\"\315\004\n\020execution_report\022\023\n\013"
    "cl_order_id\030\001 \001(\014\022\030\n\020orig_cl_order_id\030\002 "
    "\001(\014\022\017\n\007exec_id\030\003 \001(\t\022\027\n\017exec_trans_type\030"
    "\004 \001(\017\022\024\n\014order_status\030\005 \001(\017\022\021\n\texec_type"
    "\030\006 \001(\017\022\016\n\006symbol\030\007 \001(\t\022\025\n\rsecurity_type\030"
    "\010 \001(\t\022\037\n\004side\030\t \001(\0162\021.capkproto.side_t\022\021"
    "\n\torder_qty\030\n \001(\001\022\020\n\010ord_type\030\013 \001(\017\022\r\n\005p"
    "rice\030\014 \001(\001\022\023\n\013last_shares\030\r \001(\001\022\022\n\nlast_"
    "price\030\016 \001(\001\022\022\n\nleaves_qty\030\017 \001(\001\022\017\n\007cum_q"
    "ty\030\020 \001(\001\022\021\n\tavg_price\030\021 \001(\001\022\025\n\rtime_in_f"
    "orce\030\022 \001(\017\022\025\n\rtransact_time\030\023 \001(\t\022\021\n\texe"
    "c_inst\030\024 \001(\t\022\022\n\nhandl_inst\030\025 \001(\017\022\033\n\023orde"
    "r_reject_reason\030\026 \001(\017\022\017\n\007min_qty\030\027 \001(\001\022\020"
    "\n\010venue_id\030\030 \001(\017\022\017\n\007account\030\031 \001(\t\022\023\n\013exe"
    "c_ref_id\030\032 \001(\t\022\037\n\027exec_restatement_reaso"
    "n\030\033 \001(\017", 647);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "execution_report.proto", &protobuf_RegisterTypes);
  execution_report::default_instance_ = new execution_report();
  execution_report::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_execution_5freport_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_execution_5freport_2eproto {
  StaticDescriptorInitializer_execution_5freport_2eproto() {
    protobuf_AddDesc_execution_5freport_2eproto();
  }
} static_descriptor_initializer_execution_5freport_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int execution_report::kClOrderIdFieldNumber;
const int execution_report::kOrigClOrderIdFieldNumber;
const int execution_report::kExecIdFieldNumber;
const int execution_report::kExecTransTypeFieldNumber;
const int execution_report::kOrderStatusFieldNumber;
const int execution_report::kExecTypeFieldNumber;
const int execution_report::kSymbolFieldNumber;
const int execution_report::kSecurityTypeFieldNumber;
const int execution_report::kSideFieldNumber;
const int execution_report::kOrderQtyFieldNumber;
const int execution_report::kOrdTypeFieldNumber;
const int execution_report::kPriceFieldNumber;
const int execution_report::kLastSharesFieldNumber;
const int execution_report::kLastPriceFieldNumber;
const int execution_report::kLeavesQtyFieldNumber;
const int execution_report::kCumQtyFieldNumber;
const int execution_report::kAvgPriceFieldNumber;
const int execution_report::kTimeInForceFieldNumber;
const int execution_report::kTransactTimeFieldNumber;
const int execution_report::kExecInstFieldNumber;
const int execution_report::kHandlInstFieldNumber;
const int execution_report::kOrderRejectReasonFieldNumber;
const int execution_report::kMinQtyFieldNumber;
const int execution_report::kVenueIdFieldNumber;
const int execution_report::kAccountFieldNumber;
const int execution_report::kExecRefIdFieldNumber;
const int execution_report::kExecRestatementReasonFieldNumber;
#endif  // !_MSC_VER

execution_report::execution_report()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void execution_report::InitAsDefaultInstance() {
}

execution_report::execution_report(const execution_report& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void execution_report::SharedCtor() {
  _cached_size_ = 0;
  cl_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orig_cl_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exec_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exec_trans_type_ = 0;
  order_status_ = 0;
  exec_type_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  security_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  side_ = 1;
  order_qty_ = 0;
  ord_type_ = 0;
  price_ = 0;
  last_shares_ = 0;
  last_price_ = 0;
  leaves_qty_ = 0;
  cum_qty_ = 0;
  avg_price_ = 0;
  time_in_force_ = 0;
  transact_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exec_inst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  handl_inst_ = 0;
  order_reject_reason_ = 0;
  min_qty_ = 0;
  venue_id_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exec_ref_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exec_restatement_reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

execution_report::~execution_report() {
  SharedDtor();
}

void execution_report::SharedDtor() {
  if (cl_order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete cl_order_id_;
  }
  if (orig_cl_order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete orig_cl_order_id_;
  }
  if (exec_id_ != &::google::protobuf::internal::kEmptyString) {
    delete exec_id_;
  }
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (security_type_ != &::google::protobuf::internal::kEmptyString) {
    delete security_type_;
  }
  if (transact_time_ != &::google::protobuf::internal::kEmptyString) {
    delete transact_time_;
  }
  if (exec_inst_ != &::google::protobuf::internal::kEmptyString) {
    delete exec_inst_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (exec_ref_id_ != &::google::protobuf::internal::kEmptyString) {
    delete exec_ref_id_;
  }
  if (this != default_instance_) {
  }
}

void execution_report::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* execution_report::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return execution_report_descriptor_;
}

const execution_report& execution_report::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_execution_5freport_2eproto();
  return *default_instance_;
}

execution_report* execution_report::default_instance_ = NULL;

execution_report* execution_report::New() const {
  return new execution_report;
}

void execution_report::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cl_order_id()) {
      if (cl_order_id_ != &::google::protobuf::internal::kEmptyString) {
        cl_order_id_->clear();
      }
    }
    if (has_orig_cl_order_id()) {
      if (orig_cl_order_id_ != &::google::protobuf::internal::kEmptyString) {
        orig_cl_order_id_->clear();
      }
    }
    if (has_exec_id()) {
      if (exec_id_ != &::google::protobuf::internal::kEmptyString) {
        exec_id_->clear();
      }
    }
    exec_trans_type_ = 0;
    order_status_ = 0;
    exec_type_ = 0;
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    if (has_security_type()) {
      if (security_type_ != &::google::protobuf::internal::kEmptyString) {
        security_type_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    side_ = 1;
    order_qty_ = 0;
    ord_type_ = 0;
    price_ = 0;
    last_shares_ = 0;
    last_price_ = 0;
    leaves_qty_ = 0;
    cum_qty_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    avg_price_ = 0;
    time_in_force_ = 0;
    if (has_transact_time()) {
      if (transact_time_ != &::google::protobuf::internal::kEmptyString) {
        transact_time_->clear();
      }
    }
    if (has_exec_inst()) {
      if (exec_inst_ != &::google::protobuf::internal::kEmptyString) {
        exec_inst_->clear();
      }
    }
    handl_inst_ = 0;
    order_reject_reason_ = 0;
    min_qty_ = 0;
    venue_id_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_exec_ref_id()) {
      if (exec_ref_id_ != &::google::protobuf::internal::kEmptyString) {
        exec_ref_id_->clear();
      }
    }
    exec_restatement_reason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool execution_report::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes cl_order_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cl_order_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_orig_cl_order_id;
        break;
      }

      // optional bytes orig_cl_order_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orig_cl_order_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_orig_cl_order_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_exec_id;
        break;
      }

      // optional string exec_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exec_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exec_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exec_id().data(), this->exec_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_exec_trans_type;
        break;
      }

      // optional sfixed32 exec_trans_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_exec_trans_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &exec_trans_type_)));
          set_has_exec_trans_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_order_status;
        break;
      }

      // optional sfixed32 order_status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_order_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &order_status_)));
          set_has_order_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_exec_type;
        break;
      }

      // optional sfixed32 exec_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_exec_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &exec_type_)));
          set_has_exec_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_symbol;
        break;
      }

      // optional string symbol = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_security_type;
        break;
      }

      // optional string security_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->security_type().data(), this->security_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_side;
        break;
      }

      // optional .capkproto.side_t side = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_side:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::capkproto::side_t_IsValid(value)) {
            set_side(static_cast< ::capkproto::side_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_order_qty;
        break;
      }

      // optional double order_qty = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_order_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &order_qty_)));
          set_has_order_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_ord_type;
        break;
      }

      // optional sfixed32 ord_type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ord_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &ord_type_)));
          set_has_ord_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_price;
        break;
      }

      // optional double price = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_last_shares;
        break;
      }

      // optional double last_shares = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_last_shares:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_shares_)));
          set_has_last_shares();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_last_price;
        break;
      }

      // optional double last_price = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_last_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_price_)));
          set_has_last_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_leaves_qty;
        break;
      }

      // optional double leaves_qty = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leaves_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &leaves_qty_)));
          set_has_leaves_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_cum_qty;
        break;
      }

      // optional double cum_qty = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_cum_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cum_qty_)));
          set_has_cum_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_avg_price;
        break;
      }

      // optional double avg_price = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_avg_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avg_price_)));
          set_has_avg_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_time_in_force;
        break;
      }

      // optional sfixed32 time_in_force = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_time_in_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &time_in_force_)));
          set_has_time_in_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_transact_time;
        break;
      }

      // optional string transact_time = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transact_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transact_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->transact_time().data(), this->transact_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_exec_inst;
        break;
      }

      // optional string exec_inst = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exec_inst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exec_inst()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exec_inst().data(), this->exec_inst().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_handl_inst;
        break;
      }

      // optional sfixed32 handl_inst = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_handl_inst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &handl_inst_)));
          set_has_handl_inst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(181)) goto parse_order_reject_reason;
        break;
      }

      // optional sfixed32 order_reject_reason = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_order_reject_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &order_reject_reason_)));
          set_has_order_reject_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_min_qty;
        break;
      }

      // optional double min_qty = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_min_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_qty_)));
          set_has_min_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_venue_id;
        break;
      }

      // optional sfixed32 venue_id = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_venue_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &venue_id_)));
          set_has_venue_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_account;
        break;
      }

      // optional string account = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_exec_ref_id;
        break;
      }

      // optional string exec_ref_id = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exec_ref_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exec_ref_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exec_ref_id().data(), this->exec_ref_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(221)) goto parse_exec_restatement_reason;
        break;
      }

      // optional sfixed32 exec_restatement_reason = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_exec_restatement_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &exec_restatement_reason_)));
          set_has_exec_restatement_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void execution_report::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes cl_order_id = 1;
  if (has_cl_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->cl_order_id(), output);
  }

  // optional bytes orig_cl_order_id = 2;
  if (has_orig_cl_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->orig_cl_order_id(), output);
  }

  // optional string exec_id = 3;
  if (has_exec_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exec_id().data(), this->exec_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->exec_id(), output);
  }

  // optional sfixed32 exec_trans_type = 4;
  if (has_exec_trans_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->exec_trans_type(), output);
  }

  // optional sfixed32 order_status = 5;
  if (has_order_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(5, this->order_status(), output);
  }

  // optional sfixed32 exec_type = 6;
  if (has_exec_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(6, this->exec_type(), output);
  }

  // optional string symbol = 7;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->symbol(), output);
  }

  // optional string security_type = 8;
  if (has_security_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_type().data(), this->security_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->security_type(), output);
  }

  // optional .capkproto.side_t side = 9;
  if (has_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->side(), output);
  }

  // optional double order_qty = 10;
  if (has_order_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->order_qty(), output);
  }

  // optional sfixed32 ord_type = 11;
  if (has_ord_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(11, this->ord_type(), output);
  }

  // optional double price = 12;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->price(), output);
  }

  // optional double last_shares = 13;
  if (has_last_shares()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->last_shares(), output);
  }

  // optional double last_price = 14;
  if (has_last_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->last_price(), output);
  }

  // optional double leaves_qty = 15;
  if (has_leaves_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->leaves_qty(), output);
  }

  // optional double cum_qty = 16;
  if (has_cum_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->cum_qty(), output);
  }

  // optional double avg_price = 17;
  if (has_avg_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->avg_price(), output);
  }

  // optional sfixed32 time_in_force = 18;
  if (has_time_in_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(18, this->time_in_force(), output);
  }

  // optional string transact_time = 19;
  if (has_transact_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transact_time().data(), this->transact_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->transact_time(), output);
  }

  // optional string exec_inst = 20;
  if (has_exec_inst()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exec_inst().data(), this->exec_inst().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->exec_inst(), output);
  }

  // optional sfixed32 handl_inst = 21;
  if (has_handl_inst()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(21, this->handl_inst(), output);
  }

  // optional sfixed32 order_reject_reason = 22;
  if (has_order_reject_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(22, this->order_reject_reason(), output);
  }

  // optional double min_qty = 23;
  if (has_min_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->min_qty(), output);
  }

  // optional sfixed32 venue_id = 24;
  if (has_venue_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(24, this->venue_id(), output);
  }

  // optional string account = 25;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->account(), output);
  }

  // optional string exec_ref_id = 26;
  if (has_exec_ref_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exec_ref_id().data(), this->exec_ref_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->exec_ref_id(), output);
  }

  // optional sfixed32 exec_restatement_reason = 27;
  if (has_exec_restatement_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(27, this->exec_restatement_reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* execution_report::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes cl_order_id = 1;
  if (has_cl_order_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->cl_order_id(), target);
  }

  // optional bytes orig_cl_order_id = 2;
  if (has_orig_cl_order_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->orig_cl_order_id(), target);
  }

  // optional string exec_id = 3;
  if (has_exec_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exec_id().data(), this->exec_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exec_id(), target);
  }

  // optional sfixed32 exec_trans_type = 4;
  if (has_exec_trans_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->exec_trans_type(), target);
  }

  // optional sfixed32 order_status = 5;
  if (has_order_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(5, this->order_status(), target);
  }

  // optional sfixed32 exec_type = 6;
  if (has_exec_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(6, this->exec_type(), target);
  }

  // optional string symbol = 7;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->symbol(), target);
  }

  // optional string security_type = 8;
  if (has_security_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_type().data(), this->security_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->security_type(), target);
  }

  // optional .capkproto.side_t side = 9;
  if (has_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->side(), target);
  }

  // optional double order_qty = 10;
  if (has_order_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->order_qty(), target);
  }

  // optional sfixed32 ord_type = 11;
  if (has_ord_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(11, this->ord_type(), target);
  }

  // optional double price = 12;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->price(), target);
  }

  // optional double last_shares = 13;
  if (has_last_shares()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->last_shares(), target);
  }

  // optional double last_price = 14;
  if (has_last_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->last_price(), target);
  }

  // optional double leaves_qty = 15;
  if (has_leaves_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->leaves_qty(), target);
  }

  // optional double cum_qty = 16;
  if (has_cum_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->cum_qty(), target);
  }

  // optional double avg_price = 17;
  if (has_avg_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->avg_price(), target);
  }

  // optional sfixed32 time_in_force = 18;
  if (has_time_in_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(18, this->time_in_force(), target);
  }

  // optional string transact_time = 19;
  if (has_transact_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transact_time().data(), this->transact_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->transact_time(), target);
  }

  // optional string exec_inst = 20;
  if (has_exec_inst()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exec_inst().data(), this->exec_inst().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->exec_inst(), target);
  }

  // optional sfixed32 handl_inst = 21;
  if (has_handl_inst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(21, this->handl_inst(), target);
  }

  // optional sfixed32 order_reject_reason = 22;
  if (has_order_reject_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(22, this->order_reject_reason(), target);
  }

  // optional double min_qty = 23;
  if (has_min_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->min_qty(), target);
  }

  // optional sfixed32 venue_id = 24;
  if (has_venue_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(24, this->venue_id(), target);
  }

  // optional string account = 25;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->account(), target);
  }

  // optional string exec_ref_id = 26;
  if (has_exec_ref_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exec_ref_id().data(), this->exec_ref_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->exec_ref_id(), target);
  }

  // optional sfixed32 exec_restatement_reason = 27;
  if (has_exec_restatement_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(27, this->exec_restatement_reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int execution_report::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes cl_order_id = 1;
    if (has_cl_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cl_order_id());
    }

    // optional bytes orig_cl_order_id = 2;
    if (has_orig_cl_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->orig_cl_order_id());
    }

    // optional string exec_id = 3;
    if (has_exec_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exec_id());
    }

    // optional sfixed32 exec_trans_type = 4;
    if (has_exec_trans_type()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 order_status = 5;
    if (has_order_status()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 exec_type = 6;
    if (has_exec_type()) {
      total_size += 1 + 4;
    }

    // optional string symbol = 7;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional string security_type = 8;
    if (has_security_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .capkproto.side_t side = 9;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }

    // optional double order_qty = 10;
    if (has_order_qty()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 ord_type = 11;
    if (has_ord_type()) {
      total_size += 1 + 4;
    }

    // optional double price = 12;
    if (has_price()) {
      total_size += 1 + 8;
    }

    // optional double last_shares = 13;
    if (has_last_shares()) {
      total_size += 1 + 8;
    }

    // optional double last_price = 14;
    if (has_last_price()) {
      total_size += 1 + 8;
    }

    // optional double leaves_qty = 15;
    if (has_leaves_qty()) {
      total_size += 1 + 8;
    }

    // optional double cum_qty = 16;
    if (has_cum_qty()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional double avg_price = 17;
    if (has_avg_price()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 time_in_force = 18;
    if (has_time_in_force()) {
      total_size += 2 + 4;
    }

    // optional string transact_time = 19;
    if (has_transact_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transact_time());
    }

    // optional string exec_inst = 20;
    if (has_exec_inst()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exec_inst());
    }

    // optional sfixed32 handl_inst = 21;
    if (has_handl_inst()) {
      total_size += 2 + 4;
    }

    // optional sfixed32 order_reject_reason = 22;
    if (has_order_reject_reason()) {
      total_size += 2 + 4;
    }

    // optional double min_qty = 23;
    if (has_min_qty()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 venue_id = 24;
    if (has_venue_id()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string account = 25;
    if (has_account()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string exec_ref_id = 26;
    if (has_exec_ref_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exec_ref_id());
    }

    // optional sfixed32 exec_restatement_reason = 27;
    if (has_exec_restatement_reason()) {
      total_size += 2 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void execution_report::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const execution_report* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const execution_report*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void execution_report::MergeFrom(const execution_report& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cl_order_id()) {
      set_cl_order_id(from.cl_order_id());
    }
    if (from.has_orig_cl_order_id()) {
      set_orig_cl_order_id(from.orig_cl_order_id());
    }
    if (from.has_exec_id()) {
      set_exec_id(from.exec_id());
    }
    if (from.has_exec_trans_type()) {
      set_exec_trans_type(from.exec_trans_type());
    }
    if (from.has_order_status()) {
      set_order_status(from.order_status());
    }
    if (from.has_exec_type()) {
      set_exec_type(from.exec_type());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_security_type()) {
      set_security_type(from.security_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_side()) {
      set_side(from.side());
    }
    if (from.has_order_qty()) {
      set_order_qty(from.order_qty());
    }
    if (from.has_ord_type()) {
      set_ord_type(from.ord_type());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_last_shares()) {
      set_last_shares(from.last_shares());
    }
    if (from.has_last_price()) {
      set_last_price(from.last_price());
    }
    if (from.has_leaves_qty()) {
      set_leaves_qty(from.leaves_qty());
    }
    if (from.has_cum_qty()) {
      set_cum_qty(from.cum_qty());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_avg_price()) {
      set_avg_price(from.avg_price());
    }
    if (from.has_time_in_force()) {
      set_time_in_force(from.time_in_force());
    }
    if (from.has_transact_time()) {
      set_transact_time(from.transact_time());
    }
    if (from.has_exec_inst()) {
      set_exec_inst(from.exec_inst());
    }
    if (from.has_handl_inst()) {
      set_handl_inst(from.handl_inst());
    }
    if (from.has_order_reject_reason()) {
      set_order_reject_reason(from.order_reject_reason());
    }
    if (from.has_min_qty()) {
      set_min_qty(from.min_qty());
    }
    if (from.has_venue_id()) {
      set_venue_id(from.venue_id());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_exec_ref_id()) {
      set_exec_ref_id(from.exec_ref_id());
    }
    if (from.has_exec_restatement_reason()) {
      set_exec_restatement_reason(from.exec_restatement_reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void execution_report::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void execution_report::CopyFrom(const execution_report& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool execution_report::IsInitialized() const {

  return true;
}

void execution_report::Swap(execution_report* other) {
  if (other != this) {
    std::swap(cl_order_id_, other->cl_order_id_);
    std::swap(orig_cl_order_id_, other->orig_cl_order_id_);
    std::swap(exec_id_, other->exec_id_);
    std::swap(exec_trans_type_, other->exec_trans_type_);
    std::swap(order_status_, other->order_status_);
    std::swap(exec_type_, other->exec_type_);
    std::swap(symbol_, other->symbol_);
    std::swap(security_type_, other->security_type_);
    std::swap(side_, other->side_);
    std::swap(order_qty_, other->order_qty_);
    std::swap(ord_type_, other->ord_type_);
    std::swap(price_, other->price_);
    std::swap(last_shares_, other->last_shares_);
    std::swap(last_price_, other->last_price_);
    std::swap(leaves_qty_, other->leaves_qty_);
    std::swap(cum_qty_, other->cum_qty_);
    std::swap(avg_price_, other->avg_price_);
    std::swap(time_in_force_, other->time_in_force_);
    std::swap(transact_time_, other->transact_time_);
    std::swap(exec_inst_, other->exec_inst_);
    std::swap(handl_inst_, other->handl_inst_);
    std::swap(order_reject_reason_, other->order_reject_reason_);
    std::swap(min_qty_, other->min_qty_);
    std::swap(venue_id_, other->venue_id_);
    std::swap(account_, other->account_);
    std::swap(exec_ref_id_, other->exec_ref_id_);
    std::swap(exec_restatement_reason_, other->exec_restatement_reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata execution_report::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = execution_report_descriptor_;
  metadata.reflection = execution_report_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace capkproto

// @@protoc_insertion_point(global_scope)
