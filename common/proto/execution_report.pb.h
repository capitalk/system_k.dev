// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: execution_report.proto

#ifndef PROTOBUF_execution_5freport_2eproto__INCLUDED
#define PROTOBUF_execution_5freport_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "capk_globals.pb.h"
// @@protoc_insertion_point(includes)

namespace capkproto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_execution_5freport_2eproto();
void protobuf_AssignDesc_execution_5freport_2eproto();
void protobuf_ShutdownFile_execution_5freport_2eproto();

class execution_report;

// ===================================================================

class execution_report : public ::google::protobuf::Message {
 public:
  execution_report();
  virtual ~execution_report();

  execution_report(const execution_report& from);

  inline execution_report& operator=(const execution_report& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const execution_report& default_instance();

  void Swap(execution_report* other);

  // implements Message ----------------------------------------------

  execution_report* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const execution_report& from);
  void MergeFrom(const execution_report& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes cl_order_id = 1;
  inline bool has_cl_order_id() const;
  inline void clear_cl_order_id();
  static const int kClOrderIdFieldNumber = 1;
  inline const ::std::string& cl_order_id() const;
  inline void set_cl_order_id(const ::std::string& value);
  inline void set_cl_order_id(const char* value);
  inline void set_cl_order_id(const void* value, size_t size);
  inline ::std::string* mutable_cl_order_id();
  inline ::std::string* release_cl_order_id();
  inline void set_allocated_cl_order_id(::std::string* cl_order_id);

  // optional bytes orig_cl_order_id = 2;
  inline bool has_orig_cl_order_id() const;
  inline void clear_orig_cl_order_id();
  static const int kOrigClOrderIdFieldNumber = 2;
  inline const ::std::string& orig_cl_order_id() const;
  inline void set_orig_cl_order_id(const ::std::string& value);
  inline void set_orig_cl_order_id(const char* value);
  inline void set_orig_cl_order_id(const void* value, size_t size);
  inline ::std::string* mutable_orig_cl_order_id();
  inline ::std::string* release_orig_cl_order_id();
  inline void set_allocated_orig_cl_order_id(::std::string* orig_cl_order_id);

  // optional string exec_id = 3;
  inline bool has_exec_id() const;
  inline void clear_exec_id();
  static const int kExecIdFieldNumber = 3;
  inline const ::std::string& exec_id() const;
  inline void set_exec_id(const ::std::string& value);
  inline void set_exec_id(const char* value);
  inline void set_exec_id(const char* value, size_t size);
  inline ::std::string* mutable_exec_id();
  inline ::std::string* release_exec_id();
  inline void set_allocated_exec_id(::std::string* exec_id);

  // optional sfixed32 exec_trans_type = 4;
  inline bool has_exec_trans_type() const;
  inline void clear_exec_trans_type();
  static const int kExecTransTypeFieldNumber = 4;
  inline ::google::protobuf::int32 exec_trans_type() const;
  inline void set_exec_trans_type(::google::protobuf::int32 value);

  // optional sfixed32 order_status = 5;
  inline bool has_order_status() const;
  inline void clear_order_status();
  static const int kOrderStatusFieldNumber = 5;
  inline ::google::protobuf::int32 order_status() const;
  inline void set_order_status(::google::protobuf::int32 value);

  // optional sfixed32 exec_type = 6;
  inline bool has_exec_type() const;
  inline void clear_exec_type();
  static const int kExecTypeFieldNumber = 6;
  inline ::google::protobuf::int32 exec_type() const;
  inline void set_exec_type(::google::protobuf::int32 value);

  // optional string symbol = 7;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 7;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  inline void set_allocated_symbol(::std::string* symbol);

  // optional string security_type = 8;
  inline bool has_security_type() const;
  inline void clear_security_type();
  static const int kSecurityTypeFieldNumber = 8;
  inline const ::std::string& security_type() const;
  inline void set_security_type(const ::std::string& value);
  inline void set_security_type(const char* value);
  inline void set_security_type(const char* value, size_t size);
  inline ::std::string* mutable_security_type();
  inline ::std::string* release_security_type();
  inline void set_allocated_security_type(::std::string* security_type);

  // optional .capkproto.side_t side = 9;
  inline bool has_side() const;
  inline void clear_side();
  static const int kSideFieldNumber = 9;
  inline ::capkproto::side_t side() const;
  inline void set_side(::capkproto::side_t value);

  // optional double order_qty = 10;
  inline bool has_order_qty() const;
  inline void clear_order_qty();
  static const int kOrderQtyFieldNumber = 10;
  inline double order_qty() const;
  inline void set_order_qty(double value);

  // optional sfixed32 ord_type = 11;
  inline bool has_ord_type() const;
  inline void clear_ord_type();
  static const int kOrdTypeFieldNumber = 11;
  inline ::google::protobuf::int32 ord_type() const;
  inline void set_ord_type(::google::protobuf::int32 value);

  // optional double price = 12;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 12;
  inline double price() const;
  inline void set_price(double value);

  // optional double last_shares = 13;
  inline bool has_last_shares() const;
  inline void clear_last_shares();
  static const int kLastSharesFieldNumber = 13;
  inline double last_shares() const;
  inline void set_last_shares(double value);

  // optional double last_price = 14;
  inline bool has_last_price() const;
  inline void clear_last_price();
  static const int kLastPriceFieldNumber = 14;
  inline double last_price() const;
  inline void set_last_price(double value);

  // optional double leaves_qty = 15;
  inline bool has_leaves_qty() const;
  inline void clear_leaves_qty();
  static const int kLeavesQtyFieldNumber = 15;
  inline double leaves_qty() const;
  inline void set_leaves_qty(double value);

  // optional double cum_qty = 16;
  inline bool has_cum_qty() const;
  inline void clear_cum_qty();
  static const int kCumQtyFieldNumber = 16;
  inline double cum_qty() const;
  inline void set_cum_qty(double value);

  // optional double avg_price = 17;
  inline bool has_avg_price() const;
  inline void clear_avg_price();
  static const int kAvgPriceFieldNumber = 17;
  inline double avg_price() const;
  inline void set_avg_price(double value);

  // optional sfixed32 time_in_force = 18;
  inline bool has_time_in_force() const;
  inline void clear_time_in_force();
  static const int kTimeInForceFieldNumber = 18;
  inline ::google::protobuf::int32 time_in_force() const;
  inline void set_time_in_force(::google::protobuf::int32 value);

  // optional string transact_time = 19;
  inline bool has_transact_time() const;
  inline void clear_transact_time();
  static const int kTransactTimeFieldNumber = 19;
  inline const ::std::string& transact_time() const;
  inline void set_transact_time(const ::std::string& value);
  inline void set_transact_time(const char* value);
  inline void set_transact_time(const char* value, size_t size);
  inline ::std::string* mutable_transact_time();
  inline ::std::string* release_transact_time();
  inline void set_allocated_transact_time(::std::string* transact_time);

  // optional string exec_inst = 20;
  inline bool has_exec_inst() const;
  inline void clear_exec_inst();
  static const int kExecInstFieldNumber = 20;
  inline const ::std::string& exec_inst() const;
  inline void set_exec_inst(const ::std::string& value);
  inline void set_exec_inst(const char* value);
  inline void set_exec_inst(const char* value, size_t size);
  inline ::std::string* mutable_exec_inst();
  inline ::std::string* release_exec_inst();
  inline void set_allocated_exec_inst(::std::string* exec_inst);

  // optional sfixed32 handl_inst = 21;
  inline bool has_handl_inst() const;
  inline void clear_handl_inst();
  static const int kHandlInstFieldNumber = 21;
  inline ::google::protobuf::int32 handl_inst() const;
  inline void set_handl_inst(::google::protobuf::int32 value);

  // optional sfixed32 order_reject_reason = 22;
  inline bool has_order_reject_reason() const;
  inline void clear_order_reject_reason();
  static const int kOrderRejectReasonFieldNumber = 22;
  inline ::google::protobuf::int32 order_reject_reason() const;
  inline void set_order_reject_reason(::google::protobuf::int32 value);

  // optional double min_qty = 23;
  inline bool has_min_qty() const;
  inline void clear_min_qty();
  static const int kMinQtyFieldNumber = 23;
  inline double min_qty() const;
  inline void set_min_qty(double value);

  // optional sfixed32 venue_id = 24;
  inline bool has_venue_id() const;
  inline void clear_venue_id();
  static const int kVenueIdFieldNumber = 24;
  inline ::google::protobuf::int32 venue_id() const;
  inline void set_venue_id(::google::protobuf::int32 value);

  // optional string account = 25;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 25;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional string exec_ref_id = 26;
  inline bool has_exec_ref_id() const;
  inline void clear_exec_ref_id();
  static const int kExecRefIdFieldNumber = 26;
  inline const ::std::string& exec_ref_id() const;
  inline void set_exec_ref_id(const ::std::string& value);
  inline void set_exec_ref_id(const char* value);
  inline void set_exec_ref_id(const char* value, size_t size);
  inline ::std::string* mutable_exec_ref_id();
  inline ::std::string* release_exec_ref_id();
  inline void set_allocated_exec_ref_id(::std::string* exec_ref_id);

  // optional sfixed32 exec_restatement_reason = 27;
  inline bool has_exec_restatement_reason() const;
  inline void clear_exec_restatement_reason();
  static const int kExecRestatementReasonFieldNumber = 27;
  inline ::google::protobuf::int32 exec_restatement_reason() const;
  inline void set_exec_restatement_reason(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:capkproto.execution_report)
 private:
  inline void set_has_cl_order_id();
  inline void clear_has_cl_order_id();
  inline void set_has_orig_cl_order_id();
  inline void clear_has_orig_cl_order_id();
  inline void set_has_exec_id();
  inline void clear_has_exec_id();
  inline void set_has_exec_trans_type();
  inline void clear_has_exec_trans_type();
  inline void set_has_order_status();
  inline void clear_has_order_status();
  inline void set_has_exec_type();
  inline void clear_has_exec_type();
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_security_type();
  inline void clear_has_security_type();
  inline void set_has_side();
  inline void clear_has_side();
  inline void set_has_order_qty();
  inline void clear_has_order_qty();
  inline void set_has_ord_type();
  inline void clear_has_ord_type();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_last_shares();
  inline void clear_has_last_shares();
  inline void set_has_last_price();
  inline void clear_has_last_price();
  inline void set_has_leaves_qty();
  inline void clear_has_leaves_qty();
  inline void set_has_cum_qty();
  inline void clear_has_cum_qty();
  inline void set_has_avg_price();
  inline void clear_has_avg_price();
  inline void set_has_time_in_force();
  inline void clear_has_time_in_force();
  inline void set_has_transact_time();
  inline void clear_has_transact_time();
  inline void set_has_exec_inst();
  inline void clear_has_exec_inst();
  inline void set_has_handl_inst();
  inline void clear_has_handl_inst();
  inline void set_has_order_reject_reason();
  inline void clear_has_order_reject_reason();
  inline void set_has_min_qty();
  inline void clear_has_min_qty();
  inline void set_has_venue_id();
  inline void clear_has_venue_id();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_exec_ref_id();
  inline void clear_has_exec_ref_id();
  inline void set_has_exec_restatement_reason();
  inline void clear_has_exec_restatement_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* cl_order_id_;
  ::std::string* orig_cl_order_id_;
  ::std::string* exec_id_;
  ::google::protobuf::int32 exec_trans_type_;
  ::google::protobuf::int32 order_status_;
  ::std::string* symbol_;
  ::google::protobuf::int32 exec_type_;
  int side_;
  ::std::string* security_type_;
  double order_qty_;
  double price_;
  double last_shares_;
  double last_price_;
  ::google::protobuf::int32 ord_type_;
  ::google::protobuf::int32 time_in_force_;
  double leaves_qty_;
  double cum_qty_;
  double avg_price_;
  ::std::string* transact_time_;
  ::std::string* exec_inst_;
  ::google::protobuf::int32 handl_inst_;
  ::google::protobuf::int32 order_reject_reason_;
  double min_qty_;
  ::std::string* account_;
  ::google::protobuf::int32 venue_id_;
  ::google::protobuf::int32 exec_restatement_reason_;
  ::std::string* exec_ref_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(27 + 31) / 32];

  friend void  protobuf_AddDesc_execution_5freport_2eproto();
  friend void protobuf_AssignDesc_execution_5freport_2eproto();
  friend void protobuf_ShutdownFile_execution_5freport_2eproto();

  void InitAsDefaultInstance();
  static execution_report* default_instance_;
};
// ===================================================================


// ===================================================================

// execution_report

// optional bytes cl_order_id = 1;
inline bool execution_report::has_cl_order_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void execution_report::set_has_cl_order_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void execution_report::clear_has_cl_order_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void execution_report::clear_cl_order_id() {
  if (cl_order_id_ != &::google::protobuf::internal::kEmptyString) {
    cl_order_id_->clear();
  }
  clear_has_cl_order_id();
}
inline const ::std::string& execution_report::cl_order_id() const {
  return *cl_order_id_;
}
inline void execution_report::set_cl_order_id(const ::std::string& value) {
  set_has_cl_order_id();
  if (cl_order_id_ == &::google::protobuf::internal::kEmptyString) {
    cl_order_id_ = new ::std::string;
  }
  cl_order_id_->assign(value);
}
inline void execution_report::set_cl_order_id(const char* value) {
  set_has_cl_order_id();
  if (cl_order_id_ == &::google::protobuf::internal::kEmptyString) {
    cl_order_id_ = new ::std::string;
  }
  cl_order_id_->assign(value);
}
inline void execution_report::set_cl_order_id(const void* value, size_t size) {
  set_has_cl_order_id();
  if (cl_order_id_ == &::google::protobuf::internal::kEmptyString) {
    cl_order_id_ = new ::std::string;
  }
  cl_order_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* execution_report::mutable_cl_order_id() {
  set_has_cl_order_id();
  if (cl_order_id_ == &::google::protobuf::internal::kEmptyString) {
    cl_order_id_ = new ::std::string;
  }
  return cl_order_id_;
}
inline ::std::string* execution_report::release_cl_order_id() {
  clear_has_cl_order_id();
  if (cl_order_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cl_order_id_;
    cl_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void execution_report::set_allocated_cl_order_id(::std::string* cl_order_id) {
  if (cl_order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete cl_order_id_;
  }
  if (cl_order_id) {
    set_has_cl_order_id();
    cl_order_id_ = cl_order_id;
  } else {
    clear_has_cl_order_id();
    cl_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes orig_cl_order_id = 2;
inline bool execution_report::has_orig_cl_order_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void execution_report::set_has_orig_cl_order_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void execution_report::clear_has_orig_cl_order_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void execution_report::clear_orig_cl_order_id() {
  if (orig_cl_order_id_ != &::google::protobuf::internal::kEmptyString) {
    orig_cl_order_id_->clear();
  }
  clear_has_orig_cl_order_id();
}
inline const ::std::string& execution_report::orig_cl_order_id() const {
  return *orig_cl_order_id_;
}
inline void execution_report::set_orig_cl_order_id(const ::std::string& value) {
  set_has_orig_cl_order_id();
  if (orig_cl_order_id_ == &::google::protobuf::internal::kEmptyString) {
    orig_cl_order_id_ = new ::std::string;
  }
  orig_cl_order_id_->assign(value);
}
inline void execution_report::set_orig_cl_order_id(const char* value) {
  set_has_orig_cl_order_id();
  if (orig_cl_order_id_ == &::google::protobuf::internal::kEmptyString) {
    orig_cl_order_id_ = new ::std::string;
  }
  orig_cl_order_id_->assign(value);
}
inline void execution_report::set_orig_cl_order_id(const void* value, size_t size) {
  set_has_orig_cl_order_id();
  if (orig_cl_order_id_ == &::google::protobuf::internal::kEmptyString) {
    orig_cl_order_id_ = new ::std::string;
  }
  orig_cl_order_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* execution_report::mutable_orig_cl_order_id() {
  set_has_orig_cl_order_id();
  if (orig_cl_order_id_ == &::google::protobuf::internal::kEmptyString) {
    orig_cl_order_id_ = new ::std::string;
  }
  return orig_cl_order_id_;
}
inline ::std::string* execution_report::release_orig_cl_order_id() {
  clear_has_orig_cl_order_id();
  if (orig_cl_order_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = orig_cl_order_id_;
    orig_cl_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void execution_report::set_allocated_orig_cl_order_id(::std::string* orig_cl_order_id) {
  if (orig_cl_order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete orig_cl_order_id_;
  }
  if (orig_cl_order_id) {
    set_has_orig_cl_order_id();
    orig_cl_order_id_ = orig_cl_order_id;
  } else {
    clear_has_orig_cl_order_id();
    orig_cl_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string exec_id = 3;
inline bool execution_report::has_exec_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void execution_report::set_has_exec_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void execution_report::clear_has_exec_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void execution_report::clear_exec_id() {
  if (exec_id_ != &::google::protobuf::internal::kEmptyString) {
    exec_id_->clear();
  }
  clear_has_exec_id();
}
inline const ::std::string& execution_report::exec_id() const {
  return *exec_id_;
}
inline void execution_report::set_exec_id(const ::std::string& value) {
  set_has_exec_id();
  if (exec_id_ == &::google::protobuf::internal::kEmptyString) {
    exec_id_ = new ::std::string;
  }
  exec_id_->assign(value);
}
inline void execution_report::set_exec_id(const char* value) {
  set_has_exec_id();
  if (exec_id_ == &::google::protobuf::internal::kEmptyString) {
    exec_id_ = new ::std::string;
  }
  exec_id_->assign(value);
}
inline void execution_report::set_exec_id(const char* value, size_t size) {
  set_has_exec_id();
  if (exec_id_ == &::google::protobuf::internal::kEmptyString) {
    exec_id_ = new ::std::string;
  }
  exec_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* execution_report::mutable_exec_id() {
  set_has_exec_id();
  if (exec_id_ == &::google::protobuf::internal::kEmptyString) {
    exec_id_ = new ::std::string;
  }
  return exec_id_;
}
inline ::std::string* execution_report::release_exec_id() {
  clear_has_exec_id();
  if (exec_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = exec_id_;
    exec_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void execution_report::set_allocated_exec_id(::std::string* exec_id) {
  if (exec_id_ != &::google::protobuf::internal::kEmptyString) {
    delete exec_id_;
  }
  if (exec_id) {
    set_has_exec_id();
    exec_id_ = exec_id;
  } else {
    clear_has_exec_id();
    exec_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional sfixed32 exec_trans_type = 4;
inline bool execution_report::has_exec_trans_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void execution_report::set_has_exec_trans_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void execution_report::clear_has_exec_trans_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void execution_report::clear_exec_trans_type() {
  exec_trans_type_ = 0;
  clear_has_exec_trans_type();
}
inline ::google::protobuf::int32 execution_report::exec_trans_type() const {
  return exec_trans_type_;
}
inline void execution_report::set_exec_trans_type(::google::protobuf::int32 value) {
  set_has_exec_trans_type();
  exec_trans_type_ = value;
}

// optional sfixed32 order_status = 5;
inline bool execution_report::has_order_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void execution_report::set_has_order_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void execution_report::clear_has_order_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void execution_report::clear_order_status() {
  order_status_ = 0;
  clear_has_order_status();
}
inline ::google::protobuf::int32 execution_report::order_status() const {
  return order_status_;
}
inline void execution_report::set_order_status(::google::protobuf::int32 value) {
  set_has_order_status();
  order_status_ = value;
}

// optional sfixed32 exec_type = 6;
inline bool execution_report::has_exec_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void execution_report::set_has_exec_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void execution_report::clear_has_exec_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void execution_report::clear_exec_type() {
  exec_type_ = 0;
  clear_has_exec_type();
}
inline ::google::protobuf::int32 execution_report::exec_type() const {
  return exec_type_;
}
inline void execution_report::set_exec_type(::google::protobuf::int32 value) {
  set_has_exec_type();
  exec_type_ = value;
}

// optional string symbol = 7;
inline bool execution_report::has_symbol() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void execution_report::set_has_symbol() {
  _has_bits_[0] |= 0x00000040u;
}
inline void execution_report::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void execution_report::clear_symbol() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    symbol_->clear();
  }
  clear_has_symbol();
}
inline const ::std::string& execution_report::symbol() const {
  return *symbol_;
}
inline void execution_report::set_symbol(const ::std::string& value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void execution_report::set_symbol(const char* value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void execution_report::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* execution_report::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  return symbol_;
}
inline ::std::string* execution_report::release_symbol() {
  clear_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = symbol_;
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void execution_report::set_allocated_symbol(::std::string* symbol) {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (symbol) {
    set_has_symbol();
    symbol_ = symbol;
  } else {
    clear_has_symbol();
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string security_type = 8;
inline bool execution_report::has_security_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void execution_report::set_has_security_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void execution_report::clear_has_security_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void execution_report::clear_security_type() {
  if (security_type_ != &::google::protobuf::internal::kEmptyString) {
    security_type_->clear();
  }
  clear_has_security_type();
}
inline const ::std::string& execution_report::security_type() const {
  return *security_type_;
}
inline void execution_report::set_security_type(const ::std::string& value) {
  set_has_security_type();
  if (security_type_ == &::google::protobuf::internal::kEmptyString) {
    security_type_ = new ::std::string;
  }
  security_type_->assign(value);
}
inline void execution_report::set_security_type(const char* value) {
  set_has_security_type();
  if (security_type_ == &::google::protobuf::internal::kEmptyString) {
    security_type_ = new ::std::string;
  }
  security_type_->assign(value);
}
inline void execution_report::set_security_type(const char* value, size_t size) {
  set_has_security_type();
  if (security_type_ == &::google::protobuf::internal::kEmptyString) {
    security_type_ = new ::std::string;
  }
  security_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* execution_report::mutable_security_type() {
  set_has_security_type();
  if (security_type_ == &::google::protobuf::internal::kEmptyString) {
    security_type_ = new ::std::string;
  }
  return security_type_;
}
inline ::std::string* execution_report::release_security_type() {
  clear_has_security_type();
  if (security_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = security_type_;
    security_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void execution_report::set_allocated_security_type(::std::string* security_type) {
  if (security_type_ != &::google::protobuf::internal::kEmptyString) {
    delete security_type_;
  }
  if (security_type) {
    set_has_security_type();
    security_type_ = security_type;
  } else {
    clear_has_security_type();
    security_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .capkproto.side_t side = 9;
inline bool execution_report::has_side() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void execution_report::set_has_side() {
  _has_bits_[0] |= 0x00000100u;
}
inline void execution_report::clear_has_side() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void execution_report::clear_side() {
  side_ = 1;
  clear_has_side();
}
inline ::capkproto::side_t execution_report::side() const {
  return static_cast< ::capkproto::side_t >(side_);
}
inline void execution_report::set_side(::capkproto::side_t value) {
  assert(::capkproto::side_t_IsValid(value));
  set_has_side();
  side_ = value;
}

// optional double order_qty = 10;
inline bool execution_report::has_order_qty() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void execution_report::set_has_order_qty() {
  _has_bits_[0] |= 0x00000200u;
}
inline void execution_report::clear_has_order_qty() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void execution_report::clear_order_qty() {
  order_qty_ = 0;
  clear_has_order_qty();
}
inline double execution_report::order_qty() const {
  return order_qty_;
}
inline void execution_report::set_order_qty(double value) {
  set_has_order_qty();
  order_qty_ = value;
}

// optional sfixed32 ord_type = 11;
inline bool execution_report::has_ord_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void execution_report::set_has_ord_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void execution_report::clear_has_ord_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void execution_report::clear_ord_type() {
  ord_type_ = 0;
  clear_has_ord_type();
}
inline ::google::protobuf::int32 execution_report::ord_type() const {
  return ord_type_;
}
inline void execution_report::set_ord_type(::google::protobuf::int32 value) {
  set_has_ord_type();
  ord_type_ = value;
}

// optional double price = 12;
inline bool execution_report::has_price() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void execution_report::set_has_price() {
  _has_bits_[0] |= 0x00000800u;
}
inline void execution_report::clear_has_price() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void execution_report::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline double execution_report::price() const {
  return price_;
}
inline void execution_report::set_price(double value) {
  set_has_price();
  price_ = value;
}

// optional double last_shares = 13;
inline bool execution_report::has_last_shares() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void execution_report::set_has_last_shares() {
  _has_bits_[0] |= 0x00001000u;
}
inline void execution_report::clear_has_last_shares() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void execution_report::clear_last_shares() {
  last_shares_ = 0;
  clear_has_last_shares();
}
inline double execution_report::last_shares() const {
  return last_shares_;
}
inline void execution_report::set_last_shares(double value) {
  set_has_last_shares();
  last_shares_ = value;
}

// optional double last_price = 14;
inline bool execution_report::has_last_price() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void execution_report::set_has_last_price() {
  _has_bits_[0] |= 0x00002000u;
}
inline void execution_report::clear_has_last_price() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void execution_report::clear_last_price() {
  last_price_ = 0;
  clear_has_last_price();
}
inline double execution_report::last_price() const {
  return last_price_;
}
inline void execution_report::set_last_price(double value) {
  set_has_last_price();
  last_price_ = value;
}

// optional double leaves_qty = 15;
inline bool execution_report::has_leaves_qty() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void execution_report::set_has_leaves_qty() {
  _has_bits_[0] |= 0x00004000u;
}
inline void execution_report::clear_has_leaves_qty() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void execution_report::clear_leaves_qty() {
  leaves_qty_ = 0;
  clear_has_leaves_qty();
}
inline double execution_report::leaves_qty() const {
  return leaves_qty_;
}
inline void execution_report::set_leaves_qty(double value) {
  set_has_leaves_qty();
  leaves_qty_ = value;
}

// optional double cum_qty = 16;
inline bool execution_report::has_cum_qty() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void execution_report::set_has_cum_qty() {
  _has_bits_[0] |= 0x00008000u;
}
inline void execution_report::clear_has_cum_qty() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void execution_report::clear_cum_qty() {
  cum_qty_ = 0;
  clear_has_cum_qty();
}
inline double execution_report::cum_qty() const {
  return cum_qty_;
}
inline void execution_report::set_cum_qty(double value) {
  set_has_cum_qty();
  cum_qty_ = value;
}

// optional double avg_price = 17;
inline bool execution_report::has_avg_price() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void execution_report::set_has_avg_price() {
  _has_bits_[0] |= 0x00010000u;
}
inline void execution_report::clear_has_avg_price() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void execution_report::clear_avg_price() {
  avg_price_ = 0;
  clear_has_avg_price();
}
inline double execution_report::avg_price() const {
  return avg_price_;
}
inline void execution_report::set_avg_price(double value) {
  set_has_avg_price();
  avg_price_ = value;
}

// optional sfixed32 time_in_force = 18;
inline bool execution_report::has_time_in_force() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void execution_report::set_has_time_in_force() {
  _has_bits_[0] |= 0x00020000u;
}
inline void execution_report::clear_has_time_in_force() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void execution_report::clear_time_in_force() {
  time_in_force_ = 0;
  clear_has_time_in_force();
}
inline ::google::protobuf::int32 execution_report::time_in_force() const {
  return time_in_force_;
}
inline void execution_report::set_time_in_force(::google::protobuf::int32 value) {
  set_has_time_in_force();
  time_in_force_ = value;
}

// optional string transact_time = 19;
inline bool execution_report::has_transact_time() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void execution_report::set_has_transact_time() {
  _has_bits_[0] |= 0x00040000u;
}
inline void execution_report::clear_has_transact_time() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void execution_report::clear_transact_time() {
  if (transact_time_ != &::google::protobuf::internal::kEmptyString) {
    transact_time_->clear();
  }
  clear_has_transact_time();
}
inline const ::std::string& execution_report::transact_time() const {
  return *transact_time_;
}
inline void execution_report::set_transact_time(const ::std::string& value) {
  set_has_transact_time();
  if (transact_time_ == &::google::protobuf::internal::kEmptyString) {
    transact_time_ = new ::std::string;
  }
  transact_time_->assign(value);
}
inline void execution_report::set_transact_time(const char* value) {
  set_has_transact_time();
  if (transact_time_ == &::google::protobuf::internal::kEmptyString) {
    transact_time_ = new ::std::string;
  }
  transact_time_->assign(value);
}
inline void execution_report::set_transact_time(const char* value, size_t size) {
  set_has_transact_time();
  if (transact_time_ == &::google::protobuf::internal::kEmptyString) {
    transact_time_ = new ::std::string;
  }
  transact_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* execution_report::mutable_transact_time() {
  set_has_transact_time();
  if (transact_time_ == &::google::protobuf::internal::kEmptyString) {
    transact_time_ = new ::std::string;
  }
  return transact_time_;
}
inline ::std::string* execution_report::release_transact_time() {
  clear_has_transact_time();
  if (transact_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = transact_time_;
    transact_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void execution_report::set_allocated_transact_time(::std::string* transact_time) {
  if (transact_time_ != &::google::protobuf::internal::kEmptyString) {
    delete transact_time_;
  }
  if (transact_time) {
    set_has_transact_time();
    transact_time_ = transact_time;
  } else {
    clear_has_transact_time();
    transact_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string exec_inst = 20;
inline bool execution_report::has_exec_inst() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void execution_report::set_has_exec_inst() {
  _has_bits_[0] |= 0x00080000u;
}
inline void execution_report::clear_has_exec_inst() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void execution_report::clear_exec_inst() {
  if (exec_inst_ != &::google::protobuf::internal::kEmptyString) {
    exec_inst_->clear();
  }
  clear_has_exec_inst();
}
inline const ::std::string& execution_report::exec_inst() const {
  return *exec_inst_;
}
inline void execution_report::set_exec_inst(const ::std::string& value) {
  set_has_exec_inst();
  if (exec_inst_ == &::google::protobuf::internal::kEmptyString) {
    exec_inst_ = new ::std::string;
  }
  exec_inst_->assign(value);
}
inline void execution_report::set_exec_inst(const char* value) {
  set_has_exec_inst();
  if (exec_inst_ == &::google::protobuf::internal::kEmptyString) {
    exec_inst_ = new ::std::string;
  }
  exec_inst_->assign(value);
}
inline void execution_report::set_exec_inst(const char* value, size_t size) {
  set_has_exec_inst();
  if (exec_inst_ == &::google::protobuf::internal::kEmptyString) {
    exec_inst_ = new ::std::string;
  }
  exec_inst_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* execution_report::mutable_exec_inst() {
  set_has_exec_inst();
  if (exec_inst_ == &::google::protobuf::internal::kEmptyString) {
    exec_inst_ = new ::std::string;
  }
  return exec_inst_;
}
inline ::std::string* execution_report::release_exec_inst() {
  clear_has_exec_inst();
  if (exec_inst_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = exec_inst_;
    exec_inst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void execution_report::set_allocated_exec_inst(::std::string* exec_inst) {
  if (exec_inst_ != &::google::protobuf::internal::kEmptyString) {
    delete exec_inst_;
  }
  if (exec_inst) {
    set_has_exec_inst();
    exec_inst_ = exec_inst;
  } else {
    clear_has_exec_inst();
    exec_inst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional sfixed32 handl_inst = 21;
inline bool execution_report::has_handl_inst() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void execution_report::set_has_handl_inst() {
  _has_bits_[0] |= 0x00100000u;
}
inline void execution_report::clear_has_handl_inst() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void execution_report::clear_handl_inst() {
  handl_inst_ = 0;
  clear_has_handl_inst();
}
inline ::google::protobuf::int32 execution_report::handl_inst() const {
  return handl_inst_;
}
inline void execution_report::set_handl_inst(::google::protobuf::int32 value) {
  set_has_handl_inst();
  handl_inst_ = value;
}

// optional sfixed32 order_reject_reason = 22;
inline bool execution_report::has_order_reject_reason() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void execution_report::set_has_order_reject_reason() {
  _has_bits_[0] |= 0x00200000u;
}
inline void execution_report::clear_has_order_reject_reason() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void execution_report::clear_order_reject_reason() {
  order_reject_reason_ = 0;
  clear_has_order_reject_reason();
}
inline ::google::protobuf::int32 execution_report::order_reject_reason() const {
  return order_reject_reason_;
}
inline void execution_report::set_order_reject_reason(::google::protobuf::int32 value) {
  set_has_order_reject_reason();
  order_reject_reason_ = value;
}

// optional double min_qty = 23;
inline bool execution_report::has_min_qty() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void execution_report::set_has_min_qty() {
  _has_bits_[0] |= 0x00400000u;
}
inline void execution_report::clear_has_min_qty() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void execution_report::clear_min_qty() {
  min_qty_ = 0;
  clear_has_min_qty();
}
inline double execution_report::min_qty() const {
  return min_qty_;
}
inline void execution_report::set_min_qty(double value) {
  set_has_min_qty();
  min_qty_ = value;
}

// optional sfixed32 venue_id = 24;
inline bool execution_report::has_venue_id() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void execution_report::set_has_venue_id() {
  _has_bits_[0] |= 0x00800000u;
}
inline void execution_report::clear_has_venue_id() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void execution_report::clear_venue_id() {
  venue_id_ = 0;
  clear_has_venue_id();
}
inline ::google::protobuf::int32 execution_report::venue_id() const {
  return venue_id_;
}
inline void execution_report::set_venue_id(::google::protobuf::int32 value) {
  set_has_venue_id();
  venue_id_ = value;
}

// optional string account = 25;
inline bool execution_report::has_account() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void execution_report::set_has_account() {
  _has_bits_[0] |= 0x01000000u;
}
inline void execution_report::clear_has_account() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void execution_report::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& execution_report::account() const {
  return *account_;
}
inline void execution_report::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void execution_report::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void execution_report::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* execution_report::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* execution_report::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void execution_report::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string exec_ref_id = 26;
inline bool execution_report::has_exec_ref_id() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void execution_report::set_has_exec_ref_id() {
  _has_bits_[0] |= 0x02000000u;
}
inline void execution_report::clear_has_exec_ref_id() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void execution_report::clear_exec_ref_id() {
  if (exec_ref_id_ != &::google::protobuf::internal::kEmptyString) {
    exec_ref_id_->clear();
  }
  clear_has_exec_ref_id();
}
inline const ::std::string& execution_report::exec_ref_id() const {
  return *exec_ref_id_;
}
inline void execution_report::set_exec_ref_id(const ::std::string& value) {
  set_has_exec_ref_id();
  if (exec_ref_id_ == &::google::protobuf::internal::kEmptyString) {
    exec_ref_id_ = new ::std::string;
  }
  exec_ref_id_->assign(value);
}
inline void execution_report::set_exec_ref_id(const char* value) {
  set_has_exec_ref_id();
  if (exec_ref_id_ == &::google::protobuf::internal::kEmptyString) {
    exec_ref_id_ = new ::std::string;
  }
  exec_ref_id_->assign(value);
}
inline void execution_report::set_exec_ref_id(const char* value, size_t size) {
  set_has_exec_ref_id();
  if (exec_ref_id_ == &::google::protobuf::internal::kEmptyString) {
    exec_ref_id_ = new ::std::string;
  }
  exec_ref_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* execution_report::mutable_exec_ref_id() {
  set_has_exec_ref_id();
  if (exec_ref_id_ == &::google::protobuf::internal::kEmptyString) {
    exec_ref_id_ = new ::std::string;
  }
  return exec_ref_id_;
}
inline ::std::string* execution_report::release_exec_ref_id() {
  clear_has_exec_ref_id();
  if (exec_ref_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = exec_ref_id_;
    exec_ref_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void execution_report::set_allocated_exec_ref_id(::std::string* exec_ref_id) {
  if (exec_ref_id_ != &::google::protobuf::internal::kEmptyString) {
    delete exec_ref_id_;
  }
  if (exec_ref_id) {
    set_has_exec_ref_id();
    exec_ref_id_ = exec_ref_id;
  } else {
    clear_has_exec_ref_id();
    exec_ref_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional sfixed32 exec_restatement_reason = 27;
inline bool execution_report::has_exec_restatement_reason() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void execution_report::set_has_exec_restatement_reason() {
  _has_bits_[0] |= 0x04000000u;
}
inline void execution_report::clear_has_exec_restatement_reason() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void execution_report::clear_exec_restatement_reason() {
  exec_restatement_reason_ = 0;
  clear_has_exec_restatement_reason();
}
inline ::google::protobuf::int32 execution_report::exec_restatement_reason() const {
  return exec_restatement_reason_;
}
inline void execution_report::set_exec_restatement_reason(::google::protobuf::int32 value) {
  set_has_exec_restatement_reason();
  exec_restatement_reason_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace capkproto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_execution_5freport_2eproto__INCLUDED
