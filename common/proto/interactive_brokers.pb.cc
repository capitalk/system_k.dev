// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: interactive_brokers.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "interactive_brokers.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace capkproto {

namespace {

const ::google::protobuf::Descriptor* interactive_brokers_bbo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  interactive_brokers_bbo_reflection_ = NULL;
const ::google::protobuf::Descriptor* interactive_brokers_contract_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  interactive_brokers_contract_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_interactive_5fbrokers_2eproto() {
  protobuf_AddDesc_interactive_5fbrokers_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "interactive_brokers.proto");
  GOOGLE_CHECK(file != NULL);
  interactive_brokers_bbo_descriptor_ = file->message_type(0);
  static const int interactive_brokers_bbo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interactive_brokers_bbo, venue_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interactive_brokers_bbo, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interactive_brokers_bbo, bid_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interactive_brokers_bbo, bid_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interactive_brokers_bbo, ask_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interactive_brokers_bbo, ask_price_),
  };
  interactive_brokers_bbo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      interactive_brokers_bbo_descriptor_,
      interactive_brokers_bbo::default_instance_,
      interactive_brokers_bbo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interactive_brokers_bbo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interactive_brokers_bbo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(interactive_brokers_bbo));
  interactive_brokers_contract_descriptor_ = file->message_type(1);
  static const int interactive_brokers_contract_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interactive_brokers_contract, conid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interactive_brokers_contract, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interactive_brokers_contract, sectype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interactive_brokers_contract, expiry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interactive_brokers_contract, strike_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interactive_brokers_contract, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interactive_brokers_contract, multiplier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interactive_brokers_contract, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interactive_brokers_contract, primaryexchagne_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interactive_brokers_contract, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interactive_brokers_contract, localsymbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interactive_brokers_contract, includeexpired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interactive_brokers_contract, secidtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interactive_brokers_contract, secid_),
  };
  interactive_brokers_contract_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      interactive_brokers_contract_descriptor_,
      interactive_brokers_contract::default_instance_,
      interactive_brokers_contract_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interactive_brokers_contract, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(interactive_brokers_contract, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(interactive_brokers_contract));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_interactive_5fbrokers_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    interactive_brokers_bbo_descriptor_, &interactive_brokers_bbo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    interactive_brokers_contract_descriptor_, &interactive_brokers_contract::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_interactive_5fbrokers_2eproto() {
  delete interactive_brokers_bbo::default_instance_;
  delete interactive_brokers_bbo_reflection_;
  delete interactive_brokers_contract::default_instance_;
  delete interactive_brokers_contract_reflection_;
}

void protobuf_AddDesc_interactive_5fbrokers_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::capkproto::protobuf_AddDesc_capk_5fglobals_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031interactive_brokers.proto\022\tcapkproto\032\022"
    "capk_globals.proto\"\205\001\n\027interactive_broke"
    "rs_bbo\022\020\n\010venue_id\030\001 \002(\017\022\016\n\006symbol\030\002 \002(\t"
    "\022\020\n\010bid_size\030\003 \002(\001\022\021\n\tbid_price\030\004 \002(\001\022\020\n"
    "\010ask_size\030\005 \002(\001\022\021\n\task_price\030\006 \002(\001\"\235\002\n\034i"
    "nteractive_brokers_contract\022\r\n\005conId\030\001 \002"
    "(\017\022\016\n\006symbol\030\002 \001(\t\022\017\n\007secType\030\003 \001(\t\022\016\n\006e"
    "xpiry\030\004 \001(\t\022\016\n\006strike\030\005 \001(\001\022\r\n\005right\030\006 \001"
    "(\t\022\022\n\nmultiplier\030\007 \001(\t\022\020\n\010exchange\030\010 \001(\t"
    "\022\027\n\017primaryExchagne\030\t \001(\t\022\020\n\010currency\030\n "
    "\001(\t\022\023\n\013localSymbol\030\013 \001(\t\022\026\n\016includeExpir"
    "ed\030\014 \001(\010\022\021\n\tsecIdType\030\r \001(\t\022\r\n\005secId\030\016 \001"
    "(\t", 482);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "interactive_brokers.proto", &protobuf_RegisterTypes);
  interactive_brokers_bbo::default_instance_ = new interactive_brokers_bbo();
  interactive_brokers_contract::default_instance_ = new interactive_brokers_contract();
  interactive_brokers_bbo::default_instance_->InitAsDefaultInstance();
  interactive_brokers_contract::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_interactive_5fbrokers_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_interactive_5fbrokers_2eproto {
  StaticDescriptorInitializer_interactive_5fbrokers_2eproto() {
    protobuf_AddDesc_interactive_5fbrokers_2eproto();
  }
} static_descriptor_initializer_interactive_5fbrokers_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int interactive_brokers_bbo::kVenueIdFieldNumber;
const int interactive_brokers_bbo::kSymbolFieldNumber;
const int interactive_brokers_bbo::kBidSizeFieldNumber;
const int interactive_brokers_bbo::kBidPriceFieldNumber;
const int interactive_brokers_bbo::kAskSizeFieldNumber;
const int interactive_brokers_bbo::kAskPriceFieldNumber;
#endif  // !_MSC_VER

interactive_brokers_bbo::interactive_brokers_bbo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void interactive_brokers_bbo::InitAsDefaultInstance() {
}

interactive_brokers_bbo::interactive_brokers_bbo(const interactive_brokers_bbo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void interactive_brokers_bbo::SharedCtor() {
  _cached_size_ = 0;
  venue_id_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bid_size_ = 0;
  bid_price_ = 0;
  ask_size_ = 0;
  ask_price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

interactive_brokers_bbo::~interactive_brokers_bbo() {
  SharedDtor();
}

void interactive_brokers_bbo::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
  }
}

void interactive_brokers_bbo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* interactive_brokers_bbo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return interactive_brokers_bbo_descriptor_;
}

const interactive_brokers_bbo& interactive_brokers_bbo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interactive_5fbrokers_2eproto();
  return *default_instance_;
}

interactive_brokers_bbo* interactive_brokers_bbo::default_instance_ = NULL;

interactive_brokers_bbo* interactive_brokers_bbo::New() const {
  return new interactive_brokers_bbo;
}

void interactive_brokers_bbo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    venue_id_ = 0;
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    bid_size_ = 0;
    bid_price_ = 0;
    ask_size_ = 0;
    ask_price_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool interactive_brokers_bbo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sfixed32 venue_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &venue_id_)));
          set_has_venue_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_symbol;
        break;
      }

      // required string symbol = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_bid_size;
        break;
      }

      // required double bid_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bid_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bid_size_)));
          set_has_bid_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_bid_price;
        break;
      }

      // required double bid_price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bid_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bid_price_)));
          set_has_bid_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_ask_size;
        break;
      }

      // required double ask_size = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ask_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ask_size_)));
          set_has_ask_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_ask_price;
        break;
      }

      // required double ask_price = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ask_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ask_price_)));
          set_has_ask_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void interactive_brokers_bbo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sfixed32 venue_id = 1;
  if (has_venue_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->venue_id(), output);
  }

  // required string symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->symbol(), output);
  }

  // required double bid_size = 3;
  if (has_bid_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->bid_size(), output);
  }

  // required double bid_price = 4;
  if (has_bid_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->bid_price(), output);
  }

  // required double ask_size = 5;
  if (has_ask_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ask_size(), output);
  }

  // required double ask_price = 6;
  if (has_ask_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->ask_price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* interactive_brokers_bbo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sfixed32 venue_id = 1;
  if (has_venue_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->venue_id(), target);
  }

  // required string symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->symbol(), target);
  }

  // required double bid_size = 3;
  if (has_bid_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->bid_size(), target);
  }

  // required double bid_price = 4;
  if (has_bid_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->bid_price(), target);
  }

  // required double ask_size = 5;
  if (has_ask_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ask_size(), target);
  }

  // required double ask_price = 6;
  if (has_ask_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->ask_price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int interactive_brokers_bbo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sfixed32 venue_id = 1;
    if (has_venue_id()) {
      total_size += 1 + 4;
    }

    // required string symbol = 2;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // required double bid_size = 3;
    if (has_bid_size()) {
      total_size += 1 + 8;
    }

    // required double bid_price = 4;
    if (has_bid_price()) {
      total_size += 1 + 8;
    }

    // required double ask_size = 5;
    if (has_ask_size()) {
      total_size += 1 + 8;
    }

    // required double ask_price = 6;
    if (has_ask_price()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void interactive_brokers_bbo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const interactive_brokers_bbo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const interactive_brokers_bbo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void interactive_brokers_bbo::MergeFrom(const interactive_brokers_bbo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_venue_id()) {
      set_venue_id(from.venue_id());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_bid_size()) {
      set_bid_size(from.bid_size());
    }
    if (from.has_bid_price()) {
      set_bid_price(from.bid_price());
    }
    if (from.has_ask_size()) {
      set_ask_size(from.ask_size());
    }
    if (from.has_ask_price()) {
      set_ask_price(from.ask_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void interactive_brokers_bbo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void interactive_brokers_bbo::CopyFrom(const interactive_brokers_bbo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool interactive_brokers_bbo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void interactive_brokers_bbo::Swap(interactive_brokers_bbo* other) {
  if (other != this) {
    std::swap(venue_id_, other->venue_id_);
    std::swap(symbol_, other->symbol_);
    std::swap(bid_size_, other->bid_size_);
    std::swap(bid_price_, other->bid_price_);
    std::swap(ask_size_, other->ask_size_);
    std::swap(ask_price_, other->ask_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata interactive_brokers_bbo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = interactive_brokers_bbo_descriptor_;
  metadata.reflection = interactive_brokers_bbo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int interactive_brokers_contract::kConIdFieldNumber;
const int interactive_brokers_contract::kSymbolFieldNumber;
const int interactive_brokers_contract::kSecTypeFieldNumber;
const int interactive_brokers_contract::kExpiryFieldNumber;
const int interactive_brokers_contract::kStrikeFieldNumber;
const int interactive_brokers_contract::kRightFieldNumber;
const int interactive_brokers_contract::kMultiplierFieldNumber;
const int interactive_brokers_contract::kExchangeFieldNumber;
const int interactive_brokers_contract::kPrimaryExchagneFieldNumber;
const int interactive_brokers_contract::kCurrencyFieldNumber;
const int interactive_brokers_contract::kLocalSymbolFieldNumber;
const int interactive_brokers_contract::kIncludeExpiredFieldNumber;
const int interactive_brokers_contract::kSecIdTypeFieldNumber;
const int interactive_brokers_contract::kSecIdFieldNumber;
#endif  // !_MSC_VER

interactive_brokers_contract::interactive_brokers_contract()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void interactive_brokers_contract::InitAsDefaultInstance() {
}

interactive_brokers_contract::interactive_brokers_contract(const interactive_brokers_contract& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void interactive_brokers_contract::SharedCtor() {
  _cached_size_ = 0;
  conid_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sectype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  expiry_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strike_ = 0;
  right_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  multiplier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  primaryexchagne_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  localsymbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  includeexpired_ = false;
  secidtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  secid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

interactive_brokers_contract::~interactive_brokers_contract() {
  SharedDtor();
}

void interactive_brokers_contract::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (sectype_ != &::google::protobuf::internal::kEmptyString) {
    delete sectype_;
  }
  if (expiry_ != &::google::protobuf::internal::kEmptyString) {
    delete expiry_;
  }
  if (right_ != &::google::protobuf::internal::kEmptyString) {
    delete right_;
  }
  if (multiplier_ != &::google::protobuf::internal::kEmptyString) {
    delete multiplier_;
  }
  if (exchange_ != &::google::protobuf::internal::kEmptyString) {
    delete exchange_;
  }
  if (primaryexchagne_ != &::google::protobuf::internal::kEmptyString) {
    delete primaryexchagne_;
  }
  if (currency_ != &::google::protobuf::internal::kEmptyString) {
    delete currency_;
  }
  if (localsymbol_ != &::google::protobuf::internal::kEmptyString) {
    delete localsymbol_;
  }
  if (secidtype_ != &::google::protobuf::internal::kEmptyString) {
    delete secidtype_;
  }
  if (secid_ != &::google::protobuf::internal::kEmptyString) {
    delete secid_;
  }
  if (this != default_instance_) {
  }
}

void interactive_brokers_contract::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* interactive_brokers_contract::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return interactive_brokers_contract_descriptor_;
}

const interactive_brokers_contract& interactive_brokers_contract::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interactive_5fbrokers_2eproto();
  return *default_instance_;
}

interactive_brokers_contract* interactive_brokers_contract::default_instance_ = NULL;

interactive_brokers_contract* interactive_brokers_contract::New() const {
  return new interactive_brokers_contract;
}

void interactive_brokers_contract::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    conid_ = 0;
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    if (has_sectype()) {
      if (sectype_ != &::google::protobuf::internal::kEmptyString) {
        sectype_->clear();
      }
    }
    if (has_expiry()) {
      if (expiry_ != &::google::protobuf::internal::kEmptyString) {
        expiry_->clear();
      }
    }
    strike_ = 0;
    if (has_right()) {
      if (right_ != &::google::protobuf::internal::kEmptyString) {
        right_->clear();
      }
    }
    if (has_multiplier()) {
      if (multiplier_ != &::google::protobuf::internal::kEmptyString) {
        multiplier_->clear();
      }
    }
    if (has_exchange()) {
      if (exchange_ != &::google::protobuf::internal::kEmptyString) {
        exchange_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_primaryexchagne()) {
      if (primaryexchagne_ != &::google::protobuf::internal::kEmptyString) {
        primaryexchagne_->clear();
      }
    }
    if (has_currency()) {
      if (currency_ != &::google::protobuf::internal::kEmptyString) {
        currency_->clear();
      }
    }
    if (has_localsymbol()) {
      if (localsymbol_ != &::google::protobuf::internal::kEmptyString) {
        localsymbol_->clear();
      }
    }
    includeexpired_ = false;
    if (has_secidtype()) {
      if (secidtype_ != &::google::protobuf::internal::kEmptyString) {
        secidtype_->clear();
      }
    }
    if (has_secid()) {
      if (secid_ != &::google::protobuf::internal::kEmptyString) {
        secid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool interactive_brokers_contract::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sfixed32 conId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &conid_)));
          set_has_conid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_symbol;
        break;
      }

      // optional string symbol = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_secType;
        break;
      }

      // optional string secType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_secType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sectype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sectype().data(), this->sectype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_expiry;
        break;
      }

      // optional string expiry = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_expiry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_expiry()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->expiry().data(), this->expiry().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_strike;
        break;
      }

      // optional double strike = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_strike:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &strike_)));
          set_has_strike();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_right;
        break;
      }

      // optional string right = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_right()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->right().data(), this->right().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_multiplier;
        break;
      }

      // optional string multiplier = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_multiplier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_multiplier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->multiplier().data(), this->multiplier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_exchange;
        break;
      }

      // optional string exchange = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_primaryExchagne;
        break;
      }

      // optional string primaryExchagne = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_primaryExchagne:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_primaryexchagne()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->primaryexchagne().data(), this->primaryexchagne().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_currency;
        break;
      }

      // optional string currency = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currency().data(), this->currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_localSymbol;
        break;
      }

      // optional string localSymbol = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_localSymbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_localsymbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->localsymbol().data(), this->localsymbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_includeExpired;
        break;
      }

      // optional bool includeExpired = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_includeExpired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &includeexpired_)));
          set_has_includeexpired();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_secIdType;
        break;
      }

      // optional string secIdType = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_secIdType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secidtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->secidtype().data(), this->secidtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_secId;
        break;
      }

      // optional string secId = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_secId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->secid().data(), this->secid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void interactive_brokers_contract::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sfixed32 conId = 1;
  if (has_conid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->conid(), output);
  }

  // optional string symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->symbol(), output);
  }

  // optional string secType = 3;
  if (has_sectype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sectype().data(), this->sectype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sectype(), output);
  }

  // optional string expiry = 4;
  if (has_expiry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->expiry().data(), this->expiry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->expiry(), output);
  }

  // optional double strike = 5;
  if (has_strike()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->strike(), output);
  }

  // optional string right = 6;
  if (has_right()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->right().data(), this->right().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->right(), output);
  }

  // optional string multiplier = 7;
  if (has_multiplier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->multiplier().data(), this->multiplier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->multiplier(), output);
  }

  // optional string exchange = 8;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->exchange(), output);
  }

  // optional string primaryExchagne = 9;
  if (has_primaryexchagne()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->primaryexchagne().data(), this->primaryexchagne().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->primaryexchagne(), output);
  }

  // optional string currency = 10;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->currency(), output);
  }

  // optional string localSymbol = 11;
  if (has_localsymbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->localsymbol().data(), this->localsymbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->localsymbol(), output);
  }

  // optional bool includeExpired = 12;
  if (has_includeexpired()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->includeexpired(), output);
  }

  // optional string secIdType = 13;
  if (has_secidtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secidtype().data(), this->secidtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->secidtype(), output);
  }

  // optional string secId = 14;
  if (has_secid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secid().data(), this->secid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->secid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* interactive_brokers_contract::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sfixed32 conId = 1;
  if (has_conid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->conid(), target);
  }

  // optional string symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->symbol(), target);
  }

  // optional string secType = 3;
  if (has_sectype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sectype().data(), this->sectype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sectype(), target);
  }

  // optional string expiry = 4;
  if (has_expiry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->expiry().data(), this->expiry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->expiry(), target);
  }

  // optional double strike = 5;
  if (has_strike()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->strike(), target);
  }

  // optional string right = 6;
  if (has_right()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->right().data(), this->right().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->right(), target);
  }

  // optional string multiplier = 7;
  if (has_multiplier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->multiplier().data(), this->multiplier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->multiplier(), target);
  }

  // optional string exchange = 8;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->exchange(), target);
  }

  // optional string primaryExchagne = 9;
  if (has_primaryexchagne()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->primaryexchagne().data(), this->primaryexchagne().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->primaryexchagne(), target);
  }

  // optional string currency = 10;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->currency(), target);
  }

  // optional string localSymbol = 11;
  if (has_localsymbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->localsymbol().data(), this->localsymbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->localsymbol(), target);
  }

  // optional bool includeExpired = 12;
  if (has_includeexpired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->includeexpired(), target);
  }

  // optional string secIdType = 13;
  if (has_secidtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secidtype().data(), this->secidtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->secidtype(), target);
  }

  // optional string secId = 14;
  if (has_secid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secid().data(), this->secid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->secid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int interactive_brokers_contract::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sfixed32 conId = 1;
    if (has_conid()) {
      total_size += 1 + 4;
    }

    // optional string symbol = 2;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional string secType = 3;
    if (has_sectype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sectype());
    }

    // optional string expiry = 4;
    if (has_expiry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->expiry());
    }

    // optional double strike = 5;
    if (has_strike()) {
      total_size += 1 + 8;
    }

    // optional string right = 6;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->right());
    }

    // optional string multiplier = 7;
    if (has_multiplier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->multiplier());
    }

    // optional string exchange = 8;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchange());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string primaryExchagne = 9;
    if (has_primaryexchagne()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->primaryexchagne());
    }

    // optional string currency = 10;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency());
    }

    // optional string localSymbol = 11;
    if (has_localsymbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->localsymbol());
    }

    // optional bool includeExpired = 12;
    if (has_includeexpired()) {
      total_size += 1 + 1;
    }

    // optional string secIdType = 13;
    if (has_secidtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secidtype());
    }

    // optional string secId = 14;
    if (has_secid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void interactive_brokers_contract::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const interactive_brokers_contract* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const interactive_brokers_contract*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void interactive_brokers_contract::MergeFrom(const interactive_brokers_contract& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_conid()) {
      set_conid(from.conid());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_sectype()) {
      set_sectype(from.sectype());
    }
    if (from.has_expiry()) {
      set_expiry(from.expiry());
    }
    if (from.has_strike()) {
      set_strike(from.strike());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
    if (from.has_multiplier()) {
      set_multiplier(from.multiplier());
    }
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_primaryexchagne()) {
      set_primaryexchagne(from.primaryexchagne());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_localsymbol()) {
      set_localsymbol(from.localsymbol());
    }
    if (from.has_includeexpired()) {
      set_includeexpired(from.includeexpired());
    }
    if (from.has_secidtype()) {
      set_secidtype(from.secidtype());
    }
    if (from.has_secid()) {
      set_secid(from.secid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void interactive_brokers_contract::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void interactive_brokers_contract::CopyFrom(const interactive_brokers_contract& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool interactive_brokers_contract::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void interactive_brokers_contract::Swap(interactive_brokers_contract* other) {
  if (other != this) {
    std::swap(conid_, other->conid_);
    std::swap(symbol_, other->symbol_);
    std::swap(sectype_, other->sectype_);
    std::swap(expiry_, other->expiry_);
    std::swap(strike_, other->strike_);
    std::swap(right_, other->right_);
    std::swap(multiplier_, other->multiplier_);
    std::swap(exchange_, other->exchange_);
    std::swap(primaryexchagne_, other->primaryexchagne_);
    std::swap(currency_, other->currency_);
    std::swap(localsymbol_, other->localsymbol_);
    std::swap(includeexpired_, other->includeexpired_);
    std::swap(secidtype_, other->secidtype_);
    std::swap(secid_, other->secid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata interactive_brokers_contract::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = interactive_brokers_contract_descriptor_;
  metadata.reflection = interactive_brokers_contract_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace capkproto

// @@protoc_insertion_point(global_scope)
