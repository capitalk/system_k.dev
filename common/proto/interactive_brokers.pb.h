// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: interactive_brokers.proto

#ifndef PROTOBUF_interactive_5fbrokers_2eproto__INCLUDED
#define PROTOBUF_interactive_5fbrokers_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "capk_globals.pb.h"
// @@protoc_insertion_point(includes)

namespace capkproto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_interactive_5fbrokers_2eproto();
void protobuf_AssignDesc_interactive_5fbrokers_2eproto();
void protobuf_ShutdownFile_interactive_5fbrokers_2eproto();

class interactive_brokers_bbo;
class interactive_brokers_contract;

// ===================================================================

class interactive_brokers_bbo : public ::google::protobuf::Message {
 public:
  interactive_brokers_bbo();
  virtual ~interactive_brokers_bbo();

  interactive_brokers_bbo(const interactive_brokers_bbo& from);

  inline interactive_brokers_bbo& operator=(const interactive_brokers_bbo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const interactive_brokers_bbo& default_instance();

  void Swap(interactive_brokers_bbo* other);

  // implements Message ----------------------------------------------

  interactive_brokers_bbo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const interactive_brokers_bbo& from);
  void MergeFrom(const interactive_brokers_bbo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sfixed32 venue_id = 1;
  inline bool has_venue_id() const;
  inline void clear_venue_id();
  static const int kVenueIdFieldNumber = 1;
  inline ::google::protobuf::int32 venue_id() const;
  inline void set_venue_id(::google::protobuf::int32 value);

  // required string symbol = 2;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 2;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  inline void set_allocated_symbol(::std::string* symbol);

  // required double bid_size = 3;
  inline bool has_bid_size() const;
  inline void clear_bid_size();
  static const int kBidSizeFieldNumber = 3;
  inline double bid_size() const;
  inline void set_bid_size(double value);

  // required double bid_price = 4;
  inline bool has_bid_price() const;
  inline void clear_bid_price();
  static const int kBidPriceFieldNumber = 4;
  inline double bid_price() const;
  inline void set_bid_price(double value);

  // required double ask_size = 5;
  inline bool has_ask_size() const;
  inline void clear_ask_size();
  static const int kAskSizeFieldNumber = 5;
  inline double ask_size() const;
  inline void set_ask_size(double value);

  // required double ask_price = 6;
  inline bool has_ask_price() const;
  inline void clear_ask_price();
  static const int kAskPriceFieldNumber = 6;
  inline double ask_price() const;
  inline void set_ask_price(double value);

  // @@protoc_insertion_point(class_scope:capkproto.interactive_brokers_bbo)
 private:
  inline void set_has_venue_id();
  inline void clear_has_venue_id();
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_bid_size();
  inline void clear_has_bid_size();
  inline void set_has_bid_price();
  inline void clear_has_bid_price();
  inline void set_has_ask_size();
  inline void clear_has_ask_size();
  inline void set_has_ask_price();
  inline void clear_has_ask_price();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* symbol_;
  double bid_size_;
  double bid_price_;
  double ask_size_;
  double ask_price_;
  ::google::protobuf::int32 venue_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_interactive_5fbrokers_2eproto();
  friend void protobuf_AssignDesc_interactive_5fbrokers_2eproto();
  friend void protobuf_ShutdownFile_interactive_5fbrokers_2eproto();

  void InitAsDefaultInstance();
  static interactive_brokers_bbo* default_instance_;
};
// -------------------------------------------------------------------

class interactive_brokers_contract : public ::google::protobuf::Message {
 public:
  interactive_brokers_contract();
  virtual ~interactive_brokers_contract();

  interactive_brokers_contract(const interactive_brokers_contract& from);

  inline interactive_brokers_contract& operator=(const interactive_brokers_contract& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const interactive_brokers_contract& default_instance();

  void Swap(interactive_brokers_contract* other);

  // implements Message ----------------------------------------------

  interactive_brokers_contract* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const interactive_brokers_contract& from);
  void MergeFrom(const interactive_brokers_contract& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sfixed32 conId = 1;
  inline bool has_conid() const;
  inline void clear_conid();
  static const int kConIdFieldNumber = 1;
  inline ::google::protobuf::int32 conid() const;
  inline void set_conid(::google::protobuf::int32 value);

  // optional string symbol = 2;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 2;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  inline void set_allocated_symbol(::std::string* symbol);

  // optional string secType = 3;
  inline bool has_sectype() const;
  inline void clear_sectype();
  static const int kSecTypeFieldNumber = 3;
  inline const ::std::string& sectype() const;
  inline void set_sectype(const ::std::string& value);
  inline void set_sectype(const char* value);
  inline void set_sectype(const char* value, size_t size);
  inline ::std::string* mutable_sectype();
  inline ::std::string* release_sectype();
  inline void set_allocated_sectype(::std::string* sectype);

  // optional string expiry = 4;
  inline bool has_expiry() const;
  inline void clear_expiry();
  static const int kExpiryFieldNumber = 4;
  inline const ::std::string& expiry() const;
  inline void set_expiry(const ::std::string& value);
  inline void set_expiry(const char* value);
  inline void set_expiry(const char* value, size_t size);
  inline ::std::string* mutable_expiry();
  inline ::std::string* release_expiry();
  inline void set_allocated_expiry(::std::string* expiry);

  // optional double strike = 5;
  inline bool has_strike() const;
  inline void clear_strike();
  static const int kStrikeFieldNumber = 5;
  inline double strike() const;
  inline void set_strike(double value);

  // optional string right = 6;
  inline bool has_right() const;
  inline void clear_right();
  static const int kRightFieldNumber = 6;
  inline const ::std::string& right() const;
  inline void set_right(const ::std::string& value);
  inline void set_right(const char* value);
  inline void set_right(const char* value, size_t size);
  inline ::std::string* mutable_right();
  inline ::std::string* release_right();
  inline void set_allocated_right(::std::string* right);

  // optional string multiplier = 7;
  inline bool has_multiplier() const;
  inline void clear_multiplier();
  static const int kMultiplierFieldNumber = 7;
  inline const ::std::string& multiplier() const;
  inline void set_multiplier(const ::std::string& value);
  inline void set_multiplier(const char* value);
  inline void set_multiplier(const char* value, size_t size);
  inline ::std::string* mutable_multiplier();
  inline ::std::string* release_multiplier();
  inline void set_allocated_multiplier(::std::string* multiplier);

  // optional string exchange = 8;
  inline bool has_exchange() const;
  inline void clear_exchange();
  static const int kExchangeFieldNumber = 8;
  inline const ::std::string& exchange() const;
  inline void set_exchange(const ::std::string& value);
  inline void set_exchange(const char* value);
  inline void set_exchange(const char* value, size_t size);
  inline ::std::string* mutable_exchange();
  inline ::std::string* release_exchange();
  inline void set_allocated_exchange(::std::string* exchange);

  // optional string primaryExchagne = 9;
  inline bool has_primaryexchagne() const;
  inline void clear_primaryexchagne();
  static const int kPrimaryExchagneFieldNumber = 9;
  inline const ::std::string& primaryexchagne() const;
  inline void set_primaryexchagne(const ::std::string& value);
  inline void set_primaryexchagne(const char* value);
  inline void set_primaryexchagne(const char* value, size_t size);
  inline ::std::string* mutable_primaryexchagne();
  inline ::std::string* release_primaryexchagne();
  inline void set_allocated_primaryexchagne(::std::string* primaryexchagne);

  // optional string currency = 10;
  inline bool has_currency() const;
  inline void clear_currency();
  static const int kCurrencyFieldNumber = 10;
  inline const ::std::string& currency() const;
  inline void set_currency(const ::std::string& value);
  inline void set_currency(const char* value);
  inline void set_currency(const char* value, size_t size);
  inline ::std::string* mutable_currency();
  inline ::std::string* release_currency();
  inline void set_allocated_currency(::std::string* currency);

  // optional string localSymbol = 11;
  inline bool has_localsymbol() const;
  inline void clear_localsymbol();
  static const int kLocalSymbolFieldNumber = 11;
  inline const ::std::string& localsymbol() const;
  inline void set_localsymbol(const ::std::string& value);
  inline void set_localsymbol(const char* value);
  inline void set_localsymbol(const char* value, size_t size);
  inline ::std::string* mutable_localsymbol();
  inline ::std::string* release_localsymbol();
  inline void set_allocated_localsymbol(::std::string* localsymbol);

  // optional bool includeExpired = 12;
  inline bool has_includeexpired() const;
  inline void clear_includeexpired();
  static const int kIncludeExpiredFieldNumber = 12;
  inline bool includeexpired() const;
  inline void set_includeexpired(bool value);

  // optional string secIdType = 13;
  inline bool has_secidtype() const;
  inline void clear_secidtype();
  static const int kSecIdTypeFieldNumber = 13;
  inline const ::std::string& secidtype() const;
  inline void set_secidtype(const ::std::string& value);
  inline void set_secidtype(const char* value);
  inline void set_secidtype(const char* value, size_t size);
  inline ::std::string* mutable_secidtype();
  inline ::std::string* release_secidtype();
  inline void set_allocated_secidtype(::std::string* secidtype);

  // optional string secId = 14;
  inline bool has_secid() const;
  inline void clear_secid();
  static const int kSecIdFieldNumber = 14;
  inline const ::std::string& secid() const;
  inline void set_secid(const ::std::string& value);
  inline void set_secid(const char* value);
  inline void set_secid(const char* value, size_t size);
  inline ::std::string* mutable_secid();
  inline ::std::string* release_secid();
  inline void set_allocated_secid(::std::string* secid);

  // @@protoc_insertion_point(class_scope:capkproto.interactive_brokers_contract)
 private:
  inline void set_has_conid();
  inline void clear_has_conid();
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_sectype();
  inline void clear_has_sectype();
  inline void set_has_expiry();
  inline void clear_has_expiry();
  inline void set_has_strike();
  inline void clear_has_strike();
  inline void set_has_right();
  inline void clear_has_right();
  inline void set_has_multiplier();
  inline void clear_has_multiplier();
  inline void set_has_exchange();
  inline void clear_has_exchange();
  inline void set_has_primaryexchagne();
  inline void clear_has_primaryexchagne();
  inline void set_has_currency();
  inline void clear_has_currency();
  inline void set_has_localsymbol();
  inline void clear_has_localsymbol();
  inline void set_has_includeexpired();
  inline void clear_has_includeexpired();
  inline void set_has_secidtype();
  inline void clear_has_secidtype();
  inline void set_has_secid();
  inline void clear_has_secid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* symbol_;
  ::std::string* sectype_;
  ::std::string* expiry_;
  double strike_;
  ::std::string* right_;
  ::google::protobuf::int32 conid_;
  bool includeexpired_;
  ::std::string* multiplier_;
  ::std::string* exchange_;
  ::std::string* primaryexchagne_;
  ::std::string* currency_;
  ::std::string* localsymbol_;
  ::std::string* secidtype_;
  ::std::string* secid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_interactive_5fbrokers_2eproto();
  friend void protobuf_AssignDesc_interactive_5fbrokers_2eproto();
  friend void protobuf_ShutdownFile_interactive_5fbrokers_2eproto();

  void InitAsDefaultInstance();
  static interactive_brokers_contract* default_instance_;
};
// ===================================================================


// ===================================================================

// interactive_brokers_bbo

// required sfixed32 venue_id = 1;
inline bool interactive_brokers_bbo::has_venue_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void interactive_brokers_bbo::set_has_venue_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void interactive_brokers_bbo::clear_has_venue_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void interactive_brokers_bbo::clear_venue_id() {
  venue_id_ = 0;
  clear_has_venue_id();
}
inline ::google::protobuf::int32 interactive_brokers_bbo::venue_id() const {
  return venue_id_;
}
inline void interactive_brokers_bbo::set_venue_id(::google::protobuf::int32 value) {
  set_has_venue_id();
  venue_id_ = value;
}

// required string symbol = 2;
inline bool interactive_brokers_bbo::has_symbol() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void interactive_brokers_bbo::set_has_symbol() {
  _has_bits_[0] |= 0x00000002u;
}
inline void interactive_brokers_bbo::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void interactive_brokers_bbo::clear_symbol() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    symbol_->clear();
  }
  clear_has_symbol();
}
inline const ::std::string& interactive_brokers_bbo::symbol() const {
  return *symbol_;
}
inline void interactive_brokers_bbo::set_symbol(const ::std::string& value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void interactive_brokers_bbo::set_symbol(const char* value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void interactive_brokers_bbo::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* interactive_brokers_bbo::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  return symbol_;
}
inline ::std::string* interactive_brokers_bbo::release_symbol() {
  clear_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = symbol_;
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void interactive_brokers_bbo::set_allocated_symbol(::std::string* symbol) {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (symbol) {
    set_has_symbol();
    symbol_ = symbol;
  } else {
    clear_has_symbol();
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required double bid_size = 3;
inline bool interactive_brokers_bbo::has_bid_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void interactive_brokers_bbo::set_has_bid_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void interactive_brokers_bbo::clear_has_bid_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void interactive_brokers_bbo::clear_bid_size() {
  bid_size_ = 0;
  clear_has_bid_size();
}
inline double interactive_brokers_bbo::bid_size() const {
  return bid_size_;
}
inline void interactive_brokers_bbo::set_bid_size(double value) {
  set_has_bid_size();
  bid_size_ = value;
}

// required double bid_price = 4;
inline bool interactive_brokers_bbo::has_bid_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void interactive_brokers_bbo::set_has_bid_price() {
  _has_bits_[0] |= 0x00000008u;
}
inline void interactive_brokers_bbo::clear_has_bid_price() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void interactive_brokers_bbo::clear_bid_price() {
  bid_price_ = 0;
  clear_has_bid_price();
}
inline double interactive_brokers_bbo::bid_price() const {
  return bid_price_;
}
inline void interactive_brokers_bbo::set_bid_price(double value) {
  set_has_bid_price();
  bid_price_ = value;
}

// required double ask_size = 5;
inline bool interactive_brokers_bbo::has_ask_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void interactive_brokers_bbo::set_has_ask_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void interactive_brokers_bbo::clear_has_ask_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void interactive_brokers_bbo::clear_ask_size() {
  ask_size_ = 0;
  clear_has_ask_size();
}
inline double interactive_brokers_bbo::ask_size() const {
  return ask_size_;
}
inline void interactive_brokers_bbo::set_ask_size(double value) {
  set_has_ask_size();
  ask_size_ = value;
}

// required double ask_price = 6;
inline bool interactive_brokers_bbo::has_ask_price() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void interactive_brokers_bbo::set_has_ask_price() {
  _has_bits_[0] |= 0x00000020u;
}
inline void interactive_brokers_bbo::clear_has_ask_price() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void interactive_brokers_bbo::clear_ask_price() {
  ask_price_ = 0;
  clear_has_ask_price();
}
inline double interactive_brokers_bbo::ask_price() const {
  return ask_price_;
}
inline void interactive_brokers_bbo::set_ask_price(double value) {
  set_has_ask_price();
  ask_price_ = value;
}

// -------------------------------------------------------------------

// interactive_brokers_contract

// required sfixed32 conId = 1;
inline bool interactive_brokers_contract::has_conid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void interactive_brokers_contract::set_has_conid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void interactive_brokers_contract::clear_has_conid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void interactive_brokers_contract::clear_conid() {
  conid_ = 0;
  clear_has_conid();
}
inline ::google::protobuf::int32 interactive_brokers_contract::conid() const {
  return conid_;
}
inline void interactive_brokers_contract::set_conid(::google::protobuf::int32 value) {
  set_has_conid();
  conid_ = value;
}

// optional string symbol = 2;
inline bool interactive_brokers_contract::has_symbol() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void interactive_brokers_contract::set_has_symbol() {
  _has_bits_[0] |= 0x00000002u;
}
inline void interactive_brokers_contract::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void interactive_brokers_contract::clear_symbol() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    symbol_->clear();
  }
  clear_has_symbol();
}
inline const ::std::string& interactive_brokers_contract::symbol() const {
  return *symbol_;
}
inline void interactive_brokers_contract::set_symbol(const ::std::string& value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void interactive_brokers_contract::set_symbol(const char* value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void interactive_brokers_contract::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* interactive_brokers_contract::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  return symbol_;
}
inline ::std::string* interactive_brokers_contract::release_symbol() {
  clear_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = symbol_;
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void interactive_brokers_contract::set_allocated_symbol(::std::string* symbol) {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (symbol) {
    set_has_symbol();
    symbol_ = symbol;
  } else {
    clear_has_symbol();
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string secType = 3;
inline bool interactive_brokers_contract::has_sectype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void interactive_brokers_contract::set_has_sectype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void interactive_brokers_contract::clear_has_sectype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void interactive_brokers_contract::clear_sectype() {
  if (sectype_ != &::google::protobuf::internal::kEmptyString) {
    sectype_->clear();
  }
  clear_has_sectype();
}
inline const ::std::string& interactive_brokers_contract::sectype() const {
  return *sectype_;
}
inline void interactive_brokers_contract::set_sectype(const ::std::string& value) {
  set_has_sectype();
  if (sectype_ == &::google::protobuf::internal::kEmptyString) {
    sectype_ = new ::std::string;
  }
  sectype_->assign(value);
}
inline void interactive_brokers_contract::set_sectype(const char* value) {
  set_has_sectype();
  if (sectype_ == &::google::protobuf::internal::kEmptyString) {
    sectype_ = new ::std::string;
  }
  sectype_->assign(value);
}
inline void interactive_brokers_contract::set_sectype(const char* value, size_t size) {
  set_has_sectype();
  if (sectype_ == &::google::protobuf::internal::kEmptyString) {
    sectype_ = new ::std::string;
  }
  sectype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* interactive_brokers_contract::mutable_sectype() {
  set_has_sectype();
  if (sectype_ == &::google::protobuf::internal::kEmptyString) {
    sectype_ = new ::std::string;
  }
  return sectype_;
}
inline ::std::string* interactive_brokers_contract::release_sectype() {
  clear_has_sectype();
  if (sectype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sectype_;
    sectype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void interactive_brokers_contract::set_allocated_sectype(::std::string* sectype) {
  if (sectype_ != &::google::protobuf::internal::kEmptyString) {
    delete sectype_;
  }
  if (sectype) {
    set_has_sectype();
    sectype_ = sectype;
  } else {
    clear_has_sectype();
    sectype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string expiry = 4;
inline bool interactive_brokers_contract::has_expiry() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void interactive_brokers_contract::set_has_expiry() {
  _has_bits_[0] |= 0x00000008u;
}
inline void interactive_brokers_contract::clear_has_expiry() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void interactive_brokers_contract::clear_expiry() {
  if (expiry_ != &::google::protobuf::internal::kEmptyString) {
    expiry_->clear();
  }
  clear_has_expiry();
}
inline const ::std::string& interactive_brokers_contract::expiry() const {
  return *expiry_;
}
inline void interactive_brokers_contract::set_expiry(const ::std::string& value) {
  set_has_expiry();
  if (expiry_ == &::google::protobuf::internal::kEmptyString) {
    expiry_ = new ::std::string;
  }
  expiry_->assign(value);
}
inline void interactive_brokers_contract::set_expiry(const char* value) {
  set_has_expiry();
  if (expiry_ == &::google::protobuf::internal::kEmptyString) {
    expiry_ = new ::std::string;
  }
  expiry_->assign(value);
}
inline void interactive_brokers_contract::set_expiry(const char* value, size_t size) {
  set_has_expiry();
  if (expiry_ == &::google::protobuf::internal::kEmptyString) {
    expiry_ = new ::std::string;
  }
  expiry_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* interactive_brokers_contract::mutable_expiry() {
  set_has_expiry();
  if (expiry_ == &::google::protobuf::internal::kEmptyString) {
    expiry_ = new ::std::string;
  }
  return expiry_;
}
inline ::std::string* interactive_brokers_contract::release_expiry() {
  clear_has_expiry();
  if (expiry_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = expiry_;
    expiry_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void interactive_brokers_contract::set_allocated_expiry(::std::string* expiry) {
  if (expiry_ != &::google::protobuf::internal::kEmptyString) {
    delete expiry_;
  }
  if (expiry) {
    set_has_expiry();
    expiry_ = expiry;
  } else {
    clear_has_expiry();
    expiry_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional double strike = 5;
inline bool interactive_brokers_contract::has_strike() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void interactive_brokers_contract::set_has_strike() {
  _has_bits_[0] |= 0x00000010u;
}
inline void interactive_brokers_contract::clear_has_strike() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void interactive_brokers_contract::clear_strike() {
  strike_ = 0;
  clear_has_strike();
}
inline double interactive_brokers_contract::strike() const {
  return strike_;
}
inline void interactive_brokers_contract::set_strike(double value) {
  set_has_strike();
  strike_ = value;
}

// optional string right = 6;
inline bool interactive_brokers_contract::has_right() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void interactive_brokers_contract::set_has_right() {
  _has_bits_[0] |= 0x00000020u;
}
inline void interactive_brokers_contract::clear_has_right() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void interactive_brokers_contract::clear_right() {
  if (right_ != &::google::protobuf::internal::kEmptyString) {
    right_->clear();
  }
  clear_has_right();
}
inline const ::std::string& interactive_brokers_contract::right() const {
  return *right_;
}
inline void interactive_brokers_contract::set_right(const ::std::string& value) {
  set_has_right();
  if (right_ == &::google::protobuf::internal::kEmptyString) {
    right_ = new ::std::string;
  }
  right_->assign(value);
}
inline void interactive_brokers_contract::set_right(const char* value) {
  set_has_right();
  if (right_ == &::google::protobuf::internal::kEmptyString) {
    right_ = new ::std::string;
  }
  right_->assign(value);
}
inline void interactive_brokers_contract::set_right(const char* value, size_t size) {
  set_has_right();
  if (right_ == &::google::protobuf::internal::kEmptyString) {
    right_ = new ::std::string;
  }
  right_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* interactive_brokers_contract::mutable_right() {
  set_has_right();
  if (right_ == &::google::protobuf::internal::kEmptyString) {
    right_ = new ::std::string;
  }
  return right_;
}
inline ::std::string* interactive_brokers_contract::release_right() {
  clear_has_right();
  if (right_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = right_;
    right_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void interactive_brokers_contract::set_allocated_right(::std::string* right) {
  if (right_ != &::google::protobuf::internal::kEmptyString) {
    delete right_;
  }
  if (right) {
    set_has_right();
    right_ = right;
  } else {
    clear_has_right();
    right_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string multiplier = 7;
inline bool interactive_brokers_contract::has_multiplier() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void interactive_brokers_contract::set_has_multiplier() {
  _has_bits_[0] |= 0x00000040u;
}
inline void interactive_brokers_contract::clear_has_multiplier() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void interactive_brokers_contract::clear_multiplier() {
  if (multiplier_ != &::google::protobuf::internal::kEmptyString) {
    multiplier_->clear();
  }
  clear_has_multiplier();
}
inline const ::std::string& interactive_brokers_contract::multiplier() const {
  return *multiplier_;
}
inline void interactive_brokers_contract::set_multiplier(const ::std::string& value) {
  set_has_multiplier();
  if (multiplier_ == &::google::protobuf::internal::kEmptyString) {
    multiplier_ = new ::std::string;
  }
  multiplier_->assign(value);
}
inline void interactive_brokers_contract::set_multiplier(const char* value) {
  set_has_multiplier();
  if (multiplier_ == &::google::protobuf::internal::kEmptyString) {
    multiplier_ = new ::std::string;
  }
  multiplier_->assign(value);
}
inline void interactive_brokers_contract::set_multiplier(const char* value, size_t size) {
  set_has_multiplier();
  if (multiplier_ == &::google::protobuf::internal::kEmptyString) {
    multiplier_ = new ::std::string;
  }
  multiplier_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* interactive_brokers_contract::mutable_multiplier() {
  set_has_multiplier();
  if (multiplier_ == &::google::protobuf::internal::kEmptyString) {
    multiplier_ = new ::std::string;
  }
  return multiplier_;
}
inline ::std::string* interactive_brokers_contract::release_multiplier() {
  clear_has_multiplier();
  if (multiplier_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = multiplier_;
    multiplier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void interactive_brokers_contract::set_allocated_multiplier(::std::string* multiplier) {
  if (multiplier_ != &::google::protobuf::internal::kEmptyString) {
    delete multiplier_;
  }
  if (multiplier) {
    set_has_multiplier();
    multiplier_ = multiplier;
  } else {
    clear_has_multiplier();
    multiplier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string exchange = 8;
inline bool interactive_brokers_contract::has_exchange() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void interactive_brokers_contract::set_has_exchange() {
  _has_bits_[0] |= 0x00000080u;
}
inline void interactive_brokers_contract::clear_has_exchange() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void interactive_brokers_contract::clear_exchange() {
  if (exchange_ != &::google::protobuf::internal::kEmptyString) {
    exchange_->clear();
  }
  clear_has_exchange();
}
inline const ::std::string& interactive_brokers_contract::exchange() const {
  return *exchange_;
}
inline void interactive_brokers_contract::set_exchange(const ::std::string& value) {
  set_has_exchange();
  if (exchange_ == &::google::protobuf::internal::kEmptyString) {
    exchange_ = new ::std::string;
  }
  exchange_->assign(value);
}
inline void interactive_brokers_contract::set_exchange(const char* value) {
  set_has_exchange();
  if (exchange_ == &::google::protobuf::internal::kEmptyString) {
    exchange_ = new ::std::string;
  }
  exchange_->assign(value);
}
inline void interactive_brokers_contract::set_exchange(const char* value, size_t size) {
  set_has_exchange();
  if (exchange_ == &::google::protobuf::internal::kEmptyString) {
    exchange_ = new ::std::string;
  }
  exchange_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* interactive_brokers_contract::mutable_exchange() {
  set_has_exchange();
  if (exchange_ == &::google::protobuf::internal::kEmptyString) {
    exchange_ = new ::std::string;
  }
  return exchange_;
}
inline ::std::string* interactive_brokers_contract::release_exchange() {
  clear_has_exchange();
  if (exchange_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = exchange_;
    exchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void interactive_brokers_contract::set_allocated_exchange(::std::string* exchange) {
  if (exchange_ != &::google::protobuf::internal::kEmptyString) {
    delete exchange_;
  }
  if (exchange) {
    set_has_exchange();
    exchange_ = exchange;
  } else {
    clear_has_exchange();
    exchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string primaryExchagne = 9;
inline bool interactive_brokers_contract::has_primaryexchagne() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void interactive_brokers_contract::set_has_primaryexchagne() {
  _has_bits_[0] |= 0x00000100u;
}
inline void interactive_brokers_contract::clear_has_primaryexchagne() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void interactive_brokers_contract::clear_primaryexchagne() {
  if (primaryexchagne_ != &::google::protobuf::internal::kEmptyString) {
    primaryexchagne_->clear();
  }
  clear_has_primaryexchagne();
}
inline const ::std::string& interactive_brokers_contract::primaryexchagne() const {
  return *primaryexchagne_;
}
inline void interactive_brokers_contract::set_primaryexchagne(const ::std::string& value) {
  set_has_primaryexchagne();
  if (primaryexchagne_ == &::google::protobuf::internal::kEmptyString) {
    primaryexchagne_ = new ::std::string;
  }
  primaryexchagne_->assign(value);
}
inline void interactive_brokers_contract::set_primaryexchagne(const char* value) {
  set_has_primaryexchagne();
  if (primaryexchagne_ == &::google::protobuf::internal::kEmptyString) {
    primaryexchagne_ = new ::std::string;
  }
  primaryexchagne_->assign(value);
}
inline void interactive_brokers_contract::set_primaryexchagne(const char* value, size_t size) {
  set_has_primaryexchagne();
  if (primaryexchagne_ == &::google::protobuf::internal::kEmptyString) {
    primaryexchagne_ = new ::std::string;
  }
  primaryexchagne_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* interactive_brokers_contract::mutable_primaryexchagne() {
  set_has_primaryexchagne();
  if (primaryexchagne_ == &::google::protobuf::internal::kEmptyString) {
    primaryexchagne_ = new ::std::string;
  }
  return primaryexchagne_;
}
inline ::std::string* interactive_brokers_contract::release_primaryexchagne() {
  clear_has_primaryexchagne();
  if (primaryexchagne_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = primaryexchagne_;
    primaryexchagne_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void interactive_brokers_contract::set_allocated_primaryexchagne(::std::string* primaryexchagne) {
  if (primaryexchagne_ != &::google::protobuf::internal::kEmptyString) {
    delete primaryexchagne_;
  }
  if (primaryexchagne) {
    set_has_primaryexchagne();
    primaryexchagne_ = primaryexchagne;
  } else {
    clear_has_primaryexchagne();
    primaryexchagne_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string currency = 10;
inline bool interactive_brokers_contract::has_currency() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void interactive_brokers_contract::set_has_currency() {
  _has_bits_[0] |= 0x00000200u;
}
inline void interactive_brokers_contract::clear_has_currency() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void interactive_brokers_contract::clear_currency() {
  if (currency_ != &::google::protobuf::internal::kEmptyString) {
    currency_->clear();
  }
  clear_has_currency();
}
inline const ::std::string& interactive_brokers_contract::currency() const {
  return *currency_;
}
inline void interactive_brokers_contract::set_currency(const ::std::string& value) {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    currency_ = new ::std::string;
  }
  currency_->assign(value);
}
inline void interactive_brokers_contract::set_currency(const char* value) {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    currency_ = new ::std::string;
  }
  currency_->assign(value);
}
inline void interactive_brokers_contract::set_currency(const char* value, size_t size) {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    currency_ = new ::std::string;
  }
  currency_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* interactive_brokers_contract::mutable_currency() {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    currency_ = new ::std::string;
  }
  return currency_;
}
inline ::std::string* interactive_brokers_contract::release_currency() {
  clear_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = currency_;
    currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void interactive_brokers_contract::set_allocated_currency(::std::string* currency) {
  if (currency_ != &::google::protobuf::internal::kEmptyString) {
    delete currency_;
  }
  if (currency) {
    set_has_currency();
    currency_ = currency;
  } else {
    clear_has_currency();
    currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string localSymbol = 11;
inline bool interactive_brokers_contract::has_localsymbol() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void interactive_brokers_contract::set_has_localsymbol() {
  _has_bits_[0] |= 0x00000400u;
}
inline void interactive_brokers_contract::clear_has_localsymbol() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void interactive_brokers_contract::clear_localsymbol() {
  if (localsymbol_ != &::google::protobuf::internal::kEmptyString) {
    localsymbol_->clear();
  }
  clear_has_localsymbol();
}
inline const ::std::string& interactive_brokers_contract::localsymbol() const {
  return *localsymbol_;
}
inline void interactive_brokers_contract::set_localsymbol(const ::std::string& value) {
  set_has_localsymbol();
  if (localsymbol_ == &::google::protobuf::internal::kEmptyString) {
    localsymbol_ = new ::std::string;
  }
  localsymbol_->assign(value);
}
inline void interactive_brokers_contract::set_localsymbol(const char* value) {
  set_has_localsymbol();
  if (localsymbol_ == &::google::protobuf::internal::kEmptyString) {
    localsymbol_ = new ::std::string;
  }
  localsymbol_->assign(value);
}
inline void interactive_brokers_contract::set_localsymbol(const char* value, size_t size) {
  set_has_localsymbol();
  if (localsymbol_ == &::google::protobuf::internal::kEmptyString) {
    localsymbol_ = new ::std::string;
  }
  localsymbol_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* interactive_brokers_contract::mutable_localsymbol() {
  set_has_localsymbol();
  if (localsymbol_ == &::google::protobuf::internal::kEmptyString) {
    localsymbol_ = new ::std::string;
  }
  return localsymbol_;
}
inline ::std::string* interactive_brokers_contract::release_localsymbol() {
  clear_has_localsymbol();
  if (localsymbol_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = localsymbol_;
    localsymbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void interactive_brokers_contract::set_allocated_localsymbol(::std::string* localsymbol) {
  if (localsymbol_ != &::google::protobuf::internal::kEmptyString) {
    delete localsymbol_;
  }
  if (localsymbol) {
    set_has_localsymbol();
    localsymbol_ = localsymbol;
  } else {
    clear_has_localsymbol();
    localsymbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool includeExpired = 12;
inline bool interactive_brokers_contract::has_includeexpired() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void interactive_brokers_contract::set_has_includeexpired() {
  _has_bits_[0] |= 0x00000800u;
}
inline void interactive_brokers_contract::clear_has_includeexpired() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void interactive_brokers_contract::clear_includeexpired() {
  includeexpired_ = false;
  clear_has_includeexpired();
}
inline bool interactive_brokers_contract::includeexpired() const {
  return includeexpired_;
}
inline void interactive_brokers_contract::set_includeexpired(bool value) {
  set_has_includeexpired();
  includeexpired_ = value;
}

// optional string secIdType = 13;
inline bool interactive_brokers_contract::has_secidtype() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void interactive_brokers_contract::set_has_secidtype() {
  _has_bits_[0] |= 0x00001000u;
}
inline void interactive_brokers_contract::clear_has_secidtype() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void interactive_brokers_contract::clear_secidtype() {
  if (secidtype_ != &::google::protobuf::internal::kEmptyString) {
    secidtype_->clear();
  }
  clear_has_secidtype();
}
inline const ::std::string& interactive_brokers_contract::secidtype() const {
  return *secidtype_;
}
inline void interactive_brokers_contract::set_secidtype(const ::std::string& value) {
  set_has_secidtype();
  if (secidtype_ == &::google::protobuf::internal::kEmptyString) {
    secidtype_ = new ::std::string;
  }
  secidtype_->assign(value);
}
inline void interactive_brokers_contract::set_secidtype(const char* value) {
  set_has_secidtype();
  if (secidtype_ == &::google::protobuf::internal::kEmptyString) {
    secidtype_ = new ::std::string;
  }
  secidtype_->assign(value);
}
inline void interactive_brokers_contract::set_secidtype(const char* value, size_t size) {
  set_has_secidtype();
  if (secidtype_ == &::google::protobuf::internal::kEmptyString) {
    secidtype_ = new ::std::string;
  }
  secidtype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* interactive_brokers_contract::mutable_secidtype() {
  set_has_secidtype();
  if (secidtype_ == &::google::protobuf::internal::kEmptyString) {
    secidtype_ = new ::std::string;
  }
  return secidtype_;
}
inline ::std::string* interactive_brokers_contract::release_secidtype() {
  clear_has_secidtype();
  if (secidtype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = secidtype_;
    secidtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void interactive_brokers_contract::set_allocated_secidtype(::std::string* secidtype) {
  if (secidtype_ != &::google::protobuf::internal::kEmptyString) {
    delete secidtype_;
  }
  if (secidtype) {
    set_has_secidtype();
    secidtype_ = secidtype;
  } else {
    clear_has_secidtype();
    secidtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string secId = 14;
inline bool interactive_brokers_contract::has_secid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void interactive_brokers_contract::set_has_secid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void interactive_brokers_contract::clear_has_secid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void interactive_brokers_contract::clear_secid() {
  if (secid_ != &::google::protobuf::internal::kEmptyString) {
    secid_->clear();
  }
  clear_has_secid();
}
inline const ::std::string& interactive_brokers_contract::secid() const {
  return *secid_;
}
inline void interactive_brokers_contract::set_secid(const ::std::string& value) {
  set_has_secid();
  if (secid_ == &::google::protobuf::internal::kEmptyString) {
    secid_ = new ::std::string;
  }
  secid_->assign(value);
}
inline void interactive_brokers_contract::set_secid(const char* value) {
  set_has_secid();
  if (secid_ == &::google::protobuf::internal::kEmptyString) {
    secid_ = new ::std::string;
  }
  secid_->assign(value);
}
inline void interactive_brokers_contract::set_secid(const char* value, size_t size) {
  set_has_secid();
  if (secid_ == &::google::protobuf::internal::kEmptyString) {
    secid_ = new ::std::string;
  }
  secid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* interactive_brokers_contract::mutable_secid() {
  set_has_secid();
  if (secid_ == &::google::protobuf::internal::kEmptyString) {
    secid_ = new ::std::string;
  }
  return secid_;
}
inline ::std::string* interactive_brokers_contract::release_secid() {
  clear_has_secid();
  if (secid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = secid_;
    secid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void interactive_brokers_contract::set_allocated_secid(::std::string* secid) {
  if (secid_ != &::google::protobuf::internal::kEmptyString) {
    delete secid_;
  }
  if (secid) {
    set_has_secid();
    secid_ = secid;
  } else {
    clear_has_secid();
    secid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace capkproto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_interactive_5fbrokers_2eproto__INCLUDED
