// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: new_order_single.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "new_order_single.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace capkproto {

namespace {

const ::google::protobuf::Descriptor* new_order_single_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  new_order_single_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_new_5forder_5fsingle_2eproto() {
  protobuf_AddDesc_new_5forder_5fsingle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "new_order_single.proto");
  GOOGLE_CHECK(file != NULL);
  new_order_single_descriptor_ = file->message_type(0);
  static const int new_order_single_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_order_single, cl_order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_order_single, strategy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_order_single, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_order_single, side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_order_single, order_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_order_single, ord_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_order_single, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_order_single, time_in_force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_order_single, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_order_single, venue_id_),
  };
  new_order_single_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      new_order_single_descriptor_,
      new_order_single::default_instance_,
      new_order_single_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_order_single, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(new_order_single, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(new_order_single));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_new_5forder_5fsingle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    new_order_single_descriptor_, &new_order_single::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_new_5forder_5fsingle_2eproto() {
  delete new_order_single::default_instance_;
  delete new_order_single_reflection_;
}

void protobuf_AddDesc_new_5forder_5fsingle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::capkproto::protobuf_AddDesc_capk_5fglobals_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026new_order_single.proto\022\tcapkproto\032\022cap"
    "k_globals.proto\"\333\001\n\020new_order_single\022\023\n\013"
    "cl_order_id\030\001 \001(\014\022\023\n\013strategy_id\030\002 \001(\014\022\016"
    "\n\006symbol\030\003 \001(\t\022\037\n\004side\030\004 \001(\0162\021.capkproto"
    ".side_t\022\021\n\torder_qty\030\005 \001(\001\022\020\n\010ord_type\030\006"
    " \001(\017\022\r\n\005price\030\007 \001(\001\022\025\n\rtime_in_force\030\010 \001"
    "(\017\022\017\n\007account\030\t \001(\t\022\020\n\010venue_id\030\n \001(\017", 277);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "new_order_single.proto", &protobuf_RegisterTypes);
  new_order_single::default_instance_ = new new_order_single();
  new_order_single::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_new_5forder_5fsingle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_new_5forder_5fsingle_2eproto {
  StaticDescriptorInitializer_new_5forder_5fsingle_2eproto() {
    protobuf_AddDesc_new_5forder_5fsingle_2eproto();
  }
} static_descriptor_initializer_new_5forder_5fsingle_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int new_order_single::kClOrderIdFieldNumber;
const int new_order_single::kStrategyIdFieldNumber;
const int new_order_single::kSymbolFieldNumber;
const int new_order_single::kSideFieldNumber;
const int new_order_single::kOrderQtyFieldNumber;
const int new_order_single::kOrdTypeFieldNumber;
const int new_order_single::kPriceFieldNumber;
const int new_order_single::kTimeInForceFieldNumber;
const int new_order_single::kAccountFieldNumber;
const int new_order_single::kVenueIdFieldNumber;
#endif  // !_MSC_VER

new_order_single::new_order_single()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void new_order_single::InitAsDefaultInstance() {
}

new_order_single::new_order_single(const new_order_single& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void new_order_single::SharedCtor() {
  _cached_size_ = 0;
  cl_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strategy_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  side_ = 1;
  order_qty_ = 0;
  ord_type_ = 0;
  price_ = 0;
  time_in_force_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  venue_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

new_order_single::~new_order_single() {
  SharedDtor();
}

void new_order_single::SharedDtor() {
  if (cl_order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete cl_order_id_;
  }
  if (strategy_id_ != &::google::protobuf::internal::kEmptyString) {
    delete strategy_id_;
  }
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void new_order_single::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* new_order_single::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return new_order_single_descriptor_;
}

const new_order_single& new_order_single::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_new_5forder_5fsingle_2eproto();
  return *default_instance_;
}

new_order_single* new_order_single::default_instance_ = NULL;

new_order_single* new_order_single::New() const {
  return new new_order_single;
}

void new_order_single::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cl_order_id()) {
      if (cl_order_id_ != &::google::protobuf::internal::kEmptyString) {
        cl_order_id_->clear();
      }
    }
    if (has_strategy_id()) {
      if (strategy_id_ != &::google::protobuf::internal::kEmptyString) {
        strategy_id_->clear();
      }
    }
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    side_ = 1;
    order_qty_ = 0;
    ord_type_ = 0;
    price_ = 0;
    time_in_force_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    venue_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool new_order_single::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes cl_order_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cl_order_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strategy_id;
        break;
      }

      // optional bytes strategy_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strategy_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strategy_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_symbol;
        break;
      }

      // optional string symbol = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_side;
        break;
      }

      // optional .capkproto.side_t side = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_side:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::capkproto::side_t_IsValid(value)) {
            set_side(static_cast< ::capkproto::side_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_order_qty;
        break;
      }

      // optional double order_qty = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_order_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &order_qty_)));
          set_has_order_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_ord_type;
        break;
      }

      // optional sfixed32 ord_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ord_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &ord_type_)));
          set_has_ord_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_price;
        break;
      }

      // optional double price = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_time_in_force;
        break;
      }

      // optional sfixed32 time_in_force = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_time_in_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &time_in_force_)));
          set_has_time_in_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_account;
        break;
      }

      // optional string account = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_venue_id;
        break;
      }

      // optional sfixed32 venue_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_venue_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &venue_id_)));
          set_has_venue_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void new_order_single::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes cl_order_id = 1;
  if (has_cl_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->cl_order_id(), output);
  }

  // optional bytes strategy_id = 2;
  if (has_strategy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->strategy_id(), output);
  }

  // optional string symbol = 3;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->symbol(), output);
  }

  // optional .capkproto.side_t side = 4;
  if (has_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->side(), output);
  }

  // optional double order_qty = 5;
  if (has_order_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->order_qty(), output);
  }

  // optional sfixed32 ord_type = 6;
  if (has_ord_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(6, this->ord_type(), output);
  }

  // optional double price = 7;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->price(), output);
  }

  // optional sfixed32 time_in_force = 8;
  if (has_time_in_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(8, this->time_in_force(), output);
  }

  // optional string account = 9;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->account(), output);
  }

  // optional sfixed32 venue_id = 10;
  if (has_venue_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(10, this->venue_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* new_order_single::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes cl_order_id = 1;
  if (has_cl_order_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->cl_order_id(), target);
  }

  // optional bytes strategy_id = 2;
  if (has_strategy_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->strategy_id(), target);
  }

  // optional string symbol = 3;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->symbol(), target);
  }

  // optional .capkproto.side_t side = 4;
  if (has_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->side(), target);
  }

  // optional double order_qty = 5;
  if (has_order_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->order_qty(), target);
  }

  // optional sfixed32 ord_type = 6;
  if (has_ord_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(6, this->ord_type(), target);
  }

  // optional double price = 7;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->price(), target);
  }

  // optional sfixed32 time_in_force = 8;
  if (has_time_in_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(8, this->time_in_force(), target);
  }

  // optional string account = 9;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->account(), target);
  }

  // optional sfixed32 venue_id = 10;
  if (has_venue_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(10, this->venue_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int new_order_single::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes cl_order_id = 1;
    if (has_cl_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cl_order_id());
    }

    // optional bytes strategy_id = 2;
    if (has_strategy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strategy_id());
    }

    // optional string symbol = 3;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional .capkproto.side_t side = 4;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }

    // optional double order_qty = 5;
    if (has_order_qty()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 ord_type = 6;
    if (has_ord_type()) {
      total_size += 1 + 4;
    }

    // optional double price = 7;
    if (has_price()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 time_in_force = 8;
    if (has_time_in_force()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string account = 9;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional sfixed32 venue_id = 10;
    if (has_venue_id()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void new_order_single::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const new_order_single* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const new_order_single*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void new_order_single::MergeFrom(const new_order_single& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cl_order_id()) {
      set_cl_order_id(from.cl_order_id());
    }
    if (from.has_strategy_id()) {
      set_strategy_id(from.strategy_id());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_side()) {
      set_side(from.side());
    }
    if (from.has_order_qty()) {
      set_order_qty(from.order_qty());
    }
    if (from.has_ord_type()) {
      set_ord_type(from.ord_type());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_time_in_force()) {
      set_time_in_force(from.time_in_force());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_venue_id()) {
      set_venue_id(from.venue_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void new_order_single::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void new_order_single::CopyFrom(const new_order_single& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool new_order_single::IsInitialized() const {

  return true;
}

void new_order_single::Swap(new_order_single* other) {
  if (other != this) {
    std::swap(cl_order_id_, other->cl_order_id_);
    std::swap(strategy_id_, other->strategy_id_);
    std::swap(symbol_, other->symbol_);
    std::swap(side_, other->side_);
    std::swap(order_qty_, other->order_qty_);
    std::swap(ord_type_, other->ord_type_);
    std::swap(price_, other->price_);
    std::swap(time_in_force_, other->time_in_force_);
    std::swap(account_, other->account_);
    std::swap(venue_id_, other->venue_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata new_order_single::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = new_order_single_descriptor_;
  metadata.reflection = new_order_single_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace capkproto

// @@protoc_insertion_point(global_scope)
