// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: new_order_single.proto

#ifndef PROTOBUF_new_5forder_5fsingle_2eproto__INCLUDED
#define PROTOBUF_new_5forder_5fsingle_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "capk_globals.pb.h"
// @@protoc_insertion_point(includes)

namespace capkproto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_new_5forder_5fsingle_2eproto();
void protobuf_AssignDesc_new_5forder_5fsingle_2eproto();
void protobuf_ShutdownFile_new_5forder_5fsingle_2eproto();

class new_order_single;

// ===================================================================

class new_order_single : public ::google::protobuf::Message {
 public:
  new_order_single();
  virtual ~new_order_single();

  new_order_single(const new_order_single& from);

  inline new_order_single& operator=(const new_order_single& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const new_order_single& default_instance();

  void Swap(new_order_single* other);

  // implements Message ----------------------------------------------

  new_order_single* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const new_order_single& from);
  void MergeFrom(const new_order_single& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes cl_order_id = 1;
  inline bool has_cl_order_id() const;
  inline void clear_cl_order_id();
  static const int kClOrderIdFieldNumber = 1;
  inline const ::std::string& cl_order_id() const;
  inline void set_cl_order_id(const ::std::string& value);
  inline void set_cl_order_id(const char* value);
  inline void set_cl_order_id(const void* value, size_t size);
  inline ::std::string* mutable_cl_order_id();
  inline ::std::string* release_cl_order_id();
  inline void set_allocated_cl_order_id(::std::string* cl_order_id);

  // optional bytes strategy_id = 2;
  inline bool has_strategy_id() const;
  inline void clear_strategy_id();
  static const int kStrategyIdFieldNumber = 2;
  inline const ::std::string& strategy_id() const;
  inline void set_strategy_id(const ::std::string& value);
  inline void set_strategy_id(const char* value);
  inline void set_strategy_id(const void* value, size_t size);
  inline ::std::string* mutable_strategy_id();
  inline ::std::string* release_strategy_id();
  inline void set_allocated_strategy_id(::std::string* strategy_id);

  // optional string symbol = 3;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 3;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  inline void set_allocated_symbol(::std::string* symbol);

  // optional .capkproto.side_t side = 4;
  inline bool has_side() const;
  inline void clear_side();
  static const int kSideFieldNumber = 4;
  inline ::capkproto::side_t side() const;
  inline void set_side(::capkproto::side_t value);

  // optional double order_qty = 5;
  inline bool has_order_qty() const;
  inline void clear_order_qty();
  static const int kOrderQtyFieldNumber = 5;
  inline double order_qty() const;
  inline void set_order_qty(double value);

  // optional sfixed32 ord_type = 6;
  inline bool has_ord_type() const;
  inline void clear_ord_type();
  static const int kOrdTypeFieldNumber = 6;
  inline ::google::protobuf::int32 ord_type() const;
  inline void set_ord_type(::google::protobuf::int32 value);

  // optional double price = 7;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 7;
  inline double price() const;
  inline void set_price(double value);

  // optional sfixed32 time_in_force = 8;
  inline bool has_time_in_force() const;
  inline void clear_time_in_force();
  static const int kTimeInForceFieldNumber = 8;
  inline ::google::protobuf::int32 time_in_force() const;
  inline void set_time_in_force(::google::protobuf::int32 value);

  // optional string account = 9;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 9;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional sfixed32 venue_id = 10;
  inline bool has_venue_id() const;
  inline void clear_venue_id();
  static const int kVenueIdFieldNumber = 10;
  inline ::google::protobuf::int32 venue_id() const;
  inline void set_venue_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:capkproto.new_order_single)
 private:
  inline void set_has_cl_order_id();
  inline void clear_has_cl_order_id();
  inline void set_has_strategy_id();
  inline void clear_has_strategy_id();
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_side();
  inline void clear_has_side();
  inline void set_has_order_qty();
  inline void clear_has_order_qty();
  inline void set_has_ord_type();
  inline void clear_has_ord_type();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_time_in_force();
  inline void clear_has_time_in_force();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_venue_id();
  inline void clear_has_venue_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* cl_order_id_;
  ::std::string* strategy_id_;
  ::std::string* symbol_;
  double order_qty_;
  int side_;
  ::google::protobuf::int32 ord_type_;
  double price_;
  ::std::string* account_;
  ::google::protobuf::int32 time_in_force_;
  ::google::protobuf::int32 venue_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_new_5forder_5fsingle_2eproto();
  friend void protobuf_AssignDesc_new_5forder_5fsingle_2eproto();
  friend void protobuf_ShutdownFile_new_5forder_5fsingle_2eproto();

  void InitAsDefaultInstance();
  static new_order_single* default_instance_;
};
// ===================================================================


// ===================================================================

// new_order_single

// optional bytes cl_order_id = 1;
inline bool new_order_single::has_cl_order_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void new_order_single::set_has_cl_order_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void new_order_single::clear_has_cl_order_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void new_order_single::clear_cl_order_id() {
  if (cl_order_id_ != &::google::protobuf::internal::kEmptyString) {
    cl_order_id_->clear();
  }
  clear_has_cl_order_id();
}
inline const ::std::string& new_order_single::cl_order_id() const {
  return *cl_order_id_;
}
inline void new_order_single::set_cl_order_id(const ::std::string& value) {
  set_has_cl_order_id();
  if (cl_order_id_ == &::google::protobuf::internal::kEmptyString) {
    cl_order_id_ = new ::std::string;
  }
  cl_order_id_->assign(value);
}
inline void new_order_single::set_cl_order_id(const char* value) {
  set_has_cl_order_id();
  if (cl_order_id_ == &::google::protobuf::internal::kEmptyString) {
    cl_order_id_ = new ::std::string;
  }
  cl_order_id_->assign(value);
}
inline void new_order_single::set_cl_order_id(const void* value, size_t size) {
  set_has_cl_order_id();
  if (cl_order_id_ == &::google::protobuf::internal::kEmptyString) {
    cl_order_id_ = new ::std::string;
  }
  cl_order_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* new_order_single::mutable_cl_order_id() {
  set_has_cl_order_id();
  if (cl_order_id_ == &::google::protobuf::internal::kEmptyString) {
    cl_order_id_ = new ::std::string;
  }
  return cl_order_id_;
}
inline ::std::string* new_order_single::release_cl_order_id() {
  clear_has_cl_order_id();
  if (cl_order_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cl_order_id_;
    cl_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void new_order_single::set_allocated_cl_order_id(::std::string* cl_order_id) {
  if (cl_order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete cl_order_id_;
  }
  if (cl_order_id) {
    set_has_cl_order_id();
    cl_order_id_ = cl_order_id;
  } else {
    clear_has_cl_order_id();
    cl_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes strategy_id = 2;
inline bool new_order_single::has_strategy_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void new_order_single::set_has_strategy_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void new_order_single::clear_has_strategy_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void new_order_single::clear_strategy_id() {
  if (strategy_id_ != &::google::protobuf::internal::kEmptyString) {
    strategy_id_->clear();
  }
  clear_has_strategy_id();
}
inline const ::std::string& new_order_single::strategy_id() const {
  return *strategy_id_;
}
inline void new_order_single::set_strategy_id(const ::std::string& value) {
  set_has_strategy_id();
  if (strategy_id_ == &::google::protobuf::internal::kEmptyString) {
    strategy_id_ = new ::std::string;
  }
  strategy_id_->assign(value);
}
inline void new_order_single::set_strategy_id(const char* value) {
  set_has_strategy_id();
  if (strategy_id_ == &::google::protobuf::internal::kEmptyString) {
    strategy_id_ = new ::std::string;
  }
  strategy_id_->assign(value);
}
inline void new_order_single::set_strategy_id(const void* value, size_t size) {
  set_has_strategy_id();
  if (strategy_id_ == &::google::protobuf::internal::kEmptyString) {
    strategy_id_ = new ::std::string;
  }
  strategy_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* new_order_single::mutable_strategy_id() {
  set_has_strategy_id();
  if (strategy_id_ == &::google::protobuf::internal::kEmptyString) {
    strategy_id_ = new ::std::string;
  }
  return strategy_id_;
}
inline ::std::string* new_order_single::release_strategy_id() {
  clear_has_strategy_id();
  if (strategy_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strategy_id_;
    strategy_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void new_order_single::set_allocated_strategy_id(::std::string* strategy_id) {
  if (strategy_id_ != &::google::protobuf::internal::kEmptyString) {
    delete strategy_id_;
  }
  if (strategy_id) {
    set_has_strategy_id();
    strategy_id_ = strategy_id;
  } else {
    clear_has_strategy_id();
    strategy_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string symbol = 3;
inline bool new_order_single::has_symbol() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void new_order_single::set_has_symbol() {
  _has_bits_[0] |= 0x00000004u;
}
inline void new_order_single::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void new_order_single::clear_symbol() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    symbol_->clear();
  }
  clear_has_symbol();
}
inline const ::std::string& new_order_single::symbol() const {
  return *symbol_;
}
inline void new_order_single::set_symbol(const ::std::string& value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void new_order_single::set_symbol(const char* value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void new_order_single::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* new_order_single::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  return symbol_;
}
inline ::std::string* new_order_single::release_symbol() {
  clear_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = symbol_;
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void new_order_single::set_allocated_symbol(::std::string* symbol) {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (symbol) {
    set_has_symbol();
    symbol_ = symbol;
  } else {
    clear_has_symbol();
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .capkproto.side_t side = 4;
inline bool new_order_single::has_side() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void new_order_single::set_has_side() {
  _has_bits_[0] |= 0x00000008u;
}
inline void new_order_single::clear_has_side() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void new_order_single::clear_side() {
  side_ = 1;
  clear_has_side();
}
inline ::capkproto::side_t new_order_single::side() const {
  return static_cast< ::capkproto::side_t >(side_);
}
inline void new_order_single::set_side(::capkproto::side_t value) {
  assert(::capkproto::side_t_IsValid(value));
  set_has_side();
  side_ = value;
}

// optional double order_qty = 5;
inline bool new_order_single::has_order_qty() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void new_order_single::set_has_order_qty() {
  _has_bits_[0] |= 0x00000010u;
}
inline void new_order_single::clear_has_order_qty() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void new_order_single::clear_order_qty() {
  order_qty_ = 0;
  clear_has_order_qty();
}
inline double new_order_single::order_qty() const {
  return order_qty_;
}
inline void new_order_single::set_order_qty(double value) {
  set_has_order_qty();
  order_qty_ = value;
}

// optional sfixed32 ord_type = 6;
inline bool new_order_single::has_ord_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void new_order_single::set_has_ord_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void new_order_single::clear_has_ord_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void new_order_single::clear_ord_type() {
  ord_type_ = 0;
  clear_has_ord_type();
}
inline ::google::protobuf::int32 new_order_single::ord_type() const {
  return ord_type_;
}
inline void new_order_single::set_ord_type(::google::protobuf::int32 value) {
  set_has_ord_type();
  ord_type_ = value;
}

// optional double price = 7;
inline bool new_order_single::has_price() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void new_order_single::set_has_price() {
  _has_bits_[0] |= 0x00000040u;
}
inline void new_order_single::clear_has_price() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void new_order_single::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline double new_order_single::price() const {
  return price_;
}
inline void new_order_single::set_price(double value) {
  set_has_price();
  price_ = value;
}

// optional sfixed32 time_in_force = 8;
inline bool new_order_single::has_time_in_force() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void new_order_single::set_has_time_in_force() {
  _has_bits_[0] |= 0x00000080u;
}
inline void new_order_single::clear_has_time_in_force() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void new_order_single::clear_time_in_force() {
  time_in_force_ = 0;
  clear_has_time_in_force();
}
inline ::google::protobuf::int32 new_order_single::time_in_force() const {
  return time_in_force_;
}
inline void new_order_single::set_time_in_force(::google::protobuf::int32 value) {
  set_has_time_in_force();
  time_in_force_ = value;
}

// optional string account = 9;
inline bool new_order_single::has_account() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void new_order_single::set_has_account() {
  _has_bits_[0] |= 0x00000100u;
}
inline void new_order_single::clear_has_account() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void new_order_single::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& new_order_single::account() const {
  return *account_;
}
inline void new_order_single::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void new_order_single::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void new_order_single::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* new_order_single::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* new_order_single::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void new_order_single::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional sfixed32 venue_id = 10;
inline bool new_order_single::has_venue_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void new_order_single::set_has_venue_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void new_order_single::clear_has_venue_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void new_order_single::clear_venue_id() {
  venue_id_ = 0;
  clear_has_venue_id();
}
inline ::google::protobuf::int32 new_order_single::venue_id() const {
  return venue_id_;
}
inline void new_order_single::set_venue_id(::google::protobuf::int32 value) {
  set_has_venue_id();
  venue_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace capkproto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_new_5forder_5fsingle_2eproto__INCLUDED
