// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: order_cancel_reject.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "order_cancel_reject.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace capkproto {

namespace {

const ::google::protobuf::Descriptor* order_cancel_reject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  order_cancel_reject_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_order_5fcancel_5freject_2eproto() {
  protobuf_AddDesc_order_5fcancel_5freject_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "order_cancel_reject.proto");
  GOOGLE_CHECK(file != NULL);
  order_cancel_reject_descriptor_ = file->message_type(0);
  static const int order_cancel_reject_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_cancel_reject, orig_cl_order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_cancel_reject, cl_order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_cancel_reject, strategy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_cancel_reject, order_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_cancel_reject, cancel_reject_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_cancel_reject, cancel_reject_response_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_cancel_reject, cancel_reject_text_),
  };
  order_cancel_reject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      order_cancel_reject_descriptor_,
      order_cancel_reject::default_instance_,
      order_cancel_reject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_cancel_reject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_cancel_reject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(order_cancel_reject));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_order_5fcancel_5freject_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    order_cancel_reject_descriptor_, &order_cancel_reject::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_order_5fcancel_5freject_2eproto() {
  delete order_cancel_reject::default_instance_;
  delete order_cancel_reject_reflection_;
}

void protobuf_AddDesc_order_5fcancel_5freject_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::capkproto::protobuf_AddDesc_capk_5fglobals_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031order_cancel_reject.proto\022\tcapkproto\032\022"
    "capk_globals.proto\"\314\001\n\023order_cancel_reje"
    "ct\022\030\n\020orig_cl_order_id\030\001 \001(\014\022\023\n\013cl_order"
    "_id\030\002 \001(\014\022\023\n\013strategy_id\030\003 \001(\014\022\024\n\014order_"
    "status\030\004 \001(\017\022\034\n\024cancel_reject_reason\030\005 \001"
    "(\017\022!\n\031cancel_reject_response_to\030\006 \001(\017\022\032\n"
    "\022cancel_reject_text\030\007 \001(\t", 265);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "order_cancel_reject.proto", &protobuf_RegisterTypes);
  order_cancel_reject::default_instance_ = new order_cancel_reject();
  order_cancel_reject::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_order_5fcancel_5freject_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_order_5fcancel_5freject_2eproto {
  StaticDescriptorInitializer_order_5fcancel_5freject_2eproto() {
    protobuf_AddDesc_order_5fcancel_5freject_2eproto();
  }
} static_descriptor_initializer_order_5fcancel_5freject_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int order_cancel_reject::kOrigClOrderIdFieldNumber;
const int order_cancel_reject::kClOrderIdFieldNumber;
const int order_cancel_reject::kStrategyIdFieldNumber;
const int order_cancel_reject::kOrderStatusFieldNumber;
const int order_cancel_reject::kCancelRejectReasonFieldNumber;
const int order_cancel_reject::kCancelRejectResponseToFieldNumber;
const int order_cancel_reject::kCancelRejectTextFieldNumber;
#endif  // !_MSC_VER

order_cancel_reject::order_cancel_reject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void order_cancel_reject::InitAsDefaultInstance() {
}

order_cancel_reject::order_cancel_reject(const order_cancel_reject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void order_cancel_reject::SharedCtor() {
  _cached_size_ = 0;
  orig_cl_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cl_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strategy_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  order_status_ = 0;
  cancel_reject_reason_ = 0;
  cancel_reject_response_to_ = 0;
  cancel_reject_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

order_cancel_reject::~order_cancel_reject() {
  SharedDtor();
}

void order_cancel_reject::SharedDtor() {
  if (orig_cl_order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete orig_cl_order_id_;
  }
  if (cl_order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete cl_order_id_;
  }
  if (strategy_id_ != &::google::protobuf::internal::kEmptyString) {
    delete strategy_id_;
  }
  if (cancel_reject_text_ != &::google::protobuf::internal::kEmptyString) {
    delete cancel_reject_text_;
  }
  if (this != default_instance_) {
  }
}

void order_cancel_reject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* order_cancel_reject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return order_cancel_reject_descriptor_;
}

const order_cancel_reject& order_cancel_reject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_order_5fcancel_5freject_2eproto();
  return *default_instance_;
}

order_cancel_reject* order_cancel_reject::default_instance_ = NULL;

order_cancel_reject* order_cancel_reject::New() const {
  return new order_cancel_reject;
}

void order_cancel_reject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_orig_cl_order_id()) {
      if (orig_cl_order_id_ != &::google::protobuf::internal::kEmptyString) {
        orig_cl_order_id_->clear();
      }
    }
    if (has_cl_order_id()) {
      if (cl_order_id_ != &::google::protobuf::internal::kEmptyString) {
        cl_order_id_->clear();
      }
    }
    if (has_strategy_id()) {
      if (strategy_id_ != &::google::protobuf::internal::kEmptyString) {
        strategy_id_->clear();
      }
    }
    order_status_ = 0;
    cancel_reject_reason_ = 0;
    cancel_reject_response_to_ = 0;
    if (has_cancel_reject_text()) {
      if (cancel_reject_text_ != &::google::protobuf::internal::kEmptyString) {
        cancel_reject_text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool order_cancel_reject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes orig_cl_order_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_orig_cl_order_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cl_order_id;
        break;
      }

      // optional bytes cl_order_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cl_order_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cl_order_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strategy_id;
        break;
      }

      // optional bytes strategy_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strategy_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strategy_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_order_status;
        break;
      }

      // optional sfixed32 order_status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_order_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &order_status_)));
          set_has_order_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_cancel_reject_reason;
        break;
      }

      // optional sfixed32 cancel_reject_reason = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cancel_reject_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &cancel_reject_reason_)));
          set_has_cancel_reject_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_cancel_reject_response_to;
        break;
      }

      // optional sfixed32 cancel_reject_response_to = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cancel_reject_response_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &cancel_reject_response_to_)));
          set_has_cancel_reject_response_to();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_cancel_reject_text;
        break;
      }

      // optional string cancel_reject_text = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cancel_reject_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cancel_reject_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cancel_reject_text().data(), this->cancel_reject_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void order_cancel_reject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes orig_cl_order_id = 1;
  if (has_orig_cl_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->orig_cl_order_id(), output);
  }

  // optional bytes cl_order_id = 2;
  if (has_cl_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->cl_order_id(), output);
  }

  // optional bytes strategy_id = 3;
  if (has_strategy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->strategy_id(), output);
  }

  // optional sfixed32 order_status = 4;
  if (has_order_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->order_status(), output);
  }

  // optional sfixed32 cancel_reject_reason = 5;
  if (has_cancel_reject_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(5, this->cancel_reject_reason(), output);
  }

  // optional sfixed32 cancel_reject_response_to = 6;
  if (has_cancel_reject_response_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(6, this->cancel_reject_response_to(), output);
  }

  // optional string cancel_reject_text = 7;
  if (has_cancel_reject_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cancel_reject_text().data(), this->cancel_reject_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->cancel_reject_text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* order_cancel_reject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes orig_cl_order_id = 1;
  if (has_orig_cl_order_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->orig_cl_order_id(), target);
  }

  // optional bytes cl_order_id = 2;
  if (has_cl_order_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cl_order_id(), target);
  }

  // optional bytes strategy_id = 3;
  if (has_strategy_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->strategy_id(), target);
  }

  // optional sfixed32 order_status = 4;
  if (has_order_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->order_status(), target);
  }

  // optional sfixed32 cancel_reject_reason = 5;
  if (has_cancel_reject_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(5, this->cancel_reject_reason(), target);
  }

  // optional sfixed32 cancel_reject_response_to = 6;
  if (has_cancel_reject_response_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(6, this->cancel_reject_response_to(), target);
  }

  // optional string cancel_reject_text = 7;
  if (has_cancel_reject_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cancel_reject_text().data(), this->cancel_reject_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->cancel_reject_text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int order_cancel_reject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes orig_cl_order_id = 1;
    if (has_orig_cl_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->orig_cl_order_id());
    }

    // optional bytes cl_order_id = 2;
    if (has_cl_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cl_order_id());
    }

    // optional bytes strategy_id = 3;
    if (has_strategy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strategy_id());
    }

    // optional sfixed32 order_status = 4;
    if (has_order_status()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 cancel_reject_reason = 5;
    if (has_cancel_reject_reason()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 cancel_reject_response_to = 6;
    if (has_cancel_reject_response_to()) {
      total_size += 1 + 4;
    }

    // optional string cancel_reject_text = 7;
    if (has_cancel_reject_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cancel_reject_text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void order_cancel_reject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const order_cancel_reject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const order_cancel_reject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void order_cancel_reject::MergeFrom(const order_cancel_reject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orig_cl_order_id()) {
      set_orig_cl_order_id(from.orig_cl_order_id());
    }
    if (from.has_cl_order_id()) {
      set_cl_order_id(from.cl_order_id());
    }
    if (from.has_strategy_id()) {
      set_strategy_id(from.strategy_id());
    }
    if (from.has_order_status()) {
      set_order_status(from.order_status());
    }
    if (from.has_cancel_reject_reason()) {
      set_cancel_reject_reason(from.cancel_reject_reason());
    }
    if (from.has_cancel_reject_response_to()) {
      set_cancel_reject_response_to(from.cancel_reject_response_to());
    }
    if (from.has_cancel_reject_text()) {
      set_cancel_reject_text(from.cancel_reject_text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void order_cancel_reject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void order_cancel_reject::CopyFrom(const order_cancel_reject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool order_cancel_reject::IsInitialized() const {

  return true;
}

void order_cancel_reject::Swap(order_cancel_reject* other) {
  if (other != this) {
    std::swap(orig_cl_order_id_, other->orig_cl_order_id_);
    std::swap(cl_order_id_, other->cl_order_id_);
    std::swap(strategy_id_, other->strategy_id_);
    std::swap(order_status_, other->order_status_);
    std::swap(cancel_reject_reason_, other->cancel_reject_reason_);
    std::swap(cancel_reject_response_to_, other->cancel_reject_response_to_);
    std::swap(cancel_reject_text_, other->cancel_reject_text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata order_cancel_reject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = order_cancel_reject_descriptor_;
  metadata.reflection = order_cancel_reject_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace capkproto

// @@protoc_insertion_point(global_scope)
