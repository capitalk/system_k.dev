// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: order_cancel_reject.proto

#ifndef PROTOBUF_order_5fcancel_5freject_2eproto__INCLUDED
#define PROTOBUF_order_5fcancel_5freject_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "capk_globals.pb.h"
// @@protoc_insertion_point(includes)

namespace capkproto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_order_5fcancel_5freject_2eproto();
void protobuf_AssignDesc_order_5fcancel_5freject_2eproto();
void protobuf_ShutdownFile_order_5fcancel_5freject_2eproto();

class order_cancel_reject;

// ===================================================================

class order_cancel_reject : public ::google::protobuf::Message {
 public:
  order_cancel_reject();
  virtual ~order_cancel_reject();

  order_cancel_reject(const order_cancel_reject& from);

  inline order_cancel_reject& operator=(const order_cancel_reject& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const order_cancel_reject& default_instance();

  void Swap(order_cancel_reject* other);

  // implements Message ----------------------------------------------

  order_cancel_reject* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const order_cancel_reject& from);
  void MergeFrom(const order_cancel_reject& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes orig_cl_order_id = 1;
  inline bool has_orig_cl_order_id() const;
  inline void clear_orig_cl_order_id();
  static const int kOrigClOrderIdFieldNumber = 1;
  inline const ::std::string& orig_cl_order_id() const;
  inline void set_orig_cl_order_id(const ::std::string& value);
  inline void set_orig_cl_order_id(const char* value);
  inline void set_orig_cl_order_id(const void* value, size_t size);
  inline ::std::string* mutable_orig_cl_order_id();
  inline ::std::string* release_orig_cl_order_id();
  inline void set_allocated_orig_cl_order_id(::std::string* orig_cl_order_id);

  // optional bytes cl_order_id = 2;
  inline bool has_cl_order_id() const;
  inline void clear_cl_order_id();
  static const int kClOrderIdFieldNumber = 2;
  inline const ::std::string& cl_order_id() const;
  inline void set_cl_order_id(const ::std::string& value);
  inline void set_cl_order_id(const char* value);
  inline void set_cl_order_id(const void* value, size_t size);
  inline ::std::string* mutable_cl_order_id();
  inline ::std::string* release_cl_order_id();
  inline void set_allocated_cl_order_id(::std::string* cl_order_id);

  // optional bytes strategy_id = 3;
  inline bool has_strategy_id() const;
  inline void clear_strategy_id();
  static const int kStrategyIdFieldNumber = 3;
  inline const ::std::string& strategy_id() const;
  inline void set_strategy_id(const ::std::string& value);
  inline void set_strategy_id(const char* value);
  inline void set_strategy_id(const void* value, size_t size);
  inline ::std::string* mutable_strategy_id();
  inline ::std::string* release_strategy_id();
  inline void set_allocated_strategy_id(::std::string* strategy_id);

  // optional sfixed32 order_status = 4;
  inline bool has_order_status() const;
  inline void clear_order_status();
  static const int kOrderStatusFieldNumber = 4;
  inline ::google::protobuf::int32 order_status() const;
  inline void set_order_status(::google::protobuf::int32 value);

  // optional sfixed32 cancel_reject_reason = 5;
  inline bool has_cancel_reject_reason() const;
  inline void clear_cancel_reject_reason();
  static const int kCancelRejectReasonFieldNumber = 5;
  inline ::google::protobuf::int32 cancel_reject_reason() const;
  inline void set_cancel_reject_reason(::google::protobuf::int32 value);

  // optional sfixed32 cancel_reject_response_to = 6;
  inline bool has_cancel_reject_response_to() const;
  inline void clear_cancel_reject_response_to();
  static const int kCancelRejectResponseToFieldNumber = 6;
  inline ::google::protobuf::int32 cancel_reject_response_to() const;
  inline void set_cancel_reject_response_to(::google::protobuf::int32 value);

  // optional string cancel_reject_text = 7;
  inline bool has_cancel_reject_text() const;
  inline void clear_cancel_reject_text();
  static const int kCancelRejectTextFieldNumber = 7;
  inline const ::std::string& cancel_reject_text() const;
  inline void set_cancel_reject_text(const ::std::string& value);
  inline void set_cancel_reject_text(const char* value);
  inline void set_cancel_reject_text(const char* value, size_t size);
  inline ::std::string* mutable_cancel_reject_text();
  inline ::std::string* release_cancel_reject_text();
  inline void set_allocated_cancel_reject_text(::std::string* cancel_reject_text);

  // @@protoc_insertion_point(class_scope:capkproto.order_cancel_reject)
 private:
  inline void set_has_orig_cl_order_id();
  inline void clear_has_orig_cl_order_id();
  inline void set_has_cl_order_id();
  inline void clear_has_cl_order_id();
  inline void set_has_strategy_id();
  inline void clear_has_strategy_id();
  inline void set_has_order_status();
  inline void clear_has_order_status();
  inline void set_has_cancel_reject_reason();
  inline void clear_has_cancel_reject_reason();
  inline void set_has_cancel_reject_response_to();
  inline void clear_has_cancel_reject_response_to();
  inline void set_has_cancel_reject_text();
  inline void clear_has_cancel_reject_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* orig_cl_order_id_;
  ::std::string* cl_order_id_;
  ::std::string* strategy_id_;
  ::google::protobuf::int32 order_status_;
  ::google::protobuf::int32 cancel_reject_reason_;
  ::std::string* cancel_reject_text_;
  ::google::protobuf::int32 cancel_reject_response_to_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_order_5fcancel_5freject_2eproto();
  friend void protobuf_AssignDesc_order_5fcancel_5freject_2eproto();
  friend void protobuf_ShutdownFile_order_5fcancel_5freject_2eproto();

  void InitAsDefaultInstance();
  static order_cancel_reject* default_instance_;
};
// ===================================================================


// ===================================================================

// order_cancel_reject

// optional bytes orig_cl_order_id = 1;
inline bool order_cancel_reject::has_orig_cl_order_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void order_cancel_reject::set_has_orig_cl_order_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void order_cancel_reject::clear_has_orig_cl_order_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void order_cancel_reject::clear_orig_cl_order_id() {
  if (orig_cl_order_id_ != &::google::protobuf::internal::kEmptyString) {
    orig_cl_order_id_->clear();
  }
  clear_has_orig_cl_order_id();
}
inline const ::std::string& order_cancel_reject::orig_cl_order_id() const {
  return *orig_cl_order_id_;
}
inline void order_cancel_reject::set_orig_cl_order_id(const ::std::string& value) {
  set_has_orig_cl_order_id();
  if (orig_cl_order_id_ == &::google::protobuf::internal::kEmptyString) {
    orig_cl_order_id_ = new ::std::string;
  }
  orig_cl_order_id_->assign(value);
}
inline void order_cancel_reject::set_orig_cl_order_id(const char* value) {
  set_has_orig_cl_order_id();
  if (orig_cl_order_id_ == &::google::protobuf::internal::kEmptyString) {
    orig_cl_order_id_ = new ::std::string;
  }
  orig_cl_order_id_->assign(value);
}
inline void order_cancel_reject::set_orig_cl_order_id(const void* value, size_t size) {
  set_has_orig_cl_order_id();
  if (orig_cl_order_id_ == &::google::protobuf::internal::kEmptyString) {
    orig_cl_order_id_ = new ::std::string;
  }
  orig_cl_order_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* order_cancel_reject::mutable_orig_cl_order_id() {
  set_has_orig_cl_order_id();
  if (orig_cl_order_id_ == &::google::protobuf::internal::kEmptyString) {
    orig_cl_order_id_ = new ::std::string;
  }
  return orig_cl_order_id_;
}
inline ::std::string* order_cancel_reject::release_orig_cl_order_id() {
  clear_has_orig_cl_order_id();
  if (orig_cl_order_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = orig_cl_order_id_;
    orig_cl_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void order_cancel_reject::set_allocated_orig_cl_order_id(::std::string* orig_cl_order_id) {
  if (orig_cl_order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete orig_cl_order_id_;
  }
  if (orig_cl_order_id) {
    set_has_orig_cl_order_id();
    orig_cl_order_id_ = orig_cl_order_id;
  } else {
    clear_has_orig_cl_order_id();
    orig_cl_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes cl_order_id = 2;
inline bool order_cancel_reject::has_cl_order_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void order_cancel_reject::set_has_cl_order_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void order_cancel_reject::clear_has_cl_order_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void order_cancel_reject::clear_cl_order_id() {
  if (cl_order_id_ != &::google::protobuf::internal::kEmptyString) {
    cl_order_id_->clear();
  }
  clear_has_cl_order_id();
}
inline const ::std::string& order_cancel_reject::cl_order_id() const {
  return *cl_order_id_;
}
inline void order_cancel_reject::set_cl_order_id(const ::std::string& value) {
  set_has_cl_order_id();
  if (cl_order_id_ == &::google::protobuf::internal::kEmptyString) {
    cl_order_id_ = new ::std::string;
  }
  cl_order_id_->assign(value);
}
inline void order_cancel_reject::set_cl_order_id(const char* value) {
  set_has_cl_order_id();
  if (cl_order_id_ == &::google::protobuf::internal::kEmptyString) {
    cl_order_id_ = new ::std::string;
  }
  cl_order_id_->assign(value);
}
inline void order_cancel_reject::set_cl_order_id(const void* value, size_t size) {
  set_has_cl_order_id();
  if (cl_order_id_ == &::google::protobuf::internal::kEmptyString) {
    cl_order_id_ = new ::std::string;
  }
  cl_order_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* order_cancel_reject::mutable_cl_order_id() {
  set_has_cl_order_id();
  if (cl_order_id_ == &::google::protobuf::internal::kEmptyString) {
    cl_order_id_ = new ::std::string;
  }
  return cl_order_id_;
}
inline ::std::string* order_cancel_reject::release_cl_order_id() {
  clear_has_cl_order_id();
  if (cl_order_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cl_order_id_;
    cl_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void order_cancel_reject::set_allocated_cl_order_id(::std::string* cl_order_id) {
  if (cl_order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete cl_order_id_;
  }
  if (cl_order_id) {
    set_has_cl_order_id();
    cl_order_id_ = cl_order_id;
  } else {
    clear_has_cl_order_id();
    cl_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes strategy_id = 3;
inline bool order_cancel_reject::has_strategy_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void order_cancel_reject::set_has_strategy_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void order_cancel_reject::clear_has_strategy_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void order_cancel_reject::clear_strategy_id() {
  if (strategy_id_ != &::google::protobuf::internal::kEmptyString) {
    strategy_id_->clear();
  }
  clear_has_strategy_id();
}
inline const ::std::string& order_cancel_reject::strategy_id() const {
  return *strategy_id_;
}
inline void order_cancel_reject::set_strategy_id(const ::std::string& value) {
  set_has_strategy_id();
  if (strategy_id_ == &::google::protobuf::internal::kEmptyString) {
    strategy_id_ = new ::std::string;
  }
  strategy_id_->assign(value);
}
inline void order_cancel_reject::set_strategy_id(const char* value) {
  set_has_strategy_id();
  if (strategy_id_ == &::google::protobuf::internal::kEmptyString) {
    strategy_id_ = new ::std::string;
  }
  strategy_id_->assign(value);
}
inline void order_cancel_reject::set_strategy_id(const void* value, size_t size) {
  set_has_strategy_id();
  if (strategy_id_ == &::google::protobuf::internal::kEmptyString) {
    strategy_id_ = new ::std::string;
  }
  strategy_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* order_cancel_reject::mutable_strategy_id() {
  set_has_strategy_id();
  if (strategy_id_ == &::google::protobuf::internal::kEmptyString) {
    strategy_id_ = new ::std::string;
  }
  return strategy_id_;
}
inline ::std::string* order_cancel_reject::release_strategy_id() {
  clear_has_strategy_id();
  if (strategy_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strategy_id_;
    strategy_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void order_cancel_reject::set_allocated_strategy_id(::std::string* strategy_id) {
  if (strategy_id_ != &::google::protobuf::internal::kEmptyString) {
    delete strategy_id_;
  }
  if (strategy_id) {
    set_has_strategy_id();
    strategy_id_ = strategy_id;
  } else {
    clear_has_strategy_id();
    strategy_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional sfixed32 order_status = 4;
inline bool order_cancel_reject::has_order_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void order_cancel_reject::set_has_order_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void order_cancel_reject::clear_has_order_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void order_cancel_reject::clear_order_status() {
  order_status_ = 0;
  clear_has_order_status();
}
inline ::google::protobuf::int32 order_cancel_reject::order_status() const {
  return order_status_;
}
inline void order_cancel_reject::set_order_status(::google::protobuf::int32 value) {
  set_has_order_status();
  order_status_ = value;
}

// optional sfixed32 cancel_reject_reason = 5;
inline bool order_cancel_reject::has_cancel_reject_reason() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void order_cancel_reject::set_has_cancel_reject_reason() {
  _has_bits_[0] |= 0x00000010u;
}
inline void order_cancel_reject::clear_has_cancel_reject_reason() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void order_cancel_reject::clear_cancel_reject_reason() {
  cancel_reject_reason_ = 0;
  clear_has_cancel_reject_reason();
}
inline ::google::protobuf::int32 order_cancel_reject::cancel_reject_reason() const {
  return cancel_reject_reason_;
}
inline void order_cancel_reject::set_cancel_reject_reason(::google::protobuf::int32 value) {
  set_has_cancel_reject_reason();
  cancel_reject_reason_ = value;
}

// optional sfixed32 cancel_reject_response_to = 6;
inline bool order_cancel_reject::has_cancel_reject_response_to() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void order_cancel_reject::set_has_cancel_reject_response_to() {
  _has_bits_[0] |= 0x00000020u;
}
inline void order_cancel_reject::clear_has_cancel_reject_response_to() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void order_cancel_reject::clear_cancel_reject_response_to() {
  cancel_reject_response_to_ = 0;
  clear_has_cancel_reject_response_to();
}
inline ::google::protobuf::int32 order_cancel_reject::cancel_reject_response_to() const {
  return cancel_reject_response_to_;
}
inline void order_cancel_reject::set_cancel_reject_response_to(::google::protobuf::int32 value) {
  set_has_cancel_reject_response_to();
  cancel_reject_response_to_ = value;
}

// optional string cancel_reject_text = 7;
inline bool order_cancel_reject::has_cancel_reject_text() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void order_cancel_reject::set_has_cancel_reject_text() {
  _has_bits_[0] |= 0x00000040u;
}
inline void order_cancel_reject::clear_has_cancel_reject_text() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void order_cancel_reject::clear_cancel_reject_text() {
  if (cancel_reject_text_ != &::google::protobuf::internal::kEmptyString) {
    cancel_reject_text_->clear();
  }
  clear_has_cancel_reject_text();
}
inline const ::std::string& order_cancel_reject::cancel_reject_text() const {
  return *cancel_reject_text_;
}
inline void order_cancel_reject::set_cancel_reject_text(const ::std::string& value) {
  set_has_cancel_reject_text();
  if (cancel_reject_text_ == &::google::protobuf::internal::kEmptyString) {
    cancel_reject_text_ = new ::std::string;
  }
  cancel_reject_text_->assign(value);
}
inline void order_cancel_reject::set_cancel_reject_text(const char* value) {
  set_has_cancel_reject_text();
  if (cancel_reject_text_ == &::google::protobuf::internal::kEmptyString) {
    cancel_reject_text_ = new ::std::string;
  }
  cancel_reject_text_->assign(value);
}
inline void order_cancel_reject::set_cancel_reject_text(const char* value, size_t size) {
  set_has_cancel_reject_text();
  if (cancel_reject_text_ == &::google::protobuf::internal::kEmptyString) {
    cancel_reject_text_ = new ::std::string;
  }
  cancel_reject_text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* order_cancel_reject::mutable_cancel_reject_text() {
  set_has_cancel_reject_text();
  if (cancel_reject_text_ == &::google::protobuf::internal::kEmptyString) {
    cancel_reject_text_ = new ::std::string;
  }
  return cancel_reject_text_;
}
inline ::std::string* order_cancel_reject::release_cancel_reject_text() {
  clear_has_cancel_reject_text();
  if (cancel_reject_text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cancel_reject_text_;
    cancel_reject_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void order_cancel_reject::set_allocated_cancel_reject_text(::std::string* cancel_reject_text) {
  if (cancel_reject_text_ != &::google::protobuf::internal::kEmptyString) {
    delete cancel_reject_text_;
  }
  if (cancel_reject_text) {
    set_has_cancel_reject_text();
    cancel_reject_text_ = cancel_reject_text;
  } else {
    clear_has_cancel_reject_text();
    cancel_reject_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace capkproto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_order_5fcancel_5freject_2eproto__INCLUDED
