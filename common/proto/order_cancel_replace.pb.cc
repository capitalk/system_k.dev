// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: order_cancel_replace.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "order_cancel_replace.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace capkproto {

namespace {

const ::google::protobuf::Descriptor* order_cancel_replace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  order_cancel_replace_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_order_5fcancel_5freplace_2eproto() {
  protobuf_AddDesc_order_5fcancel_5freplace_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "order_cancel_replace.proto");
  GOOGLE_CHECK(file != NULL);
  order_cancel_replace_descriptor_ = file->message_type(0);
  static const int order_cancel_replace_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_cancel_replace, orig_cl_order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_cancel_replace, cl_order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_cancel_replace, strategy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_cancel_replace, handl_inst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_cancel_replace, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_cancel_replace, side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_cancel_replace, order_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_cancel_replace, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_cancel_replace, transact_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_cancel_replace, ord_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_cancel_replace, time_in_force_),
  };
  order_cancel_replace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      order_cancel_replace_descriptor_,
      order_cancel_replace::default_instance_,
      order_cancel_replace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_cancel_replace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_cancel_replace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(order_cancel_replace));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_order_5fcancel_5freplace_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    order_cancel_replace_descriptor_, &order_cancel_replace::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_order_5fcancel_5freplace_2eproto() {
  delete order_cancel_replace::default_instance_;
  delete order_cancel_replace_reflection_;
}

void protobuf_AddDesc_order_5fcancel_5freplace_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::capkproto::protobuf_AddDesc_capk_5fglobals_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032order_cancel_replace.proto\022\tcapkproto\032"
    "\022capk_globals.proto\"\201\002\n\024order_cancel_rep"
    "lace\022\030\n\020orig_cl_order_id\030\001 \001(\014\022\023\n\013cl_ord"
    "er_id\030\002 \001(\014\022\023\n\013strategy_id\030\003 \001(\014\022\022\n\nhand"
    "l_inst\030\004 \001(\017\022\016\n\006symbol\030\005 \001(\t\022\037\n\004side\030\006 \001"
    "(\0162\021.capkproto.side_t\022\021\n\torder_qty\030\007 \001(\001"
    "\022\r\n\005price\030\010 \001(\001\022\025\n\rtransact_time\030\t \001(\t\022\020"
    "\n\010ord_type\030\n \001(\017\022\025\n\rtime_in_force\030\013 \001(\017", 319);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "order_cancel_replace.proto", &protobuf_RegisterTypes);
  order_cancel_replace::default_instance_ = new order_cancel_replace();
  order_cancel_replace::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_order_5fcancel_5freplace_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_order_5fcancel_5freplace_2eproto {
  StaticDescriptorInitializer_order_5fcancel_5freplace_2eproto() {
    protobuf_AddDesc_order_5fcancel_5freplace_2eproto();
  }
} static_descriptor_initializer_order_5fcancel_5freplace_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int order_cancel_replace::kOrigClOrderIdFieldNumber;
const int order_cancel_replace::kClOrderIdFieldNumber;
const int order_cancel_replace::kStrategyIdFieldNumber;
const int order_cancel_replace::kHandlInstFieldNumber;
const int order_cancel_replace::kSymbolFieldNumber;
const int order_cancel_replace::kSideFieldNumber;
const int order_cancel_replace::kOrderQtyFieldNumber;
const int order_cancel_replace::kPriceFieldNumber;
const int order_cancel_replace::kTransactTimeFieldNumber;
const int order_cancel_replace::kOrdTypeFieldNumber;
const int order_cancel_replace::kTimeInForceFieldNumber;
#endif  // !_MSC_VER

order_cancel_replace::order_cancel_replace()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void order_cancel_replace::InitAsDefaultInstance() {
}

order_cancel_replace::order_cancel_replace(const order_cancel_replace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void order_cancel_replace::SharedCtor() {
  _cached_size_ = 0;
  orig_cl_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cl_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strategy_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  handl_inst_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  side_ = 1;
  order_qty_ = 0;
  price_ = 0;
  transact_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ord_type_ = 0;
  time_in_force_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

order_cancel_replace::~order_cancel_replace() {
  SharedDtor();
}

void order_cancel_replace::SharedDtor() {
  if (orig_cl_order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete orig_cl_order_id_;
  }
  if (cl_order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete cl_order_id_;
  }
  if (strategy_id_ != &::google::protobuf::internal::kEmptyString) {
    delete strategy_id_;
  }
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (transact_time_ != &::google::protobuf::internal::kEmptyString) {
    delete transact_time_;
  }
  if (this != default_instance_) {
  }
}

void order_cancel_replace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* order_cancel_replace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return order_cancel_replace_descriptor_;
}

const order_cancel_replace& order_cancel_replace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_order_5fcancel_5freplace_2eproto();
  return *default_instance_;
}

order_cancel_replace* order_cancel_replace::default_instance_ = NULL;

order_cancel_replace* order_cancel_replace::New() const {
  return new order_cancel_replace;
}

void order_cancel_replace::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_orig_cl_order_id()) {
      if (orig_cl_order_id_ != &::google::protobuf::internal::kEmptyString) {
        orig_cl_order_id_->clear();
      }
    }
    if (has_cl_order_id()) {
      if (cl_order_id_ != &::google::protobuf::internal::kEmptyString) {
        cl_order_id_->clear();
      }
    }
    if (has_strategy_id()) {
      if (strategy_id_ != &::google::protobuf::internal::kEmptyString) {
        strategy_id_->clear();
      }
    }
    handl_inst_ = 0;
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    side_ = 1;
    order_qty_ = 0;
    price_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_transact_time()) {
      if (transact_time_ != &::google::protobuf::internal::kEmptyString) {
        transact_time_->clear();
      }
    }
    ord_type_ = 0;
    time_in_force_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool order_cancel_replace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes orig_cl_order_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_orig_cl_order_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cl_order_id;
        break;
      }

      // optional bytes cl_order_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cl_order_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cl_order_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strategy_id;
        break;
      }

      // optional bytes strategy_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strategy_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strategy_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_handl_inst;
        break;
      }

      // optional sfixed32 handl_inst = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_handl_inst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &handl_inst_)));
          set_has_handl_inst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_symbol;
        break;
      }

      // optional string symbol = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_side;
        break;
      }

      // optional .capkproto.side_t side = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_side:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::capkproto::side_t_IsValid(value)) {
            set_side(static_cast< ::capkproto::side_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_order_qty;
        break;
      }

      // optional double order_qty = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_order_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &order_qty_)));
          set_has_order_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_price;
        break;
      }

      // optional double price = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_transact_time;
        break;
      }

      // optional string transact_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transact_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transact_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->transact_time().data(), this->transact_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_ord_type;
        break;
      }

      // optional sfixed32 ord_type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ord_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &ord_type_)));
          set_has_ord_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_time_in_force;
        break;
      }

      // optional sfixed32 time_in_force = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_time_in_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &time_in_force_)));
          set_has_time_in_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void order_cancel_replace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes orig_cl_order_id = 1;
  if (has_orig_cl_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->orig_cl_order_id(), output);
  }

  // optional bytes cl_order_id = 2;
  if (has_cl_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->cl_order_id(), output);
  }

  // optional bytes strategy_id = 3;
  if (has_strategy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->strategy_id(), output);
  }

  // optional sfixed32 handl_inst = 4;
  if (has_handl_inst()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->handl_inst(), output);
  }

  // optional string symbol = 5;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->symbol(), output);
  }

  // optional .capkproto.side_t side = 6;
  if (has_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->side(), output);
  }

  // optional double order_qty = 7;
  if (has_order_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->order_qty(), output);
  }

  // optional double price = 8;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->price(), output);
  }

  // optional string transact_time = 9;
  if (has_transact_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transact_time().data(), this->transact_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->transact_time(), output);
  }

  // optional sfixed32 ord_type = 10;
  if (has_ord_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(10, this->ord_type(), output);
  }

  // optional sfixed32 time_in_force = 11;
  if (has_time_in_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(11, this->time_in_force(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* order_cancel_replace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes orig_cl_order_id = 1;
  if (has_orig_cl_order_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->orig_cl_order_id(), target);
  }

  // optional bytes cl_order_id = 2;
  if (has_cl_order_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cl_order_id(), target);
  }

  // optional bytes strategy_id = 3;
  if (has_strategy_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->strategy_id(), target);
  }

  // optional sfixed32 handl_inst = 4;
  if (has_handl_inst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->handl_inst(), target);
  }

  // optional string symbol = 5;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->symbol(), target);
  }

  // optional .capkproto.side_t side = 6;
  if (has_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->side(), target);
  }

  // optional double order_qty = 7;
  if (has_order_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->order_qty(), target);
  }

  // optional double price = 8;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->price(), target);
  }

  // optional string transact_time = 9;
  if (has_transact_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transact_time().data(), this->transact_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->transact_time(), target);
  }

  // optional sfixed32 ord_type = 10;
  if (has_ord_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(10, this->ord_type(), target);
  }

  // optional sfixed32 time_in_force = 11;
  if (has_time_in_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(11, this->time_in_force(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int order_cancel_replace::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes orig_cl_order_id = 1;
    if (has_orig_cl_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->orig_cl_order_id());
    }

    // optional bytes cl_order_id = 2;
    if (has_cl_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cl_order_id());
    }

    // optional bytes strategy_id = 3;
    if (has_strategy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strategy_id());
    }

    // optional sfixed32 handl_inst = 4;
    if (has_handl_inst()) {
      total_size += 1 + 4;
    }

    // optional string symbol = 5;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional .capkproto.side_t side = 6;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }

    // optional double order_qty = 7;
    if (has_order_qty()) {
      total_size += 1 + 8;
    }

    // optional double price = 8;
    if (has_price()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string transact_time = 9;
    if (has_transact_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transact_time());
    }

    // optional sfixed32 ord_type = 10;
    if (has_ord_type()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 time_in_force = 11;
    if (has_time_in_force()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void order_cancel_replace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const order_cancel_replace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const order_cancel_replace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void order_cancel_replace::MergeFrom(const order_cancel_replace& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orig_cl_order_id()) {
      set_orig_cl_order_id(from.orig_cl_order_id());
    }
    if (from.has_cl_order_id()) {
      set_cl_order_id(from.cl_order_id());
    }
    if (from.has_strategy_id()) {
      set_strategy_id(from.strategy_id());
    }
    if (from.has_handl_inst()) {
      set_handl_inst(from.handl_inst());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_side()) {
      set_side(from.side());
    }
    if (from.has_order_qty()) {
      set_order_qty(from.order_qty());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_transact_time()) {
      set_transact_time(from.transact_time());
    }
    if (from.has_ord_type()) {
      set_ord_type(from.ord_type());
    }
    if (from.has_time_in_force()) {
      set_time_in_force(from.time_in_force());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void order_cancel_replace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void order_cancel_replace::CopyFrom(const order_cancel_replace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool order_cancel_replace::IsInitialized() const {

  return true;
}

void order_cancel_replace::Swap(order_cancel_replace* other) {
  if (other != this) {
    std::swap(orig_cl_order_id_, other->orig_cl_order_id_);
    std::swap(cl_order_id_, other->cl_order_id_);
    std::swap(strategy_id_, other->strategy_id_);
    std::swap(handl_inst_, other->handl_inst_);
    std::swap(symbol_, other->symbol_);
    std::swap(side_, other->side_);
    std::swap(order_qty_, other->order_qty_);
    std::swap(price_, other->price_);
    std::swap(transact_time_, other->transact_time_);
    std::swap(ord_type_, other->ord_type_);
    std::swap(time_in_force_, other->time_in_force_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata order_cancel_replace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = order_cancel_replace_descriptor_;
  metadata.reflection = order_cancel_replace_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace capkproto

// @@protoc_insertion_point(global_scope)
