// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: order_status.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "order_status.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace capkproto {

namespace {

const ::google::protobuf::Descriptor* order_status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  order_status_reflection_ = NULL;
const ::google::protobuf::Descriptor* group_no_orders_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  group_no_orders_reflection_ = NULL;
const ::google::protobuf::Descriptor* list_status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  list_status_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_order_5fstatus_2eproto() {
  protobuf_AddDesc_order_5fstatus_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "order_status.proto");
  GOOGLE_CHECK(file != NULL);
  order_status_descriptor_ = file->message_type(0);
  static const int order_status_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_status, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_status, cl_order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_status, strategy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_status, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_status, side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_status, security_type_),
  };
  order_status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      order_status_descriptor_,
      order_status::default_instance_,
      order_status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(order_status));
  group_no_orders_descriptor_ = file->message_type(1);
  static const int group_no_orders_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_no_orders, cl_order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_no_orders, cum_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_no_orders, ord_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_no_orders, leaves_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_no_orders, cxl_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_no_orders, time_in_force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_no_orders, avg_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_no_orders, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_no_orders, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_no_orders, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_no_orders, side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_no_orders, ord_type_),
  };
  group_no_orders_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      group_no_orders_descriptor_,
      group_no_orders::default_instance_,
      group_no_orders_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_no_orders, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(group_no_orders, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(group_no_orders));
  list_status_descriptor_ = file->message_type(2);
  static const int list_status_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(list_status, list_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(list_status, list_status_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(list_status, no_rpts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(list_status, list_order_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(list_status, rpt_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(list_status, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(list_status, tot_no_orders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(list_status, order_status_list_),
  };
  list_status_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      list_status_descriptor_,
      list_status::default_instance_,
      list_status_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(list_status, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(list_status, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(list_status));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_order_5fstatus_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    order_status_descriptor_, &order_status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    group_no_orders_descriptor_, &group_no_orders::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    list_status_descriptor_, &list_status::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_order_5fstatus_2eproto() {
  delete order_status::default_instance_;
  delete order_status_reflection_;
  delete group_no_orders::default_instance_;
  delete group_no_orders_reflection_;
  delete list_status::default_instance_;
  delete list_status_reflection_;
}

void protobuf_AddDesc_order_5fstatus_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::capkproto::protobuf_AddDesc_capk_5fglobals_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022order_status.proto\022\tcapkproto\032\022capk_gl"
    "obals.proto\"\222\001\n\014order_status\022\020\n\010order_id"
    "\030\001 \001(\014\022\023\n\013cl_order_id\030\002 \001(\014\022\023\n\013strategy_"
    "id\030\003 \001(\014\022\016\n\006symbol\030\004 \001(\t\022\037\n\004side\030\005 \001(\0162\021"
    ".capkproto.side_t\022\025\n\rsecurity_type\030\006 \001(\t"
    "\"\372\001\n\017group_no_orders\022\023\n\013cl_order_id\030\001 \001("
    "\014\022\017\n\007cum_qty\030\002 \001(\001\022\022\n\nord_status\030\003 \001(\017\022\022"
    "\n\nleaves_qty\030\004 \001(\001\022\017\n\007cxl_qty\030\005 \001(\001\022\025\n\rt"
    "ime_in_force\030\006 \001(\017\022\016\n\006avg_px\030\007 \001(\001\022\014\n\004te"
    "xt\030\010 \001(\t\022\020\n\010order_id\030\t \001(\t\022\016\n\006symbol\030\n \001"
    "(\t\022\037\n\004side\030\013 \001(\0162\021.capkproto.side_t\022\020\n\010o"
    "rd_type\030\014 \001(\017\"\321\001\n\013list_status\022\017\n\007list_id"
    "\030\001 \001(\t\022\030\n\020list_status_type\030\002 \001(\017\022\017\n\007no_r"
    "pts\030\003 \001(\017\022\031\n\021list_order_status\030\004 \001(\017\022\017\n\007"
    "rpt_seq\030\005 \001(\017\022\014\n\004text\030\006 \001(\t\022\025\n\rtot_no_or"
    "ders\030\007 \001(\017\0225\n\021order_status_list\030\t \003(\0132\032."
    "capkproto.group_no_orders", 665);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "order_status.proto", &protobuf_RegisterTypes);
  order_status::default_instance_ = new order_status();
  group_no_orders::default_instance_ = new group_no_orders();
  list_status::default_instance_ = new list_status();
  order_status::default_instance_->InitAsDefaultInstance();
  group_no_orders::default_instance_->InitAsDefaultInstance();
  list_status::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_order_5fstatus_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_order_5fstatus_2eproto {
  StaticDescriptorInitializer_order_5fstatus_2eproto() {
    protobuf_AddDesc_order_5fstatus_2eproto();
  }
} static_descriptor_initializer_order_5fstatus_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int order_status::kOrderIdFieldNumber;
const int order_status::kClOrderIdFieldNumber;
const int order_status::kStrategyIdFieldNumber;
const int order_status::kSymbolFieldNumber;
const int order_status::kSideFieldNumber;
const int order_status::kSecurityTypeFieldNumber;
#endif  // !_MSC_VER

order_status::order_status()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void order_status::InitAsDefaultInstance() {
}

order_status::order_status(const order_status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void order_status::SharedCtor() {
  _cached_size_ = 0;
  order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cl_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strategy_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  side_ = 1;
  security_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

order_status::~order_status() {
  SharedDtor();
}

void order_status::SharedDtor() {
  if (order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete order_id_;
  }
  if (cl_order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete cl_order_id_;
  }
  if (strategy_id_ != &::google::protobuf::internal::kEmptyString) {
    delete strategy_id_;
  }
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (security_type_ != &::google::protobuf::internal::kEmptyString) {
    delete security_type_;
  }
  if (this != default_instance_) {
  }
}

void order_status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* order_status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return order_status_descriptor_;
}

const order_status& order_status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_order_5fstatus_2eproto();
  return *default_instance_;
}

order_status* order_status::default_instance_ = NULL;

order_status* order_status::New() const {
  return new order_status;
}

void order_status::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_order_id()) {
      if (order_id_ != &::google::protobuf::internal::kEmptyString) {
        order_id_->clear();
      }
    }
    if (has_cl_order_id()) {
      if (cl_order_id_ != &::google::protobuf::internal::kEmptyString) {
        cl_order_id_->clear();
      }
    }
    if (has_strategy_id()) {
      if (strategy_id_ != &::google::protobuf::internal::kEmptyString) {
        strategy_id_->clear();
      }
    }
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    side_ = 1;
    if (has_security_type()) {
      if (security_type_ != &::google::protobuf::internal::kEmptyString) {
        security_type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool order_status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes order_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_order_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cl_order_id;
        break;
      }

      // optional bytes cl_order_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cl_order_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cl_order_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strategy_id;
        break;
      }

      // optional bytes strategy_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strategy_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strategy_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_symbol;
        break;
      }

      // optional string symbol = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_side;
        break;
      }

      // optional .capkproto.side_t side = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_side:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::capkproto::side_t_IsValid(value)) {
            set_side(static_cast< ::capkproto::side_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_security_type;
        break;
      }

      // optional string security_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->security_type().data(), this->security_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void order_status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes order_id = 1;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->order_id(), output);
  }

  // optional bytes cl_order_id = 2;
  if (has_cl_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->cl_order_id(), output);
  }

  // optional bytes strategy_id = 3;
  if (has_strategy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->strategy_id(), output);
  }

  // optional string symbol = 4;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->symbol(), output);
  }

  // optional .capkproto.side_t side = 5;
  if (has_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->side(), output);
  }

  // optional string security_type = 6;
  if (has_security_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_type().data(), this->security_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->security_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* order_status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes order_id = 1;
  if (has_order_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->order_id(), target);
  }

  // optional bytes cl_order_id = 2;
  if (has_cl_order_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cl_order_id(), target);
  }

  // optional bytes strategy_id = 3;
  if (has_strategy_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->strategy_id(), target);
  }

  // optional string symbol = 4;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->symbol(), target);
  }

  // optional .capkproto.side_t side = 5;
  if (has_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->side(), target);
  }

  // optional string security_type = 6;
  if (has_security_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_type().data(), this->security_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->security_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int order_status::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes order_id = 1;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->order_id());
    }

    // optional bytes cl_order_id = 2;
    if (has_cl_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cl_order_id());
    }

    // optional bytes strategy_id = 3;
    if (has_strategy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strategy_id());
    }

    // optional string symbol = 4;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional .capkproto.side_t side = 5;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }

    // optional string security_type = 6;
    if (has_security_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void order_status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const order_status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const order_status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void order_status::MergeFrom(const order_status& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_cl_order_id()) {
      set_cl_order_id(from.cl_order_id());
    }
    if (from.has_strategy_id()) {
      set_strategy_id(from.strategy_id());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_side()) {
      set_side(from.side());
    }
    if (from.has_security_type()) {
      set_security_type(from.security_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void order_status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void order_status::CopyFrom(const order_status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool order_status::IsInitialized() const {

  return true;
}

void order_status::Swap(order_status* other) {
  if (other != this) {
    std::swap(order_id_, other->order_id_);
    std::swap(cl_order_id_, other->cl_order_id_);
    std::swap(strategy_id_, other->strategy_id_);
    std::swap(symbol_, other->symbol_);
    std::swap(side_, other->side_);
    std::swap(security_type_, other->security_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata order_status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = order_status_descriptor_;
  metadata.reflection = order_status_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int group_no_orders::kClOrderIdFieldNumber;
const int group_no_orders::kCumQtyFieldNumber;
const int group_no_orders::kOrdStatusFieldNumber;
const int group_no_orders::kLeavesQtyFieldNumber;
const int group_no_orders::kCxlQtyFieldNumber;
const int group_no_orders::kTimeInForceFieldNumber;
const int group_no_orders::kAvgPxFieldNumber;
const int group_no_orders::kTextFieldNumber;
const int group_no_orders::kOrderIdFieldNumber;
const int group_no_orders::kSymbolFieldNumber;
const int group_no_orders::kSideFieldNumber;
const int group_no_orders::kOrdTypeFieldNumber;
#endif  // !_MSC_VER

group_no_orders::group_no_orders()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void group_no_orders::InitAsDefaultInstance() {
}

group_no_orders::group_no_orders(const group_no_orders& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void group_no_orders::SharedCtor() {
  _cached_size_ = 0;
  cl_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cum_qty_ = 0;
  ord_status_ = 0;
  leaves_qty_ = 0;
  cxl_qty_ = 0;
  time_in_force_ = 0;
  avg_px_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  side_ = 1;
  ord_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

group_no_orders::~group_no_orders() {
  SharedDtor();
}

void group_no_orders::SharedDtor() {
  if (cl_order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete cl_order_id_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete order_id_;
  }
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
  }
}

void group_no_orders::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* group_no_orders::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return group_no_orders_descriptor_;
}

const group_no_orders& group_no_orders::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_order_5fstatus_2eproto();
  return *default_instance_;
}

group_no_orders* group_no_orders::default_instance_ = NULL;

group_no_orders* group_no_orders::New() const {
  return new group_no_orders;
}

void group_no_orders::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cl_order_id()) {
      if (cl_order_id_ != &::google::protobuf::internal::kEmptyString) {
        cl_order_id_->clear();
      }
    }
    cum_qty_ = 0;
    ord_status_ = 0;
    leaves_qty_ = 0;
    cxl_qty_ = 0;
    time_in_force_ = 0;
    avg_px_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_order_id()) {
      if (order_id_ != &::google::protobuf::internal::kEmptyString) {
        order_id_->clear();
      }
    }
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    side_ = 1;
    ord_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool group_no_orders::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes cl_order_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cl_order_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_cum_qty;
        break;
      }

      // optional double cum_qty = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_cum_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cum_qty_)));
          set_has_cum_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_ord_status;
        break;
      }

      // optional sfixed32 ord_status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ord_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &ord_status_)));
          set_has_ord_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_leaves_qty;
        break;
      }

      // optional double leaves_qty = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leaves_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &leaves_qty_)));
          set_has_leaves_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_cxl_qty;
        break;
      }

      // optional double cxl_qty = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_cxl_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cxl_qty_)));
          set_has_cxl_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_time_in_force;
        break;
      }

      // optional sfixed32 time_in_force = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_time_in_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &time_in_force_)));
          set_has_time_in_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_avg_px;
        break;
      }

      // optional double avg_px = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_avg_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avg_px_)));
          set_has_avg_px();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_text;
        break;
      }

      // optional string text = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_order_id;
        break;
      }

      // optional string order_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->order_id().data(), this->order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_symbol;
        break;
      }

      // optional string symbol = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_side;
        break;
      }

      // optional .capkproto.side_t side = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_side:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::capkproto::side_t_IsValid(value)) {
            set_side(static_cast< ::capkproto::side_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_ord_type;
        break;
      }

      // optional sfixed32 ord_type = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ord_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &ord_type_)));
          set_has_ord_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void group_no_orders::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes cl_order_id = 1;
  if (has_cl_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->cl_order_id(), output);
  }

  // optional double cum_qty = 2;
  if (has_cum_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->cum_qty(), output);
  }

  // optional sfixed32 ord_status = 3;
  if (has_ord_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->ord_status(), output);
  }

  // optional double leaves_qty = 4;
  if (has_leaves_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->leaves_qty(), output);
  }

  // optional double cxl_qty = 5;
  if (has_cxl_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->cxl_qty(), output);
  }

  // optional sfixed32 time_in_force = 6;
  if (has_time_in_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(6, this->time_in_force(), output);
  }

  // optional double avg_px = 7;
  if (has_avg_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->avg_px(), output);
  }

  // optional string text = 8;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->text(), output);
  }

  // optional string order_id = 9;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->order_id(), output);
  }

  // optional string symbol = 10;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->symbol(), output);
  }

  // optional .capkproto.side_t side = 11;
  if (has_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->side(), output);
  }

  // optional sfixed32 ord_type = 12;
  if (has_ord_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(12, this->ord_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* group_no_orders::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes cl_order_id = 1;
  if (has_cl_order_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->cl_order_id(), target);
  }

  // optional double cum_qty = 2;
  if (has_cum_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->cum_qty(), target);
  }

  // optional sfixed32 ord_status = 3;
  if (has_ord_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->ord_status(), target);
  }

  // optional double leaves_qty = 4;
  if (has_leaves_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->leaves_qty(), target);
  }

  // optional double cxl_qty = 5;
  if (has_cxl_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->cxl_qty(), target);
  }

  // optional sfixed32 time_in_force = 6;
  if (has_time_in_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(6, this->time_in_force(), target);
  }

  // optional double avg_px = 7;
  if (has_avg_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->avg_px(), target);
  }

  // optional string text = 8;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->text(), target);
  }

  // optional string order_id = 9;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->order_id(), target);
  }

  // optional string symbol = 10;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->symbol(), target);
  }

  // optional .capkproto.side_t side = 11;
  if (has_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->side(), target);
  }

  // optional sfixed32 ord_type = 12;
  if (has_ord_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(12, this->ord_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int group_no_orders::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes cl_order_id = 1;
    if (has_cl_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cl_order_id());
    }

    // optional double cum_qty = 2;
    if (has_cum_qty()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 ord_status = 3;
    if (has_ord_status()) {
      total_size += 1 + 4;
    }

    // optional double leaves_qty = 4;
    if (has_leaves_qty()) {
      total_size += 1 + 8;
    }

    // optional double cxl_qty = 5;
    if (has_cxl_qty()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 time_in_force = 6;
    if (has_time_in_force()) {
      total_size += 1 + 4;
    }

    // optional double avg_px = 7;
    if (has_avg_px()) {
      total_size += 1 + 8;
    }

    // optional string text = 8;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string order_id = 9;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_id());
    }

    // optional string symbol = 10;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional .capkproto.side_t side = 11;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }

    // optional sfixed32 ord_type = 12;
    if (has_ord_type()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void group_no_orders::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const group_no_orders* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const group_no_orders*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void group_no_orders::MergeFrom(const group_no_orders& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cl_order_id()) {
      set_cl_order_id(from.cl_order_id());
    }
    if (from.has_cum_qty()) {
      set_cum_qty(from.cum_qty());
    }
    if (from.has_ord_status()) {
      set_ord_status(from.ord_status());
    }
    if (from.has_leaves_qty()) {
      set_leaves_qty(from.leaves_qty());
    }
    if (from.has_cxl_qty()) {
      set_cxl_qty(from.cxl_qty());
    }
    if (from.has_time_in_force()) {
      set_time_in_force(from.time_in_force());
    }
    if (from.has_avg_px()) {
      set_avg_px(from.avg_px());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_side()) {
      set_side(from.side());
    }
    if (from.has_ord_type()) {
      set_ord_type(from.ord_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void group_no_orders::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void group_no_orders::CopyFrom(const group_no_orders& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool group_no_orders::IsInitialized() const {

  return true;
}

void group_no_orders::Swap(group_no_orders* other) {
  if (other != this) {
    std::swap(cl_order_id_, other->cl_order_id_);
    std::swap(cum_qty_, other->cum_qty_);
    std::swap(ord_status_, other->ord_status_);
    std::swap(leaves_qty_, other->leaves_qty_);
    std::swap(cxl_qty_, other->cxl_qty_);
    std::swap(time_in_force_, other->time_in_force_);
    std::swap(avg_px_, other->avg_px_);
    std::swap(text_, other->text_);
    std::swap(order_id_, other->order_id_);
    std::swap(symbol_, other->symbol_);
    std::swap(side_, other->side_);
    std::swap(ord_type_, other->ord_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata group_no_orders::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = group_no_orders_descriptor_;
  metadata.reflection = group_no_orders_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int list_status::kListIdFieldNumber;
const int list_status::kListStatusTypeFieldNumber;
const int list_status::kNoRptsFieldNumber;
const int list_status::kListOrderStatusFieldNumber;
const int list_status::kRptSeqFieldNumber;
const int list_status::kTextFieldNumber;
const int list_status::kTotNoOrdersFieldNumber;
const int list_status::kOrderStatusListFieldNumber;
#endif  // !_MSC_VER

list_status::list_status()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void list_status::InitAsDefaultInstance() {
}

list_status::list_status(const list_status& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void list_status::SharedCtor() {
  _cached_size_ = 0;
  list_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  list_status_type_ = 0;
  no_rpts_ = 0;
  list_order_status_ = 0;
  rpt_seq_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tot_no_orders_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

list_status::~list_status() {
  SharedDtor();
}

void list_status::SharedDtor() {
  if (list_id_ != &::google::protobuf::internal::kEmptyString) {
    delete list_id_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void list_status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* list_status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return list_status_descriptor_;
}

const list_status& list_status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_order_5fstatus_2eproto();
  return *default_instance_;
}

list_status* list_status::default_instance_ = NULL;

list_status* list_status::New() const {
  return new list_status;
}

void list_status::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_list_id()) {
      if (list_id_ != &::google::protobuf::internal::kEmptyString) {
        list_id_->clear();
      }
    }
    list_status_type_ = 0;
    no_rpts_ = 0;
    list_order_status_ = 0;
    rpt_seq_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    tot_no_orders_ = 0;
  }
  order_status_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool list_status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string list_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_list_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->list_id().data(), this->list_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_list_status_type;
        break;
      }

      // optional sfixed32 list_status_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_list_status_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &list_status_type_)));
          set_has_list_status_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_no_rpts;
        break;
      }

      // optional sfixed32 no_rpts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_no_rpts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &no_rpts_)));
          set_has_no_rpts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_list_order_status;
        break;
      }

      // optional sfixed32 list_order_status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_list_order_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &list_order_status_)));
          set_has_list_order_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_rpt_seq;
        break;
      }

      // optional sfixed32 rpt_seq = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rpt_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &rpt_seq_)));
          set_has_rpt_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_text;
        break;
      }

      // optional string text = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_tot_no_orders;
        break;
      }

      // optional sfixed32 tot_no_orders = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tot_no_orders:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &tot_no_orders_)));
          set_has_tot_no_orders();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_order_status_list;
        break;
      }

      // repeated .capkproto.group_no_orders order_status_list = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order_status_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_order_status_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_order_status_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void list_status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string list_id = 1;
  if (has_list_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->list_id().data(), this->list_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->list_id(), output);
  }

  // optional sfixed32 list_status_type = 2;
  if (has_list_status_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->list_status_type(), output);
  }

  // optional sfixed32 no_rpts = 3;
  if (has_no_rpts()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->no_rpts(), output);
  }

  // optional sfixed32 list_order_status = 4;
  if (has_list_order_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->list_order_status(), output);
  }

  // optional sfixed32 rpt_seq = 5;
  if (has_rpt_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(5, this->rpt_seq(), output);
  }

  // optional string text = 6;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->text(), output);
  }

  // optional sfixed32 tot_no_orders = 7;
  if (has_tot_no_orders()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(7, this->tot_no_orders(), output);
  }

  // repeated .capkproto.group_no_orders order_status_list = 9;
  for (int i = 0; i < this->order_status_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->order_status_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* list_status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string list_id = 1;
  if (has_list_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->list_id().data(), this->list_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->list_id(), target);
  }

  // optional sfixed32 list_status_type = 2;
  if (has_list_status_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->list_status_type(), target);
  }

  // optional sfixed32 no_rpts = 3;
  if (has_no_rpts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->no_rpts(), target);
  }

  // optional sfixed32 list_order_status = 4;
  if (has_list_order_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->list_order_status(), target);
  }

  // optional sfixed32 rpt_seq = 5;
  if (has_rpt_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(5, this->rpt_seq(), target);
  }

  // optional string text = 6;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->text(), target);
  }

  // optional sfixed32 tot_no_orders = 7;
  if (has_tot_no_orders()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(7, this->tot_no_orders(), target);
  }

  // repeated .capkproto.group_no_orders order_status_list = 9;
  for (int i = 0; i < this->order_status_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->order_status_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int list_status::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string list_id = 1;
    if (has_list_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->list_id());
    }

    // optional sfixed32 list_status_type = 2;
    if (has_list_status_type()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 no_rpts = 3;
    if (has_no_rpts()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 list_order_status = 4;
    if (has_list_order_status()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 rpt_seq = 5;
    if (has_rpt_seq()) {
      total_size += 1 + 4;
    }

    // optional string text = 6;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional sfixed32 tot_no_orders = 7;
    if (has_tot_no_orders()) {
      total_size += 1 + 4;
    }

  }
  // repeated .capkproto.group_no_orders order_status_list = 9;
  total_size += 1 * this->order_status_list_size();
  for (int i = 0; i < this->order_status_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->order_status_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void list_status::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const list_status* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const list_status*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void list_status::MergeFrom(const list_status& from) {
  GOOGLE_CHECK_NE(&from, this);
  order_status_list_.MergeFrom(from.order_status_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_list_id()) {
      set_list_id(from.list_id());
    }
    if (from.has_list_status_type()) {
      set_list_status_type(from.list_status_type());
    }
    if (from.has_no_rpts()) {
      set_no_rpts(from.no_rpts());
    }
    if (from.has_list_order_status()) {
      set_list_order_status(from.list_order_status());
    }
    if (from.has_rpt_seq()) {
      set_rpt_seq(from.rpt_seq());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_tot_no_orders()) {
      set_tot_no_orders(from.tot_no_orders());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void list_status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void list_status::CopyFrom(const list_status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool list_status::IsInitialized() const {

  return true;
}

void list_status::Swap(list_status* other) {
  if (other != this) {
    std::swap(list_id_, other->list_id_);
    std::swap(list_status_type_, other->list_status_type_);
    std::swap(no_rpts_, other->no_rpts_);
    std::swap(list_order_status_, other->list_order_status_);
    std::swap(rpt_seq_, other->rpt_seq_);
    std::swap(text_, other->text_);
    std::swap(tot_no_orders_, other->tot_no_orders_);
    order_status_list_.Swap(&other->order_status_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata list_status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = list_status_descriptor_;
  metadata.reflection = list_status_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace capkproto

// @@protoc_insertion_point(global_scope)
