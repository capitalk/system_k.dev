// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: order_status.proto

#ifndef PROTOBUF_order_5fstatus_2eproto__INCLUDED
#define PROTOBUF_order_5fstatus_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "capk_globals.pb.h"
// @@protoc_insertion_point(includes)

namespace capkproto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_order_5fstatus_2eproto();
void protobuf_AssignDesc_order_5fstatus_2eproto();
void protobuf_ShutdownFile_order_5fstatus_2eproto();

class order_status;
class group_no_orders;
class list_status;

// ===================================================================

class order_status : public ::google::protobuf::Message {
 public:
  order_status();
  virtual ~order_status();

  order_status(const order_status& from);

  inline order_status& operator=(const order_status& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const order_status& default_instance();

  void Swap(order_status* other);

  // implements Message ----------------------------------------------

  order_status* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const order_status& from);
  void MergeFrom(const order_status& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes order_id = 1;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 1;
  inline const ::std::string& order_id() const;
  inline void set_order_id(const ::std::string& value);
  inline void set_order_id(const char* value);
  inline void set_order_id(const void* value, size_t size);
  inline ::std::string* mutable_order_id();
  inline ::std::string* release_order_id();
  inline void set_allocated_order_id(::std::string* order_id);

  // optional bytes cl_order_id = 2;
  inline bool has_cl_order_id() const;
  inline void clear_cl_order_id();
  static const int kClOrderIdFieldNumber = 2;
  inline const ::std::string& cl_order_id() const;
  inline void set_cl_order_id(const ::std::string& value);
  inline void set_cl_order_id(const char* value);
  inline void set_cl_order_id(const void* value, size_t size);
  inline ::std::string* mutable_cl_order_id();
  inline ::std::string* release_cl_order_id();
  inline void set_allocated_cl_order_id(::std::string* cl_order_id);

  // optional bytes strategy_id = 3;
  inline bool has_strategy_id() const;
  inline void clear_strategy_id();
  static const int kStrategyIdFieldNumber = 3;
  inline const ::std::string& strategy_id() const;
  inline void set_strategy_id(const ::std::string& value);
  inline void set_strategy_id(const char* value);
  inline void set_strategy_id(const void* value, size_t size);
  inline ::std::string* mutable_strategy_id();
  inline ::std::string* release_strategy_id();
  inline void set_allocated_strategy_id(::std::string* strategy_id);

  // optional string symbol = 4;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 4;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  inline void set_allocated_symbol(::std::string* symbol);

  // optional .capkproto.side_t side = 5;
  inline bool has_side() const;
  inline void clear_side();
  static const int kSideFieldNumber = 5;
  inline ::capkproto::side_t side() const;
  inline void set_side(::capkproto::side_t value);

  // optional string security_type = 6;
  inline bool has_security_type() const;
  inline void clear_security_type();
  static const int kSecurityTypeFieldNumber = 6;
  inline const ::std::string& security_type() const;
  inline void set_security_type(const ::std::string& value);
  inline void set_security_type(const char* value);
  inline void set_security_type(const char* value, size_t size);
  inline ::std::string* mutable_security_type();
  inline ::std::string* release_security_type();
  inline void set_allocated_security_type(::std::string* security_type);

  // @@protoc_insertion_point(class_scope:capkproto.order_status)
 private:
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_cl_order_id();
  inline void clear_has_cl_order_id();
  inline void set_has_strategy_id();
  inline void clear_has_strategy_id();
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_side();
  inline void clear_has_side();
  inline void set_has_security_type();
  inline void clear_has_security_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* order_id_;
  ::std::string* cl_order_id_;
  ::std::string* strategy_id_;
  ::std::string* symbol_;
  ::std::string* security_type_;
  int side_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_order_5fstatus_2eproto();
  friend void protobuf_AssignDesc_order_5fstatus_2eproto();
  friend void protobuf_ShutdownFile_order_5fstatus_2eproto();

  void InitAsDefaultInstance();
  static order_status* default_instance_;
};
// -------------------------------------------------------------------

class group_no_orders : public ::google::protobuf::Message {
 public:
  group_no_orders();
  virtual ~group_no_orders();

  group_no_orders(const group_no_orders& from);

  inline group_no_orders& operator=(const group_no_orders& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const group_no_orders& default_instance();

  void Swap(group_no_orders* other);

  // implements Message ----------------------------------------------

  group_no_orders* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const group_no_orders& from);
  void MergeFrom(const group_no_orders& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes cl_order_id = 1;
  inline bool has_cl_order_id() const;
  inline void clear_cl_order_id();
  static const int kClOrderIdFieldNumber = 1;
  inline const ::std::string& cl_order_id() const;
  inline void set_cl_order_id(const ::std::string& value);
  inline void set_cl_order_id(const char* value);
  inline void set_cl_order_id(const void* value, size_t size);
  inline ::std::string* mutable_cl_order_id();
  inline ::std::string* release_cl_order_id();
  inline void set_allocated_cl_order_id(::std::string* cl_order_id);

  // optional double cum_qty = 2;
  inline bool has_cum_qty() const;
  inline void clear_cum_qty();
  static const int kCumQtyFieldNumber = 2;
  inline double cum_qty() const;
  inline void set_cum_qty(double value);

  // optional sfixed32 ord_status = 3;
  inline bool has_ord_status() const;
  inline void clear_ord_status();
  static const int kOrdStatusFieldNumber = 3;
  inline ::google::protobuf::int32 ord_status() const;
  inline void set_ord_status(::google::protobuf::int32 value);

  // optional double leaves_qty = 4;
  inline bool has_leaves_qty() const;
  inline void clear_leaves_qty();
  static const int kLeavesQtyFieldNumber = 4;
  inline double leaves_qty() const;
  inline void set_leaves_qty(double value);

  // optional double cxl_qty = 5;
  inline bool has_cxl_qty() const;
  inline void clear_cxl_qty();
  static const int kCxlQtyFieldNumber = 5;
  inline double cxl_qty() const;
  inline void set_cxl_qty(double value);

  // optional sfixed32 time_in_force = 6;
  inline bool has_time_in_force() const;
  inline void clear_time_in_force();
  static const int kTimeInForceFieldNumber = 6;
  inline ::google::protobuf::int32 time_in_force() const;
  inline void set_time_in_force(::google::protobuf::int32 value);

  // optional double avg_px = 7;
  inline bool has_avg_px() const;
  inline void clear_avg_px();
  static const int kAvgPxFieldNumber = 7;
  inline double avg_px() const;
  inline void set_avg_px(double value);

  // optional string text = 8;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 8;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // optional string order_id = 9;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 9;
  inline const ::std::string& order_id() const;
  inline void set_order_id(const ::std::string& value);
  inline void set_order_id(const char* value);
  inline void set_order_id(const char* value, size_t size);
  inline ::std::string* mutable_order_id();
  inline ::std::string* release_order_id();
  inline void set_allocated_order_id(::std::string* order_id);

  // optional string symbol = 10;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 10;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  inline void set_allocated_symbol(::std::string* symbol);

  // optional .capkproto.side_t side = 11;
  inline bool has_side() const;
  inline void clear_side();
  static const int kSideFieldNumber = 11;
  inline ::capkproto::side_t side() const;
  inline void set_side(::capkproto::side_t value);

  // optional sfixed32 ord_type = 12;
  inline bool has_ord_type() const;
  inline void clear_ord_type();
  static const int kOrdTypeFieldNumber = 12;
  inline ::google::protobuf::int32 ord_type() const;
  inline void set_ord_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:capkproto.group_no_orders)
 private:
  inline void set_has_cl_order_id();
  inline void clear_has_cl_order_id();
  inline void set_has_cum_qty();
  inline void clear_has_cum_qty();
  inline void set_has_ord_status();
  inline void clear_has_ord_status();
  inline void set_has_leaves_qty();
  inline void clear_has_leaves_qty();
  inline void set_has_cxl_qty();
  inline void clear_has_cxl_qty();
  inline void set_has_time_in_force();
  inline void clear_has_time_in_force();
  inline void set_has_avg_px();
  inline void clear_has_avg_px();
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_side();
  inline void clear_has_side();
  inline void set_has_ord_type();
  inline void clear_has_ord_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* cl_order_id_;
  double cum_qty_;
  double leaves_qty_;
  ::google::protobuf::int32 ord_status_;
  ::google::protobuf::int32 time_in_force_;
  double cxl_qty_;
  double avg_px_;
  ::std::string* text_;
  ::std::string* order_id_;
  ::std::string* symbol_;
  int side_;
  ::google::protobuf::int32 ord_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_order_5fstatus_2eproto();
  friend void protobuf_AssignDesc_order_5fstatus_2eproto();
  friend void protobuf_ShutdownFile_order_5fstatus_2eproto();

  void InitAsDefaultInstance();
  static group_no_orders* default_instance_;
};
// -------------------------------------------------------------------

class list_status : public ::google::protobuf::Message {
 public:
  list_status();
  virtual ~list_status();

  list_status(const list_status& from);

  inline list_status& operator=(const list_status& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const list_status& default_instance();

  void Swap(list_status* other);

  // implements Message ----------------------------------------------

  list_status* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const list_status& from);
  void MergeFrom(const list_status& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string list_id = 1;
  inline bool has_list_id() const;
  inline void clear_list_id();
  static const int kListIdFieldNumber = 1;
  inline const ::std::string& list_id() const;
  inline void set_list_id(const ::std::string& value);
  inline void set_list_id(const char* value);
  inline void set_list_id(const char* value, size_t size);
  inline ::std::string* mutable_list_id();
  inline ::std::string* release_list_id();
  inline void set_allocated_list_id(::std::string* list_id);

  // optional sfixed32 list_status_type = 2;
  inline bool has_list_status_type() const;
  inline void clear_list_status_type();
  static const int kListStatusTypeFieldNumber = 2;
  inline ::google::protobuf::int32 list_status_type() const;
  inline void set_list_status_type(::google::protobuf::int32 value);

  // optional sfixed32 no_rpts = 3;
  inline bool has_no_rpts() const;
  inline void clear_no_rpts();
  static const int kNoRptsFieldNumber = 3;
  inline ::google::protobuf::int32 no_rpts() const;
  inline void set_no_rpts(::google::protobuf::int32 value);

  // optional sfixed32 list_order_status = 4;
  inline bool has_list_order_status() const;
  inline void clear_list_order_status();
  static const int kListOrderStatusFieldNumber = 4;
  inline ::google::protobuf::int32 list_order_status() const;
  inline void set_list_order_status(::google::protobuf::int32 value);

  // optional sfixed32 rpt_seq = 5;
  inline bool has_rpt_seq() const;
  inline void clear_rpt_seq();
  static const int kRptSeqFieldNumber = 5;
  inline ::google::protobuf::int32 rpt_seq() const;
  inline void set_rpt_seq(::google::protobuf::int32 value);

  // optional string text = 6;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 6;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // optional sfixed32 tot_no_orders = 7;
  inline bool has_tot_no_orders() const;
  inline void clear_tot_no_orders();
  static const int kTotNoOrdersFieldNumber = 7;
  inline ::google::protobuf::int32 tot_no_orders() const;
  inline void set_tot_no_orders(::google::protobuf::int32 value);

  // repeated .capkproto.group_no_orders order_status_list = 9;
  inline int order_status_list_size() const;
  inline void clear_order_status_list();
  static const int kOrderStatusListFieldNumber = 9;
  inline const ::capkproto::group_no_orders& order_status_list(int index) const;
  inline ::capkproto::group_no_orders* mutable_order_status_list(int index);
  inline ::capkproto::group_no_orders* add_order_status_list();
  inline const ::google::protobuf::RepeatedPtrField< ::capkproto::group_no_orders >&
      order_status_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::capkproto::group_no_orders >*
      mutable_order_status_list();

  // @@protoc_insertion_point(class_scope:capkproto.list_status)
 private:
  inline void set_has_list_id();
  inline void clear_has_list_id();
  inline void set_has_list_status_type();
  inline void clear_has_list_status_type();
  inline void set_has_no_rpts();
  inline void clear_has_no_rpts();
  inline void set_has_list_order_status();
  inline void clear_has_list_order_status();
  inline void set_has_rpt_seq();
  inline void clear_has_rpt_seq();
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_tot_no_orders();
  inline void clear_has_tot_no_orders();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* list_id_;
  ::google::protobuf::int32 list_status_type_;
  ::google::protobuf::int32 no_rpts_;
  ::google::protobuf::int32 list_order_status_;
  ::google::protobuf::int32 rpt_seq_;
  ::std::string* text_;
  ::google::protobuf::RepeatedPtrField< ::capkproto::group_no_orders > order_status_list_;
  ::google::protobuf::int32 tot_no_orders_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_order_5fstatus_2eproto();
  friend void protobuf_AssignDesc_order_5fstatus_2eproto();
  friend void protobuf_ShutdownFile_order_5fstatus_2eproto();

  void InitAsDefaultInstance();
  static list_status* default_instance_;
};
// ===================================================================


// ===================================================================

// order_status

// optional bytes order_id = 1;
inline bool order_status::has_order_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void order_status::set_has_order_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void order_status::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void order_status::clear_order_id() {
  if (order_id_ != &::google::protobuf::internal::kEmptyString) {
    order_id_->clear();
  }
  clear_has_order_id();
}
inline const ::std::string& order_status::order_id() const {
  return *order_id_;
}
inline void order_status::set_order_id(const ::std::string& value) {
  set_has_order_id();
  if (order_id_ == &::google::protobuf::internal::kEmptyString) {
    order_id_ = new ::std::string;
  }
  order_id_->assign(value);
}
inline void order_status::set_order_id(const char* value) {
  set_has_order_id();
  if (order_id_ == &::google::protobuf::internal::kEmptyString) {
    order_id_ = new ::std::string;
  }
  order_id_->assign(value);
}
inline void order_status::set_order_id(const void* value, size_t size) {
  set_has_order_id();
  if (order_id_ == &::google::protobuf::internal::kEmptyString) {
    order_id_ = new ::std::string;
  }
  order_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* order_status::mutable_order_id() {
  set_has_order_id();
  if (order_id_ == &::google::protobuf::internal::kEmptyString) {
    order_id_ = new ::std::string;
  }
  return order_id_;
}
inline ::std::string* order_status::release_order_id() {
  clear_has_order_id();
  if (order_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = order_id_;
    order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void order_status::set_allocated_order_id(::std::string* order_id) {
  if (order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete order_id_;
  }
  if (order_id) {
    set_has_order_id();
    order_id_ = order_id;
  } else {
    clear_has_order_id();
    order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes cl_order_id = 2;
inline bool order_status::has_cl_order_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void order_status::set_has_cl_order_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void order_status::clear_has_cl_order_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void order_status::clear_cl_order_id() {
  if (cl_order_id_ != &::google::protobuf::internal::kEmptyString) {
    cl_order_id_->clear();
  }
  clear_has_cl_order_id();
}
inline const ::std::string& order_status::cl_order_id() const {
  return *cl_order_id_;
}
inline void order_status::set_cl_order_id(const ::std::string& value) {
  set_has_cl_order_id();
  if (cl_order_id_ == &::google::protobuf::internal::kEmptyString) {
    cl_order_id_ = new ::std::string;
  }
  cl_order_id_->assign(value);
}
inline void order_status::set_cl_order_id(const char* value) {
  set_has_cl_order_id();
  if (cl_order_id_ == &::google::protobuf::internal::kEmptyString) {
    cl_order_id_ = new ::std::string;
  }
  cl_order_id_->assign(value);
}
inline void order_status::set_cl_order_id(const void* value, size_t size) {
  set_has_cl_order_id();
  if (cl_order_id_ == &::google::protobuf::internal::kEmptyString) {
    cl_order_id_ = new ::std::string;
  }
  cl_order_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* order_status::mutable_cl_order_id() {
  set_has_cl_order_id();
  if (cl_order_id_ == &::google::protobuf::internal::kEmptyString) {
    cl_order_id_ = new ::std::string;
  }
  return cl_order_id_;
}
inline ::std::string* order_status::release_cl_order_id() {
  clear_has_cl_order_id();
  if (cl_order_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cl_order_id_;
    cl_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void order_status::set_allocated_cl_order_id(::std::string* cl_order_id) {
  if (cl_order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete cl_order_id_;
  }
  if (cl_order_id) {
    set_has_cl_order_id();
    cl_order_id_ = cl_order_id;
  } else {
    clear_has_cl_order_id();
    cl_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes strategy_id = 3;
inline bool order_status::has_strategy_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void order_status::set_has_strategy_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void order_status::clear_has_strategy_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void order_status::clear_strategy_id() {
  if (strategy_id_ != &::google::protobuf::internal::kEmptyString) {
    strategy_id_->clear();
  }
  clear_has_strategy_id();
}
inline const ::std::string& order_status::strategy_id() const {
  return *strategy_id_;
}
inline void order_status::set_strategy_id(const ::std::string& value) {
  set_has_strategy_id();
  if (strategy_id_ == &::google::protobuf::internal::kEmptyString) {
    strategy_id_ = new ::std::string;
  }
  strategy_id_->assign(value);
}
inline void order_status::set_strategy_id(const char* value) {
  set_has_strategy_id();
  if (strategy_id_ == &::google::protobuf::internal::kEmptyString) {
    strategy_id_ = new ::std::string;
  }
  strategy_id_->assign(value);
}
inline void order_status::set_strategy_id(const void* value, size_t size) {
  set_has_strategy_id();
  if (strategy_id_ == &::google::protobuf::internal::kEmptyString) {
    strategy_id_ = new ::std::string;
  }
  strategy_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* order_status::mutable_strategy_id() {
  set_has_strategy_id();
  if (strategy_id_ == &::google::protobuf::internal::kEmptyString) {
    strategy_id_ = new ::std::string;
  }
  return strategy_id_;
}
inline ::std::string* order_status::release_strategy_id() {
  clear_has_strategy_id();
  if (strategy_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strategy_id_;
    strategy_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void order_status::set_allocated_strategy_id(::std::string* strategy_id) {
  if (strategy_id_ != &::google::protobuf::internal::kEmptyString) {
    delete strategy_id_;
  }
  if (strategy_id) {
    set_has_strategy_id();
    strategy_id_ = strategy_id;
  } else {
    clear_has_strategy_id();
    strategy_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string symbol = 4;
inline bool order_status::has_symbol() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void order_status::set_has_symbol() {
  _has_bits_[0] |= 0x00000008u;
}
inline void order_status::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void order_status::clear_symbol() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    symbol_->clear();
  }
  clear_has_symbol();
}
inline const ::std::string& order_status::symbol() const {
  return *symbol_;
}
inline void order_status::set_symbol(const ::std::string& value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void order_status::set_symbol(const char* value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void order_status::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* order_status::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  return symbol_;
}
inline ::std::string* order_status::release_symbol() {
  clear_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = symbol_;
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void order_status::set_allocated_symbol(::std::string* symbol) {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (symbol) {
    set_has_symbol();
    symbol_ = symbol;
  } else {
    clear_has_symbol();
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .capkproto.side_t side = 5;
inline bool order_status::has_side() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void order_status::set_has_side() {
  _has_bits_[0] |= 0x00000010u;
}
inline void order_status::clear_has_side() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void order_status::clear_side() {
  side_ = 1;
  clear_has_side();
}
inline ::capkproto::side_t order_status::side() const {
  return static_cast< ::capkproto::side_t >(side_);
}
inline void order_status::set_side(::capkproto::side_t value) {
  assert(::capkproto::side_t_IsValid(value));
  set_has_side();
  side_ = value;
}

// optional string security_type = 6;
inline bool order_status::has_security_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void order_status::set_has_security_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void order_status::clear_has_security_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void order_status::clear_security_type() {
  if (security_type_ != &::google::protobuf::internal::kEmptyString) {
    security_type_->clear();
  }
  clear_has_security_type();
}
inline const ::std::string& order_status::security_type() const {
  return *security_type_;
}
inline void order_status::set_security_type(const ::std::string& value) {
  set_has_security_type();
  if (security_type_ == &::google::protobuf::internal::kEmptyString) {
    security_type_ = new ::std::string;
  }
  security_type_->assign(value);
}
inline void order_status::set_security_type(const char* value) {
  set_has_security_type();
  if (security_type_ == &::google::protobuf::internal::kEmptyString) {
    security_type_ = new ::std::string;
  }
  security_type_->assign(value);
}
inline void order_status::set_security_type(const char* value, size_t size) {
  set_has_security_type();
  if (security_type_ == &::google::protobuf::internal::kEmptyString) {
    security_type_ = new ::std::string;
  }
  security_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* order_status::mutable_security_type() {
  set_has_security_type();
  if (security_type_ == &::google::protobuf::internal::kEmptyString) {
    security_type_ = new ::std::string;
  }
  return security_type_;
}
inline ::std::string* order_status::release_security_type() {
  clear_has_security_type();
  if (security_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = security_type_;
    security_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void order_status::set_allocated_security_type(::std::string* security_type) {
  if (security_type_ != &::google::protobuf::internal::kEmptyString) {
    delete security_type_;
  }
  if (security_type) {
    set_has_security_type();
    security_type_ = security_type;
  } else {
    clear_has_security_type();
    security_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// group_no_orders

// optional bytes cl_order_id = 1;
inline bool group_no_orders::has_cl_order_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void group_no_orders::set_has_cl_order_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void group_no_orders::clear_has_cl_order_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void group_no_orders::clear_cl_order_id() {
  if (cl_order_id_ != &::google::protobuf::internal::kEmptyString) {
    cl_order_id_->clear();
  }
  clear_has_cl_order_id();
}
inline const ::std::string& group_no_orders::cl_order_id() const {
  return *cl_order_id_;
}
inline void group_no_orders::set_cl_order_id(const ::std::string& value) {
  set_has_cl_order_id();
  if (cl_order_id_ == &::google::protobuf::internal::kEmptyString) {
    cl_order_id_ = new ::std::string;
  }
  cl_order_id_->assign(value);
}
inline void group_no_orders::set_cl_order_id(const char* value) {
  set_has_cl_order_id();
  if (cl_order_id_ == &::google::protobuf::internal::kEmptyString) {
    cl_order_id_ = new ::std::string;
  }
  cl_order_id_->assign(value);
}
inline void group_no_orders::set_cl_order_id(const void* value, size_t size) {
  set_has_cl_order_id();
  if (cl_order_id_ == &::google::protobuf::internal::kEmptyString) {
    cl_order_id_ = new ::std::string;
  }
  cl_order_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* group_no_orders::mutable_cl_order_id() {
  set_has_cl_order_id();
  if (cl_order_id_ == &::google::protobuf::internal::kEmptyString) {
    cl_order_id_ = new ::std::string;
  }
  return cl_order_id_;
}
inline ::std::string* group_no_orders::release_cl_order_id() {
  clear_has_cl_order_id();
  if (cl_order_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cl_order_id_;
    cl_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void group_no_orders::set_allocated_cl_order_id(::std::string* cl_order_id) {
  if (cl_order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete cl_order_id_;
  }
  if (cl_order_id) {
    set_has_cl_order_id();
    cl_order_id_ = cl_order_id;
  } else {
    clear_has_cl_order_id();
    cl_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional double cum_qty = 2;
inline bool group_no_orders::has_cum_qty() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void group_no_orders::set_has_cum_qty() {
  _has_bits_[0] |= 0x00000002u;
}
inline void group_no_orders::clear_has_cum_qty() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void group_no_orders::clear_cum_qty() {
  cum_qty_ = 0;
  clear_has_cum_qty();
}
inline double group_no_orders::cum_qty() const {
  return cum_qty_;
}
inline void group_no_orders::set_cum_qty(double value) {
  set_has_cum_qty();
  cum_qty_ = value;
}

// optional sfixed32 ord_status = 3;
inline bool group_no_orders::has_ord_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void group_no_orders::set_has_ord_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void group_no_orders::clear_has_ord_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void group_no_orders::clear_ord_status() {
  ord_status_ = 0;
  clear_has_ord_status();
}
inline ::google::protobuf::int32 group_no_orders::ord_status() const {
  return ord_status_;
}
inline void group_no_orders::set_ord_status(::google::protobuf::int32 value) {
  set_has_ord_status();
  ord_status_ = value;
}

// optional double leaves_qty = 4;
inline bool group_no_orders::has_leaves_qty() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void group_no_orders::set_has_leaves_qty() {
  _has_bits_[0] |= 0x00000008u;
}
inline void group_no_orders::clear_has_leaves_qty() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void group_no_orders::clear_leaves_qty() {
  leaves_qty_ = 0;
  clear_has_leaves_qty();
}
inline double group_no_orders::leaves_qty() const {
  return leaves_qty_;
}
inline void group_no_orders::set_leaves_qty(double value) {
  set_has_leaves_qty();
  leaves_qty_ = value;
}

// optional double cxl_qty = 5;
inline bool group_no_orders::has_cxl_qty() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void group_no_orders::set_has_cxl_qty() {
  _has_bits_[0] |= 0x00000010u;
}
inline void group_no_orders::clear_has_cxl_qty() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void group_no_orders::clear_cxl_qty() {
  cxl_qty_ = 0;
  clear_has_cxl_qty();
}
inline double group_no_orders::cxl_qty() const {
  return cxl_qty_;
}
inline void group_no_orders::set_cxl_qty(double value) {
  set_has_cxl_qty();
  cxl_qty_ = value;
}

// optional sfixed32 time_in_force = 6;
inline bool group_no_orders::has_time_in_force() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void group_no_orders::set_has_time_in_force() {
  _has_bits_[0] |= 0x00000020u;
}
inline void group_no_orders::clear_has_time_in_force() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void group_no_orders::clear_time_in_force() {
  time_in_force_ = 0;
  clear_has_time_in_force();
}
inline ::google::protobuf::int32 group_no_orders::time_in_force() const {
  return time_in_force_;
}
inline void group_no_orders::set_time_in_force(::google::protobuf::int32 value) {
  set_has_time_in_force();
  time_in_force_ = value;
}

// optional double avg_px = 7;
inline bool group_no_orders::has_avg_px() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void group_no_orders::set_has_avg_px() {
  _has_bits_[0] |= 0x00000040u;
}
inline void group_no_orders::clear_has_avg_px() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void group_no_orders::clear_avg_px() {
  avg_px_ = 0;
  clear_has_avg_px();
}
inline double group_no_orders::avg_px() const {
  return avg_px_;
}
inline void group_no_orders::set_avg_px(double value) {
  set_has_avg_px();
  avg_px_ = value;
}

// optional string text = 8;
inline bool group_no_orders::has_text() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void group_no_orders::set_has_text() {
  _has_bits_[0] |= 0x00000080u;
}
inline void group_no_orders::clear_has_text() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void group_no_orders::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& group_no_orders::text() const {
  return *text_;
}
inline void group_no_orders::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void group_no_orders::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void group_no_orders::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* group_no_orders::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* group_no_orders::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void group_no_orders::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string order_id = 9;
inline bool group_no_orders::has_order_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void group_no_orders::set_has_order_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void group_no_orders::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void group_no_orders::clear_order_id() {
  if (order_id_ != &::google::protobuf::internal::kEmptyString) {
    order_id_->clear();
  }
  clear_has_order_id();
}
inline const ::std::string& group_no_orders::order_id() const {
  return *order_id_;
}
inline void group_no_orders::set_order_id(const ::std::string& value) {
  set_has_order_id();
  if (order_id_ == &::google::protobuf::internal::kEmptyString) {
    order_id_ = new ::std::string;
  }
  order_id_->assign(value);
}
inline void group_no_orders::set_order_id(const char* value) {
  set_has_order_id();
  if (order_id_ == &::google::protobuf::internal::kEmptyString) {
    order_id_ = new ::std::string;
  }
  order_id_->assign(value);
}
inline void group_no_orders::set_order_id(const char* value, size_t size) {
  set_has_order_id();
  if (order_id_ == &::google::protobuf::internal::kEmptyString) {
    order_id_ = new ::std::string;
  }
  order_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* group_no_orders::mutable_order_id() {
  set_has_order_id();
  if (order_id_ == &::google::protobuf::internal::kEmptyString) {
    order_id_ = new ::std::string;
  }
  return order_id_;
}
inline ::std::string* group_no_orders::release_order_id() {
  clear_has_order_id();
  if (order_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = order_id_;
    order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void group_no_orders::set_allocated_order_id(::std::string* order_id) {
  if (order_id_ != &::google::protobuf::internal::kEmptyString) {
    delete order_id_;
  }
  if (order_id) {
    set_has_order_id();
    order_id_ = order_id;
  } else {
    clear_has_order_id();
    order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string symbol = 10;
inline bool group_no_orders::has_symbol() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void group_no_orders::set_has_symbol() {
  _has_bits_[0] |= 0x00000200u;
}
inline void group_no_orders::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void group_no_orders::clear_symbol() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    symbol_->clear();
  }
  clear_has_symbol();
}
inline const ::std::string& group_no_orders::symbol() const {
  return *symbol_;
}
inline void group_no_orders::set_symbol(const ::std::string& value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void group_no_orders::set_symbol(const char* value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void group_no_orders::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* group_no_orders::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  return symbol_;
}
inline ::std::string* group_no_orders::release_symbol() {
  clear_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = symbol_;
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void group_no_orders::set_allocated_symbol(::std::string* symbol) {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (symbol) {
    set_has_symbol();
    symbol_ = symbol;
  } else {
    clear_has_symbol();
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .capkproto.side_t side = 11;
inline bool group_no_orders::has_side() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void group_no_orders::set_has_side() {
  _has_bits_[0] |= 0x00000400u;
}
inline void group_no_orders::clear_has_side() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void group_no_orders::clear_side() {
  side_ = 1;
  clear_has_side();
}
inline ::capkproto::side_t group_no_orders::side() const {
  return static_cast< ::capkproto::side_t >(side_);
}
inline void group_no_orders::set_side(::capkproto::side_t value) {
  assert(::capkproto::side_t_IsValid(value));
  set_has_side();
  side_ = value;
}

// optional sfixed32 ord_type = 12;
inline bool group_no_orders::has_ord_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void group_no_orders::set_has_ord_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void group_no_orders::clear_has_ord_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void group_no_orders::clear_ord_type() {
  ord_type_ = 0;
  clear_has_ord_type();
}
inline ::google::protobuf::int32 group_no_orders::ord_type() const {
  return ord_type_;
}
inline void group_no_orders::set_ord_type(::google::protobuf::int32 value) {
  set_has_ord_type();
  ord_type_ = value;
}

// -------------------------------------------------------------------

// list_status

// optional string list_id = 1;
inline bool list_status::has_list_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void list_status::set_has_list_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void list_status::clear_has_list_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void list_status::clear_list_id() {
  if (list_id_ != &::google::protobuf::internal::kEmptyString) {
    list_id_->clear();
  }
  clear_has_list_id();
}
inline const ::std::string& list_status::list_id() const {
  return *list_id_;
}
inline void list_status::set_list_id(const ::std::string& value) {
  set_has_list_id();
  if (list_id_ == &::google::protobuf::internal::kEmptyString) {
    list_id_ = new ::std::string;
  }
  list_id_->assign(value);
}
inline void list_status::set_list_id(const char* value) {
  set_has_list_id();
  if (list_id_ == &::google::protobuf::internal::kEmptyString) {
    list_id_ = new ::std::string;
  }
  list_id_->assign(value);
}
inline void list_status::set_list_id(const char* value, size_t size) {
  set_has_list_id();
  if (list_id_ == &::google::protobuf::internal::kEmptyString) {
    list_id_ = new ::std::string;
  }
  list_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* list_status::mutable_list_id() {
  set_has_list_id();
  if (list_id_ == &::google::protobuf::internal::kEmptyString) {
    list_id_ = new ::std::string;
  }
  return list_id_;
}
inline ::std::string* list_status::release_list_id() {
  clear_has_list_id();
  if (list_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = list_id_;
    list_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void list_status::set_allocated_list_id(::std::string* list_id) {
  if (list_id_ != &::google::protobuf::internal::kEmptyString) {
    delete list_id_;
  }
  if (list_id) {
    set_has_list_id();
    list_id_ = list_id;
  } else {
    clear_has_list_id();
    list_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional sfixed32 list_status_type = 2;
inline bool list_status::has_list_status_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void list_status::set_has_list_status_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void list_status::clear_has_list_status_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void list_status::clear_list_status_type() {
  list_status_type_ = 0;
  clear_has_list_status_type();
}
inline ::google::protobuf::int32 list_status::list_status_type() const {
  return list_status_type_;
}
inline void list_status::set_list_status_type(::google::protobuf::int32 value) {
  set_has_list_status_type();
  list_status_type_ = value;
}

// optional sfixed32 no_rpts = 3;
inline bool list_status::has_no_rpts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void list_status::set_has_no_rpts() {
  _has_bits_[0] |= 0x00000004u;
}
inline void list_status::clear_has_no_rpts() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void list_status::clear_no_rpts() {
  no_rpts_ = 0;
  clear_has_no_rpts();
}
inline ::google::protobuf::int32 list_status::no_rpts() const {
  return no_rpts_;
}
inline void list_status::set_no_rpts(::google::protobuf::int32 value) {
  set_has_no_rpts();
  no_rpts_ = value;
}

// optional sfixed32 list_order_status = 4;
inline bool list_status::has_list_order_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void list_status::set_has_list_order_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void list_status::clear_has_list_order_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void list_status::clear_list_order_status() {
  list_order_status_ = 0;
  clear_has_list_order_status();
}
inline ::google::protobuf::int32 list_status::list_order_status() const {
  return list_order_status_;
}
inline void list_status::set_list_order_status(::google::protobuf::int32 value) {
  set_has_list_order_status();
  list_order_status_ = value;
}

// optional sfixed32 rpt_seq = 5;
inline bool list_status::has_rpt_seq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void list_status::set_has_rpt_seq() {
  _has_bits_[0] |= 0x00000010u;
}
inline void list_status::clear_has_rpt_seq() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void list_status::clear_rpt_seq() {
  rpt_seq_ = 0;
  clear_has_rpt_seq();
}
inline ::google::protobuf::int32 list_status::rpt_seq() const {
  return rpt_seq_;
}
inline void list_status::set_rpt_seq(::google::protobuf::int32 value) {
  set_has_rpt_seq();
  rpt_seq_ = value;
}

// optional string text = 6;
inline bool list_status::has_text() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void list_status::set_has_text() {
  _has_bits_[0] |= 0x00000020u;
}
inline void list_status::clear_has_text() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void list_status::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& list_status::text() const {
  return *text_;
}
inline void list_status::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void list_status::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void list_status::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* list_status::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* list_status::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void list_status::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional sfixed32 tot_no_orders = 7;
inline bool list_status::has_tot_no_orders() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void list_status::set_has_tot_no_orders() {
  _has_bits_[0] |= 0x00000040u;
}
inline void list_status::clear_has_tot_no_orders() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void list_status::clear_tot_no_orders() {
  tot_no_orders_ = 0;
  clear_has_tot_no_orders();
}
inline ::google::protobuf::int32 list_status::tot_no_orders() const {
  return tot_no_orders_;
}
inline void list_status::set_tot_no_orders(::google::protobuf::int32 value) {
  set_has_tot_no_orders();
  tot_no_orders_ = value;
}

// repeated .capkproto.group_no_orders order_status_list = 9;
inline int list_status::order_status_list_size() const {
  return order_status_list_.size();
}
inline void list_status::clear_order_status_list() {
  order_status_list_.Clear();
}
inline const ::capkproto::group_no_orders& list_status::order_status_list(int index) const {
  return order_status_list_.Get(index);
}
inline ::capkproto::group_no_orders* list_status::mutable_order_status_list(int index) {
  return order_status_list_.Mutable(index);
}
inline ::capkproto::group_no_orders* list_status::add_order_status_list() {
  return order_status_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::capkproto::group_no_orders >&
list_status::order_status_list() const {
  return order_status_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::capkproto::group_no_orders >*
list_status::mutable_order_status_list() {
  return &order_status_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace capkproto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_order_5fstatus_2eproto__INCLUDED
