// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: position.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "position.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace capkproto {

namespace {

const ::google::protobuf::Descriptor* position_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  position_entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* position_entry_instrument_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  position_entry_instrument_reflection_ = NULL;
const ::google::protobuf::Descriptor* position_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  position_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_position_2eproto() {
  protobuf_AddDesc_position_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "position.proto");
  GOOGLE_CHECK(file != NULL);
  position_entry_descriptor_ = file->message_type(0);
  static const int position_entry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(position_entry, owned_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(position_entry, avg_price_),
  };
  position_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      position_entry_descriptor_,
      position_entry::default_instance_,
      position_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(position_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(position_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(position_entry));
  position_entry_instrument_descriptor_ = position_entry_descriptor_->nested_type(0);
  static const int position_entry_instrument_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(position_entry_instrument, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(position_entry_instrument, venue_id_),
  };
  position_entry_instrument_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      position_entry_instrument_descriptor_,
      position_entry_instrument::default_instance_,
      position_entry_instrument_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(position_entry_instrument, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(position_entry_instrument, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(position_entry_instrument));
  position_descriptor_ = file->message_type(1);
  static const int position_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(position, trade_),
  };
  position_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      position_descriptor_,
      position::default_instance_,
      position_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(position, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(position, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(position));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_position_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    position_entry_descriptor_, &position_entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    position_entry_instrument_descriptor_, &position_entry_instrument::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    position_descriptor_, &position::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_position_2eproto() {
  delete position_entry::default_instance_;
  delete position_entry_reflection_;
  delete position_entry_instrument::default_instance_;
  delete position_entry_instrument_reflection_;
  delete position::default_instance_;
  delete position_reflection_;
}

void protobuf_AddDesc_position_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::capkproto::protobuf_AddDesc_capk_5fglobals_2eproto();
  ::capkproto::protobuf_AddDesc_execution_5freport_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016position.proto\022\tcapkproto\032\022capk_global"
    "s.proto\032\026execution_report.proto\"f\n\016posit"
    "ion_entry\022\021\n\towned_qty\030\001 \001(\001\022\021\n\tavg_pric"
    "e\030\002 \001(\001\032.\n\ninstrument\022\016\n\006symbol\030\001 \001(\t\022\020\n"
    "\010venue_id\030\002 \001(\017\"6\n\010position\022*\n\005trade\030\001 \003"
    "(\0132\033.capkproto.execution_report", 231);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "position.proto", &protobuf_RegisterTypes);
  position_entry::default_instance_ = new position_entry();
  position_entry_instrument::default_instance_ = new position_entry_instrument();
  position::default_instance_ = new position();
  position_entry::default_instance_->InitAsDefaultInstance();
  position_entry_instrument::default_instance_->InitAsDefaultInstance();
  position::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_position_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_position_2eproto {
  StaticDescriptorInitializer_position_2eproto() {
    protobuf_AddDesc_position_2eproto();
  }
} static_descriptor_initializer_position_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int position_entry_instrument::kSymbolFieldNumber;
const int position_entry_instrument::kVenueIdFieldNumber;
#endif  // !_MSC_VER

position_entry_instrument::position_entry_instrument()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void position_entry_instrument::InitAsDefaultInstance() {
}

position_entry_instrument::position_entry_instrument(const position_entry_instrument& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void position_entry_instrument::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  venue_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

position_entry_instrument::~position_entry_instrument() {
  SharedDtor();
}

void position_entry_instrument::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
  }
}

void position_entry_instrument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* position_entry_instrument::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return position_entry_instrument_descriptor_;
}

const position_entry_instrument& position_entry_instrument::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_position_2eproto();
  return *default_instance_;
}

position_entry_instrument* position_entry_instrument::default_instance_ = NULL;

position_entry_instrument* position_entry_instrument::New() const {
  return new position_entry_instrument;
}

void position_entry_instrument::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    venue_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool position_entry_instrument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_venue_id;
        break;
      }

      // optional sfixed32 venue_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_venue_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &venue_id_)));
          set_has_venue_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void position_entry_instrument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->symbol(), output);
  }

  // optional sfixed32 venue_id = 2;
  if (has_venue_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->venue_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* position_entry_instrument::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional sfixed32 venue_id = 2;
  if (has_venue_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->venue_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int position_entry_instrument::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional sfixed32 venue_id = 2;
    if (has_venue_id()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void position_entry_instrument::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const position_entry_instrument* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const position_entry_instrument*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void position_entry_instrument::MergeFrom(const position_entry_instrument& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_venue_id()) {
      set_venue_id(from.venue_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void position_entry_instrument::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void position_entry_instrument::CopyFrom(const position_entry_instrument& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool position_entry_instrument::IsInitialized() const {

  return true;
}

void position_entry_instrument::Swap(position_entry_instrument* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(venue_id_, other->venue_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata position_entry_instrument::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = position_entry_instrument_descriptor_;
  metadata.reflection = position_entry_instrument_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int position_entry::kOwnedQtyFieldNumber;
const int position_entry::kAvgPriceFieldNumber;
#endif  // !_MSC_VER

position_entry::position_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void position_entry::InitAsDefaultInstance() {
}

position_entry::position_entry(const position_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void position_entry::SharedCtor() {
  _cached_size_ = 0;
  owned_qty_ = 0;
  avg_price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

position_entry::~position_entry() {
  SharedDtor();
}

void position_entry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void position_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* position_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return position_entry_descriptor_;
}

const position_entry& position_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_position_2eproto();
  return *default_instance_;
}

position_entry* position_entry::default_instance_ = NULL;

position_entry* position_entry::New() const {
  return new position_entry;
}

void position_entry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    owned_qty_ = 0;
    avg_price_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool position_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double owned_qty = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &owned_qty_)));
          set_has_owned_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_avg_price;
        break;
      }

      // optional double avg_price = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_avg_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avg_price_)));
          set_has_avg_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void position_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double owned_qty = 1;
  if (has_owned_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->owned_qty(), output);
  }

  // optional double avg_price = 2;
  if (has_avg_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->avg_price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* position_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double owned_qty = 1;
  if (has_owned_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->owned_qty(), target);
  }

  // optional double avg_price = 2;
  if (has_avg_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->avg_price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int position_entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double owned_qty = 1;
    if (has_owned_qty()) {
      total_size += 1 + 8;
    }

    // optional double avg_price = 2;
    if (has_avg_price()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void position_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const position_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const position_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void position_entry::MergeFrom(const position_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_owned_qty()) {
      set_owned_qty(from.owned_qty());
    }
    if (from.has_avg_price()) {
      set_avg_price(from.avg_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void position_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void position_entry::CopyFrom(const position_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool position_entry::IsInitialized() const {

  return true;
}

void position_entry::Swap(position_entry* other) {
  if (other != this) {
    std::swap(owned_qty_, other->owned_qty_);
    std::swap(avg_price_, other->avg_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata position_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = position_entry_descriptor_;
  metadata.reflection = position_entry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int position::kTradeFieldNumber;
#endif  // !_MSC_VER

position::position()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void position::InitAsDefaultInstance() {
}

position::position(const position& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void position::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

position::~position() {
  SharedDtor();
}

void position::SharedDtor() {
  if (this != default_instance_) {
  }
}

void position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* position::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return position_descriptor_;
}

const position& position::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_position_2eproto();
  return *default_instance_;
}

position* position::default_instance_ = NULL;

position* position::New() const {
  return new position;
}

void position::Clear() {
  trade_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .capkproto.execution_report trade = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_trade;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .capkproto.execution_report trade = 1;
  for (int i = 0; i < this->trade_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->trade(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* position::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .capkproto.execution_report trade = 1;
  for (int i = 0; i < this->trade_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->trade(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int position::ByteSize() const {
  int total_size = 0;

  // repeated .capkproto.execution_report trade = 1;
  total_size += 1 * this->trade_size();
  for (int i = 0; i < this->trade_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trade(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void position::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const position* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const position*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void position::MergeFrom(const position& from) {
  GOOGLE_CHECK_NE(&from, this);
  trade_.MergeFrom(from.trade_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void position::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void position::CopyFrom(const position& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool position::IsInitialized() const {

  return true;
}

void position::Swap(position* other) {
  if (other != this) {
    trade_.Swap(&other->trade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata position::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = position_descriptor_;
  metadata.reflection = position_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace capkproto

// @@protoc_insertion_point(global_scope)
