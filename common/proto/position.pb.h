// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: position.proto

#ifndef PROTOBUF_position_2eproto__INCLUDED
#define PROTOBUF_position_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "capk_globals.pb.h"
#include "execution_report.pb.h"
// @@protoc_insertion_point(includes)

namespace capkproto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_position_2eproto();
void protobuf_AssignDesc_position_2eproto();
void protobuf_ShutdownFile_position_2eproto();

class position_entry;
class position_entry_instrument;
class position;

// ===================================================================

class position_entry_instrument : public ::google::protobuf::Message {
 public:
  position_entry_instrument();
  virtual ~position_entry_instrument();

  position_entry_instrument(const position_entry_instrument& from);

  inline position_entry_instrument& operator=(const position_entry_instrument& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const position_entry_instrument& default_instance();

  void Swap(position_entry_instrument* other);

  // implements Message ----------------------------------------------

  position_entry_instrument* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const position_entry_instrument& from);
  void MergeFrom(const position_entry_instrument& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string symbol = 1;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  inline void set_allocated_symbol(::std::string* symbol);

  // optional sfixed32 venue_id = 2;
  inline bool has_venue_id() const;
  inline void clear_venue_id();
  static const int kVenueIdFieldNumber = 2;
  inline ::google::protobuf::int32 venue_id() const;
  inline void set_venue_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:capkproto.position_entry.instrument)
 private:
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_venue_id();
  inline void clear_has_venue_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* symbol_;
  ::google::protobuf::int32 venue_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_position_2eproto();
  friend void protobuf_AssignDesc_position_2eproto();
  friend void protobuf_ShutdownFile_position_2eproto();

  void InitAsDefaultInstance();
  static position_entry_instrument* default_instance_;
};
// -------------------------------------------------------------------

class position_entry : public ::google::protobuf::Message {
 public:
  position_entry();
  virtual ~position_entry();

  position_entry(const position_entry& from);

  inline position_entry& operator=(const position_entry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const position_entry& default_instance();

  void Swap(position_entry* other);

  // implements Message ----------------------------------------------

  position_entry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const position_entry& from);
  void MergeFrom(const position_entry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef position_entry_instrument instrument;

  // accessors -------------------------------------------------------

  // optional double owned_qty = 1;
  inline bool has_owned_qty() const;
  inline void clear_owned_qty();
  static const int kOwnedQtyFieldNumber = 1;
  inline double owned_qty() const;
  inline void set_owned_qty(double value);

  // optional double avg_price = 2;
  inline bool has_avg_price() const;
  inline void clear_avg_price();
  static const int kAvgPriceFieldNumber = 2;
  inline double avg_price() const;
  inline void set_avg_price(double value);

  // @@protoc_insertion_point(class_scope:capkproto.position_entry)
 private:
  inline void set_has_owned_qty();
  inline void clear_has_owned_qty();
  inline void set_has_avg_price();
  inline void clear_has_avg_price();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double owned_qty_;
  double avg_price_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_position_2eproto();
  friend void protobuf_AssignDesc_position_2eproto();
  friend void protobuf_ShutdownFile_position_2eproto();

  void InitAsDefaultInstance();
  static position_entry* default_instance_;
};
// -------------------------------------------------------------------

class position : public ::google::protobuf::Message {
 public:
  position();
  virtual ~position();

  position(const position& from);

  inline position& operator=(const position& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const position& default_instance();

  void Swap(position* other);

  // implements Message ----------------------------------------------

  position* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const position& from);
  void MergeFrom(const position& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .capkproto.execution_report trade = 1;
  inline int trade_size() const;
  inline void clear_trade();
  static const int kTradeFieldNumber = 1;
  inline const ::capkproto::execution_report& trade(int index) const;
  inline ::capkproto::execution_report* mutable_trade(int index);
  inline ::capkproto::execution_report* add_trade();
  inline const ::google::protobuf::RepeatedPtrField< ::capkproto::execution_report >&
      trade() const;
  inline ::google::protobuf::RepeatedPtrField< ::capkproto::execution_report >*
      mutable_trade();

  // @@protoc_insertion_point(class_scope:capkproto.position)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::capkproto::execution_report > trade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_position_2eproto();
  friend void protobuf_AssignDesc_position_2eproto();
  friend void protobuf_ShutdownFile_position_2eproto();

  void InitAsDefaultInstance();
  static position* default_instance_;
};
// ===================================================================


// ===================================================================

// position_entry_instrument

// optional string symbol = 1;
inline bool position_entry_instrument::has_symbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void position_entry_instrument::set_has_symbol() {
  _has_bits_[0] |= 0x00000001u;
}
inline void position_entry_instrument::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void position_entry_instrument::clear_symbol() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    symbol_->clear();
  }
  clear_has_symbol();
}
inline const ::std::string& position_entry_instrument::symbol() const {
  return *symbol_;
}
inline void position_entry_instrument::set_symbol(const ::std::string& value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void position_entry_instrument::set_symbol(const char* value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void position_entry_instrument::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* position_entry_instrument::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  return symbol_;
}
inline ::std::string* position_entry_instrument::release_symbol() {
  clear_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = symbol_;
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void position_entry_instrument::set_allocated_symbol(::std::string* symbol) {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (symbol) {
    set_has_symbol();
    symbol_ = symbol;
  } else {
    clear_has_symbol();
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional sfixed32 venue_id = 2;
inline bool position_entry_instrument::has_venue_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void position_entry_instrument::set_has_venue_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void position_entry_instrument::clear_has_venue_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void position_entry_instrument::clear_venue_id() {
  venue_id_ = 0;
  clear_has_venue_id();
}
inline ::google::protobuf::int32 position_entry_instrument::venue_id() const {
  return venue_id_;
}
inline void position_entry_instrument::set_venue_id(::google::protobuf::int32 value) {
  set_has_venue_id();
  venue_id_ = value;
}

// -------------------------------------------------------------------

// position_entry

// optional double owned_qty = 1;
inline bool position_entry::has_owned_qty() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void position_entry::set_has_owned_qty() {
  _has_bits_[0] |= 0x00000001u;
}
inline void position_entry::clear_has_owned_qty() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void position_entry::clear_owned_qty() {
  owned_qty_ = 0;
  clear_has_owned_qty();
}
inline double position_entry::owned_qty() const {
  return owned_qty_;
}
inline void position_entry::set_owned_qty(double value) {
  set_has_owned_qty();
  owned_qty_ = value;
}

// optional double avg_price = 2;
inline bool position_entry::has_avg_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void position_entry::set_has_avg_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void position_entry::clear_has_avg_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void position_entry::clear_avg_price() {
  avg_price_ = 0;
  clear_has_avg_price();
}
inline double position_entry::avg_price() const {
  return avg_price_;
}
inline void position_entry::set_avg_price(double value) {
  set_has_avg_price();
  avg_price_ = value;
}

// -------------------------------------------------------------------

// position

// repeated .capkproto.execution_report trade = 1;
inline int position::trade_size() const {
  return trade_.size();
}
inline void position::clear_trade() {
  trade_.Clear();
}
inline const ::capkproto::execution_report& position::trade(int index) const {
  return trade_.Get(index);
}
inline ::capkproto::execution_report* position::mutable_trade(int index) {
  return trade_.Mutable(index);
}
inline ::capkproto::execution_report* position::add_trade() {
  return trade_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::capkproto::execution_report >&
position::trade() const {
  return trade_;
}
inline ::google::protobuf::RepeatedPtrField< ::capkproto::execution_report >*
position::mutable_trade() {
  return &trade_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace capkproto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_position_2eproto__INCLUDED
