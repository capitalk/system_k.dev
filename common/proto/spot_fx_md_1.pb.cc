// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spot_fx_md_1.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "spot_fx_md_1.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace capkproto {

namespace {

const ::google::protobuf::Descriptor* order_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  order_t_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* order_t_side_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* order_t_quote_type_t_descriptor_ = NULL;
const ::google::protobuf::Descriptor* single_market_bbo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  single_market_bbo_reflection_ = NULL;
const ::google::protobuf::Descriptor* instrument_bbo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  instrument_bbo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_spot_5ffx_5fmd_5f1_2eproto() {
  protobuf_AddDesc_spot_5ffx_5fmd_5f1_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "spot_fx_md_1.proto");
  GOOGLE_CHECK(file != NULL);
  order_t_descriptor_ = file->message_type(0);
  static const int order_t_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_t, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_t, mic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_t, qid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_t, side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_t, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_t, price_),
  };
  order_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      order_t_descriptor_,
      order_t::default_instance_,
      order_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(order_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(order_t));
  order_t_side_t_descriptor_ = order_t_descriptor_->enum_type(0);
  order_t_quote_type_t_descriptor_ = order_t_descriptor_->enum_type(1);
  single_market_bbo_descriptor_ = file->message_type(1);
  static const int single_market_bbo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_market_bbo, venue_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_market_bbo, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_market_bbo, bid_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_market_bbo, bid_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_market_bbo, ask_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_market_bbo, ask_price_),
  };
  single_market_bbo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      single_market_bbo_descriptor_,
      single_market_bbo::default_instance_,
      single_market_bbo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_market_bbo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_market_bbo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(single_market_bbo));
  instrument_bbo_descriptor_ = file->message_type(2);
  static const int instrument_bbo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_bbo, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_bbo, bid_venue_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_bbo, bid_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_bbo, bid_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_bbo, ask_venue_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_bbo, ask_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_bbo, ask_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_bbo, sequence_),
  };
  instrument_bbo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      instrument_bbo_descriptor_,
      instrument_bbo::default_instance_,
      instrument_bbo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_bbo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(instrument_bbo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(instrument_bbo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_spot_5ffx_5fmd_5f1_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    order_t_descriptor_, &order_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    single_market_bbo_descriptor_, &single_market_bbo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    instrument_bbo_descriptor_, &instrument_bbo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_spot_5ffx_5fmd_5f1_2eproto() {
  delete order_t::default_instance_;
  delete order_t_reflection_;
  delete single_market_bbo::default_instance_;
  delete single_market_bbo_reflection_;
  delete instrument_bbo::default_instance_;
  delete instrument_bbo_reflection_;
}

void protobuf_AddDesc_spot_5ffx_5fmd_5f1_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::capkproto::protobuf_AddDesc_capk_5fglobals_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022spot_fx_md_1.proto\022\tcapkproto\032\022capk_gl"
    "obals.proto\"\302\001\n\007order_t\022\014\n\004name\030\001 \002(\t\022\013\n"
    "\003mic\030\002 \002(\t\022\013\n\003qid\030\003 \002(\017\022\'\n\004side\030\004 \002(\0162\031."
    "capkproto.order_t.side_t\022\014\n\004size\030\005 \002(\001\022\r"
    "\n\005price\030\006 \002(\001\"\032\n\006side_t\022\007\n\003BID\020\000\022\007\n\003ASK\020"
    "\001\"-\n\014quote_type_t\022\016\n\nINDICATIVE\020\000\022\r\n\tTRA"
    "DEABLE\020\001\"\177\n\021single_market_bbo\022\020\n\010venue_i"
    "d\030\001 \002(\017\022\016\n\006symbol\030\002 \002(\t\022\020\n\010bid_size\030\003 \002("
    "\001\022\021\n\tbid_price\030\004 \002(\001\022\020\n\010ask_size\030\005 \002(\001\022\021"
    "\n\task_price\030\006 \002(\001\"\250\001\n\016instrument_bbo\022\016\n\006"
    "symbol\030\001 \002(\t\022\024\n\014bid_venue_id\030\002 \002(\017\022\021\n\tbi"
    "d_price\030\003 \002(\001\022\020\n\010bid_size\030\004 \002(\001\022\024\n\014ask_v"
    "enue_id\030\005 \002(\017\022\021\n\task_price\030\006 \002(\001\022\020\n\010ask_"
    "size\030\007 \002(\001\022\020\n\010sequence\030\010 \001(\017", 548);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "spot_fx_md_1.proto", &protobuf_RegisterTypes);
  order_t::default_instance_ = new order_t();
  single_market_bbo::default_instance_ = new single_market_bbo();
  instrument_bbo::default_instance_ = new instrument_bbo();
  order_t::default_instance_->InitAsDefaultInstance();
  single_market_bbo::default_instance_->InitAsDefaultInstance();
  instrument_bbo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_spot_5ffx_5fmd_5f1_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_spot_5ffx_5fmd_5f1_2eproto {
  StaticDescriptorInitializer_spot_5ffx_5fmd_5f1_2eproto() {
    protobuf_AddDesc_spot_5ffx_5fmd_5f1_2eproto();
  }
} static_descriptor_initializer_spot_5ffx_5fmd_5f1_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* order_t_side_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return order_t_side_t_descriptor_;
}
bool order_t_side_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const order_t_side_t order_t::BID;
const order_t_side_t order_t::ASK;
const order_t_side_t order_t::side_t_MIN;
const order_t_side_t order_t::side_t_MAX;
const int order_t::side_t_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* order_t_quote_type_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return order_t_quote_type_t_descriptor_;
}
bool order_t_quote_type_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const order_t_quote_type_t order_t::INDICATIVE;
const order_t_quote_type_t order_t::TRADEABLE;
const order_t_quote_type_t order_t::quote_type_t_MIN;
const order_t_quote_type_t order_t::quote_type_t_MAX;
const int order_t::quote_type_t_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int order_t::kNameFieldNumber;
const int order_t::kMicFieldNumber;
const int order_t::kQidFieldNumber;
const int order_t::kSideFieldNumber;
const int order_t::kSizeFieldNumber;
const int order_t::kPriceFieldNumber;
#endif  // !_MSC_VER

order_t::order_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void order_t::InitAsDefaultInstance() {
}

order_t::order_t(const order_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void order_t::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qid_ = 0;
  side_ = 0;
  size_ = 0;
  price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

order_t::~order_t() {
  SharedDtor();
}

void order_t::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (mic_ != &::google::protobuf::internal::kEmptyString) {
    delete mic_;
  }
  if (this != default_instance_) {
  }
}

void order_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* order_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return order_t_descriptor_;
}

const order_t& order_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spot_5ffx_5fmd_5f1_2eproto();
  return *default_instance_;
}

order_t* order_t::default_instance_ = NULL;

order_t* order_t::New() const {
  return new order_t;
}

void order_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_mic()) {
      if (mic_ != &::google::protobuf::internal::kEmptyString) {
        mic_->clear();
      }
    }
    qid_ = 0;
    side_ = 0;
    size_ = 0;
    price_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool order_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mic;
        break;
      }

      // required string mic = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mic().data(), this->mic().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_qid;
        break;
      }

      // required sfixed32 qid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_qid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &qid_)));
          set_has_qid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_side;
        break;
      }

      // required .capkproto.order_t.side_t side = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_side:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::capkproto::order_t_side_t_IsValid(value)) {
            set_side(static_cast< ::capkproto::order_t_side_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_size;
        break;
      }

      // required double size = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_price;
        break;
      }

      // required double price = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void order_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required string mic = 2;
  if (has_mic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mic().data(), this->mic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->mic(), output);
  }

  // required sfixed32 qid = 3;
  if (has_qid()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->qid(), output);
  }

  // required .capkproto.order_t.side_t side = 4;
  if (has_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->side(), output);
  }

  // required double size = 5;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->size(), output);
  }

  // required double price = 6;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* order_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string mic = 2;
  if (has_mic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mic().data(), this->mic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mic(), target);
  }

  // required sfixed32 qid = 3;
  if (has_qid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->qid(), target);
  }

  // required .capkproto.order_t.side_t side = 4;
  if (has_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->side(), target);
  }

  // required double size = 5;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->size(), target);
  }

  // required double price = 6;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int order_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string mic = 2;
    if (has_mic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mic());
    }

    // required sfixed32 qid = 3;
    if (has_qid()) {
      total_size += 1 + 4;
    }

    // required .capkproto.order_t.side_t side = 4;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }

    // required double size = 5;
    if (has_size()) {
      total_size += 1 + 8;
    }

    // required double price = 6;
    if (has_price()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void order_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const order_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const order_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void order_t::MergeFrom(const order_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_mic()) {
      set_mic(from.mic());
    }
    if (from.has_qid()) {
      set_qid(from.qid());
    }
    if (from.has_side()) {
      set_side(from.side());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void order_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void order_t::CopyFrom(const order_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool order_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void order_t::Swap(order_t* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(mic_, other->mic_);
    std::swap(qid_, other->qid_);
    std::swap(side_, other->side_);
    std::swap(size_, other->size_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata order_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = order_t_descriptor_;
  metadata.reflection = order_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int single_market_bbo::kVenueIdFieldNumber;
const int single_market_bbo::kSymbolFieldNumber;
const int single_market_bbo::kBidSizeFieldNumber;
const int single_market_bbo::kBidPriceFieldNumber;
const int single_market_bbo::kAskSizeFieldNumber;
const int single_market_bbo::kAskPriceFieldNumber;
#endif  // !_MSC_VER

single_market_bbo::single_market_bbo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void single_market_bbo::InitAsDefaultInstance() {
}

single_market_bbo::single_market_bbo(const single_market_bbo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void single_market_bbo::SharedCtor() {
  _cached_size_ = 0;
  venue_id_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bid_size_ = 0;
  bid_price_ = 0;
  ask_size_ = 0;
  ask_price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

single_market_bbo::~single_market_bbo() {
  SharedDtor();
}

void single_market_bbo::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
  }
}

void single_market_bbo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* single_market_bbo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return single_market_bbo_descriptor_;
}

const single_market_bbo& single_market_bbo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spot_5ffx_5fmd_5f1_2eproto();
  return *default_instance_;
}

single_market_bbo* single_market_bbo::default_instance_ = NULL;

single_market_bbo* single_market_bbo::New() const {
  return new single_market_bbo;
}

void single_market_bbo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    venue_id_ = 0;
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    bid_size_ = 0;
    bid_price_ = 0;
    ask_size_ = 0;
    ask_price_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool single_market_bbo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sfixed32 venue_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &venue_id_)));
          set_has_venue_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_symbol;
        break;
      }

      // required string symbol = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_bid_size;
        break;
      }

      // required double bid_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bid_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bid_size_)));
          set_has_bid_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_bid_price;
        break;
      }

      // required double bid_price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bid_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bid_price_)));
          set_has_bid_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_ask_size;
        break;
      }

      // required double ask_size = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ask_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ask_size_)));
          set_has_ask_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_ask_price;
        break;
      }

      // required double ask_price = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ask_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ask_price_)));
          set_has_ask_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void single_market_bbo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sfixed32 venue_id = 1;
  if (has_venue_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->venue_id(), output);
  }

  // required string symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->symbol(), output);
  }

  // required double bid_size = 3;
  if (has_bid_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->bid_size(), output);
  }

  // required double bid_price = 4;
  if (has_bid_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->bid_price(), output);
  }

  // required double ask_size = 5;
  if (has_ask_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ask_size(), output);
  }

  // required double ask_price = 6;
  if (has_ask_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->ask_price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* single_market_bbo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sfixed32 venue_id = 1;
  if (has_venue_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->venue_id(), target);
  }

  // required string symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->symbol(), target);
  }

  // required double bid_size = 3;
  if (has_bid_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->bid_size(), target);
  }

  // required double bid_price = 4;
  if (has_bid_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->bid_price(), target);
  }

  // required double ask_size = 5;
  if (has_ask_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ask_size(), target);
  }

  // required double ask_price = 6;
  if (has_ask_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->ask_price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int single_market_bbo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sfixed32 venue_id = 1;
    if (has_venue_id()) {
      total_size += 1 + 4;
    }

    // required string symbol = 2;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // required double bid_size = 3;
    if (has_bid_size()) {
      total_size += 1 + 8;
    }

    // required double bid_price = 4;
    if (has_bid_price()) {
      total_size += 1 + 8;
    }

    // required double ask_size = 5;
    if (has_ask_size()) {
      total_size += 1 + 8;
    }

    // required double ask_price = 6;
    if (has_ask_price()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void single_market_bbo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const single_market_bbo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const single_market_bbo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void single_market_bbo::MergeFrom(const single_market_bbo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_venue_id()) {
      set_venue_id(from.venue_id());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_bid_size()) {
      set_bid_size(from.bid_size());
    }
    if (from.has_bid_price()) {
      set_bid_price(from.bid_price());
    }
    if (from.has_ask_size()) {
      set_ask_size(from.ask_size());
    }
    if (from.has_ask_price()) {
      set_ask_price(from.ask_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void single_market_bbo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void single_market_bbo::CopyFrom(const single_market_bbo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool single_market_bbo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void single_market_bbo::Swap(single_market_bbo* other) {
  if (other != this) {
    std::swap(venue_id_, other->venue_id_);
    std::swap(symbol_, other->symbol_);
    std::swap(bid_size_, other->bid_size_);
    std::swap(bid_price_, other->bid_price_);
    std::swap(ask_size_, other->ask_size_);
    std::swap(ask_price_, other->ask_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata single_market_bbo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = single_market_bbo_descriptor_;
  metadata.reflection = single_market_bbo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int instrument_bbo::kSymbolFieldNumber;
const int instrument_bbo::kBidVenueIdFieldNumber;
const int instrument_bbo::kBidPriceFieldNumber;
const int instrument_bbo::kBidSizeFieldNumber;
const int instrument_bbo::kAskVenueIdFieldNumber;
const int instrument_bbo::kAskPriceFieldNumber;
const int instrument_bbo::kAskSizeFieldNumber;
const int instrument_bbo::kSequenceFieldNumber;
#endif  // !_MSC_VER

instrument_bbo::instrument_bbo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void instrument_bbo::InitAsDefaultInstance() {
}

instrument_bbo::instrument_bbo(const instrument_bbo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void instrument_bbo::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bid_venue_id_ = 0;
  bid_price_ = 0;
  bid_size_ = 0;
  ask_venue_id_ = 0;
  ask_price_ = 0;
  ask_size_ = 0;
  sequence_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

instrument_bbo::~instrument_bbo() {
  SharedDtor();
}

void instrument_bbo::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
  }
}

void instrument_bbo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* instrument_bbo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return instrument_bbo_descriptor_;
}

const instrument_bbo& instrument_bbo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spot_5ffx_5fmd_5f1_2eproto();
  return *default_instance_;
}

instrument_bbo* instrument_bbo::default_instance_ = NULL;

instrument_bbo* instrument_bbo::New() const {
  return new instrument_bbo;
}

void instrument_bbo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    bid_venue_id_ = 0;
    bid_price_ = 0;
    bid_size_ = 0;
    ask_venue_id_ = 0;
    ask_price_ = 0;
    ask_size_ = 0;
    sequence_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool instrument_bbo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string symbol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_bid_venue_id;
        break;
      }

      // required sfixed32 bid_venue_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bid_venue_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &bid_venue_id_)));
          set_has_bid_venue_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_bid_price;
        break;
      }

      // required double bid_price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bid_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bid_price_)));
          set_has_bid_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_bid_size;
        break;
      }

      // required double bid_size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bid_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bid_size_)));
          set_has_bid_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_ask_venue_id;
        break;
      }

      // required sfixed32 ask_venue_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ask_venue_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &ask_venue_id_)));
          set_has_ask_venue_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_ask_price;
        break;
      }

      // required double ask_price = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ask_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ask_price_)));
          set_has_ask_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_ask_size;
        break;
      }

      // required double ask_size = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ask_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ask_size_)));
          set_has_ask_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_sequence;
        break;
      }

      // optional sfixed32 sequence = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void instrument_bbo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->symbol(), output);
  }

  // required sfixed32 bid_venue_id = 2;
  if (has_bid_venue_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->bid_venue_id(), output);
  }

  // required double bid_price = 3;
  if (has_bid_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->bid_price(), output);
  }

  // required double bid_size = 4;
  if (has_bid_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->bid_size(), output);
  }

  // required sfixed32 ask_venue_id = 5;
  if (has_ask_venue_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(5, this->ask_venue_id(), output);
  }

  // required double ask_price = 6;
  if (has_ask_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->ask_price(), output);
  }

  // required double ask_size = 7;
  if (has_ask_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->ask_size(), output);
  }

  // optional sfixed32 sequence = 8;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(8, this->sequence(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* instrument_bbo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // required sfixed32 bid_venue_id = 2;
  if (has_bid_venue_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->bid_venue_id(), target);
  }

  // required double bid_price = 3;
  if (has_bid_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->bid_price(), target);
  }

  // required double bid_size = 4;
  if (has_bid_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->bid_size(), target);
  }

  // required sfixed32 ask_venue_id = 5;
  if (has_ask_venue_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(5, this->ask_venue_id(), target);
  }

  // required double ask_price = 6;
  if (has_ask_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->ask_price(), target);
  }

  // required double ask_size = 7;
  if (has_ask_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->ask_size(), target);
  }

  // optional sfixed32 sequence = 8;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(8, this->sequence(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int instrument_bbo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // required sfixed32 bid_venue_id = 2;
    if (has_bid_venue_id()) {
      total_size += 1 + 4;
    }

    // required double bid_price = 3;
    if (has_bid_price()) {
      total_size += 1 + 8;
    }

    // required double bid_size = 4;
    if (has_bid_size()) {
      total_size += 1 + 8;
    }

    // required sfixed32 ask_venue_id = 5;
    if (has_ask_venue_id()) {
      total_size += 1 + 4;
    }

    // required double ask_price = 6;
    if (has_ask_price()) {
      total_size += 1 + 8;
    }

    // required double ask_size = 7;
    if (has_ask_size()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 sequence = 8;
    if (has_sequence()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void instrument_bbo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const instrument_bbo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const instrument_bbo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void instrument_bbo::MergeFrom(const instrument_bbo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_bid_venue_id()) {
      set_bid_venue_id(from.bid_venue_id());
    }
    if (from.has_bid_price()) {
      set_bid_price(from.bid_price());
    }
    if (from.has_bid_size()) {
      set_bid_size(from.bid_size());
    }
    if (from.has_ask_venue_id()) {
      set_ask_venue_id(from.ask_venue_id());
    }
    if (from.has_ask_price()) {
      set_ask_price(from.ask_price());
    }
    if (from.has_ask_size()) {
      set_ask_size(from.ask_size());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void instrument_bbo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void instrument_bbo::CopyFrom(const instrument_bbo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool instrument_bbo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void instrument_bbo::Swap(instrument_bbo* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(bid_venue_id_, other->bid_venue_id_);
    std::swap(bid_price_, other->bid_price_);
    std::swap(bid_size_, other->bid_size_);
    std::swap(ask_venue_id_, other->ask_venue_id_);
    std::swap(ask_price_, other->ask_price_);
    std::swap(ask_size_, other->ask_size_);
    std::swap(sequence_, other->sequence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata instrument_bbo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = instrument_bbo_descriptor_;
  metadata.reflection = instrument_bbo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace capkproto

// @@protoc_insertion_point(global_scope)
