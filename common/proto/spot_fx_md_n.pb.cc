// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spot_fx_md_n.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "spot_fx_md_n.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace capkproto {

namespace {

const ::google::protobuf::Descriptor* single_market_layer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  single_market_layer_reflection_ = NULL;
const ::google::protobuf::Descriptor* single_market_level_1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  single_market_level_1_reflection_ = NULL;
const ::google::protobuf::Descriptor* single_market_level_n_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  single_market_level_n_reflection_ = NULL;
const ::google::protobuf::Descriptor* multi_market_instrument_layer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  multi_market_instrument_layer_reflection_ = NULL;
const ::google::protobuf::Descriptor* multi_market_instrument_level_1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  multi_market_instrument_level_1_reflection_ = NULL;
const ::google::protobuf::Descriptor* multi_market_level_n_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  multi_market_level_n_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_spot_5ffx_5fmd_5fn_2eproto() {
  protobuf_AddDesc_spot_5ffx_5fmd_5fn_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "spot_fx_md_n.proto");
  GOOGLE_CHECK(file != NULL);
  single_market_layer_descriptor_ = file->message_type(0);
  static const int single_market_layer_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_market_layer, venue_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_market_layer, bid_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_market_layer, bid_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_market_layer, ask_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_market_layer, ask_price_),
  };
  single_market_layer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      single_market_layer_descriptor_,
      single_market_layer::default_instance_,
      single_market_layer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_market_layer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_market_layer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(single_market_layer));
  single_market_level_1_descriptor_ = file->message_type(1);
  static const int single_market_level_1_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_market_level_1, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_market_level_1, layer_),
  };
  single_market_level_1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      single_market_level_1_descriptor_,
      single_market_level_1::default_instance_,
      single_market_level_1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_market_level_1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_market_level_1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(single_market_level_1));
  single_market_level_n_descriptor_ = file->message_type(2);
  static const int single_market_level_n_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_market_level_n, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_market_level_n, layers_),
  };
  single_market_level_n_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      single_market_level_n_descriptor_,
      single_market_level_n::default_instance_,
      single_market_level_n_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_market_level_n, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(single_market_level_n, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(single_market_level_n));
  multi_market_instrument_layer_descriptor_ = file->message_type(3);
  static const int multi_market_instrument_layer_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(multi_market_instrument_layer, bid_venue_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(multi_market_instrument_layer, bid_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(multi_market_instrument_layer, bid_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(multi_market_instrument_layer, ask_venue_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(multi_market_instrument_layer, ask_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(multi_market_instrument_layer, ask_size_),
  };
  multi_market_instrument_layer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      multi_market_instrument_layer_descriptor_,
      multi_market_instrument_layer::default_instance_,
      multi_market_instrument_layer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(multi_market_instrument_layer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(multi_market_instrument_layer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(multi_market_instrument_layer));
  multi_market_instrument_level_1_descriptor_ = file->message_type(4);
  static const int multi_market_instrument_level_1_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(multi_market_instrument_level_1, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(multi_market_instrument_level_1, layer_),
  };
  multi_market_instrument_level_1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      multi_market_instrument_level_1_descriptor_,
      multi_market_instrument_level_1::default_instance_,
      multi_market_instrument_level_1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(multi_market_instrument_level_1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(multi_market_instrument_level_1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(multi_market_instrument_level_1));
  multi_market_level_n_descriptor_ = file->message_type(5);
  static const int multi_market_level_n_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(multi_market_level_n, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(multi_market_level_n, layers_),
  };
  multi_market_level_n_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      multi_market_level_n_descriptor_,
      multi_market_level_n::default_instance_,
      multi_market_level_n_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(multi_market_level_n, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(multi_market_level_n, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(multi_market_level_n));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_spot_5ffx_5fmd_5fn_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    single_market_layer_descriptor_, &single_market_layer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    single_market_level_1_descriptor_, &single_market_level_1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    single_market_level_n_descriptor_, &single_market_level_n::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    multi_market_instrument_layer_descriptor_, &multi_market_instrument_layer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    multi_market_instrument_level_1_descriptor_, &multi_market_instrument_level_1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    multi_market_level_n_descriptor_, &multi_market_level_n::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_spot_5ffx_5fmd_5fn_2eproto() {
  delete single_market_layer::default_instance_;
  delete single_market_layer_reflection_;
  delete single_market_level_1::default_instance_;
  delete single_market_level_1_reflection_;
  delete single_market_level_n::default_instance_;
  delete single_market_level_n_reflection_;
  delete multi_market_instrument_layer::default_instance_;
  delete multi_market_instrument_layer_reflection_;
  delete multi_market_instrument_level_1::default_instance_;
  delete multi_market_instrument_level_1_reflection_;
  delete multi_market_level_n::default_instance_;
  delete multi_market_level_n_reflection_;
}

void protobuf_AddDesc_spot_5ffx_5fmd_5fn_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::capkproto::protobuf_AddDesc_capk_5fglobals_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022spot_fx_md_n.proto\022\tcapkproto\032\022capk_gl"
    "obals.proto\"q\n\023single_market_layer\022\020\n\010ve"
    "nue_id\030\002 \002(\017\022\020\n\010bid_size\030\003 \002(\001\022\021\n\tbid_pr"
    "ice\030\004 \002(\001\022\020\n\010ask_size\030\005 \002(\001\022\021\n\task_price"
    "\030\006 \002(\001\"V\n\025single_market_level_1\022\016\n\006symbo"
    "l\030\001 \002(\t\022-\n\005layer\030\002 \002(\0132\036.capkproto.singl"
    "e_market_layer\"W\n\025single_market_level_n\022"
    "\016\n\006symbol\030\001 \002(\t\022.\n\006layers\030\002 \003(\0132\036.capkpr"
    "oto.single_market_layer\"\225\001\n\035multi_market"
    "_instrument_layer\022\024\n\014bid_venue_id\030\002 \002(\017\022"
    "\021\n\tbid_price\030\003 \002(\001\022\020\n\010bid_size\030\004 \002(\001\022\024\n\014"
    "ask_venue_id\030\005 \002(\017\022\021\n\task_price\030\006 \002(\001\022\020\n"
    "\010ask_size\030\007 \002(\001\"j\n\037multi_market_instrume"
    "nt_level_1\022\016\n\006symbol\030\001 \002(\t\0227\n\005layer\030\002 \002("
    "\0132(.capkproto.multi_market_instrument_la"
    "yer\"`\n\024multi_market_level_n\022\016\n\006symbol\030\001 "
    "\002(\t\0228\n\006layers\030\002 \003(\0132(.capkproto.multi_ma"
    "rket_instrument_layer", 701);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "spot_fx_md_n.proto", &protobuf_RegisterTypes);
  single_market_layer::default_instance_ = new single_market_layer();
  single_market_level_1::default_instance_ = new single_market_level_1();
  single_market_level_n::default_instance_ = new single_market_level_n();
  multi_market_instrument_layer::default_instance_ = new multi_market_instrument_layer();
  multi_market_instrument_level_1::default_instance_ = new multi_market_instrument_level_1();
  multi_market_level_n::default_instance_ = new multi_market_level_n();
  single_market_layer::default_instance_->InitAsDefaultInstance();
  single_market_level_1::default_instance_->InitAsDefaultInstance();
  single_market_level_n::default_instance_->InitAsDefaultInstance();
  multi_market_instrument_layer::default_instance_->InitAsDefaultInstance();
  multi_market_instrument_level_1::default_instance_->InitAsDefaultInstance();
  multi_market_level_n::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_spot_5ffx_5fmd_5fn_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_spot_5ffx_5fmd_5fn_2eproto {
  StaticDescriptorInitializer_spot_5ffx_5fmd_5fn_2eproto() {
    protobuf_AddDesc_spot_5ffx_5fmd_5fn_2eproto();
  }
} static_descriptor_initializer_spot_5ffx_5fmd_5fn_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int single_market_layer::kVenueIdFieldNumber;
const int single_market_layer::kBidSizeFieldNumber;
const int single_market_layer::kBidPriceFieldNumber;
const int single_market_layer::kAskSizeFieldNumber;
const int single_market_layer::kAskPriceFieldNumber;
#endif  // !_MSC_VER

single_market_layer::single_market_layer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void single_market_layer::InitAsDefaultInstance() {
}

single_market_layer::single_market_layer(const single_market_layer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void single_market_layer::SharedCtor() {
  _cached_size_ = 0;
  venue_id_ = 0;
  bid_size_ = 0;
  bid_price_ = 0;
  ask_size_ = 0;
  ask_price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

single_market_layer::~single_market_layer() {
  SharedDtor();
}

void single_market_layer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void single_market_layer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* single_market_layer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return single_market_layer_descriptor_;
}

const single_market_layer& single_market_layer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spot_5ffx_5fmd_5fn_2eproto();
  return *default_instance_;
}

single_market_layer* single_market_layer::default_instance_ = NULL;

single_market_layer* single_market_layer::New() const {
  return new single_market_layer;
}

void single_market_layer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    venue_id_ = 0;
    bid_size_ = 0;
    bid_price_ = 0;
    ask_size_ = 0;
    ask_price_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool single_market_layer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sfixed32 venue_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &venue_id_)));
          set_has_venue_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_bid_size;
        break;
      }

      // required double bid_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bid_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bid_size_)));
          set_has_bid_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_bid_price;
        break;
      }

      // required double bid_price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bid_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bid_price_)));
          set_has_bid_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_ask_size;
        break;
      }

      // required double ask_size = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ask_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ask_size_)));
          set_has_ask_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_ask_price;
        break;
      }

      // required double ask_price = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ask_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ask_price_)));
          set_has_ask_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void single_market_layer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sfixed32 venue_id = 2;
  if (has_venue_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->venue_id(), output);
  }

  // required double bid_size = 3;
  if (has_bid_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->bid_size(), output);
  }

  // required double bid_price = 4;
  if (has_bid_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->bid_price(), output);
  }

  // required double ask_size = 5;
  if (has_ask_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ask_size(), output);
  }

  // required double ask_price = 6;
  if (has_ask_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->ask_price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* single_market_layer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sfixed32 venue_id = 2;
  if (has_venue_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->venue_id(), target);
  }

  // required double bid_size = 3;
  if (has_bid_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->bid_size(), target);
  }

  // required double bid_price = 4;
  if (has_bid_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->bid_price(), target);
  }

  // required double ask_size = 5;
  if (has_ask_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ask_size(), target);
  }

  // required double ask_price = 6;
  if (has_ask_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->ask_price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int single_market_layer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sfixed32 venue_id = 2;
    if (has_venue_id()) {
      total_size += 1 + 4;
    }

    // required double bid_size = 3;
    if (has_bid_size()) {
      total_size += 1 + 8;
    }

    // required double bid_price = 4;
    if (has_bid_price()) {
      total_size += 1 + 8;
    }

    // required double ask_size = 5;
    if (has_ask_size()) {
      total_size += 1 + 8;
    }

    // required double ask_price = 6;
    if (has_ask_price()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void single_market_layer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const single_market_layer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const single_market_layer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void single_market_layer::MergeFrom(const single_market_layer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_venue_id()) {
      set_venue_id(from.venue_id());
    }
    if (from.has_bid_size()) {
      set_bid_size(from.bid_size());
    }
    if (from.has_bid_price()) {
      set_bid_price(from.bid_price());
    }
    if (from.has_ask_size()) {
      set_ask_size(from.ask_size());
    }
    if (from.has_ask_price()) {
      set_ask_price(from.ask_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void single_market_layer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void single_market_layer::CopyFrom(const single_market_layer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool single_market_layer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void single_market_layer::Swap(single_market_layer* other) {
  if (other != this) {
    std::swap(venue_id_, other->venue_id_);
    std::swap(bid_size_, other->bid_size_);
    std::swap(bid_price_, other->bid_price_);
    std::swap(ask_size_, other->ask_size_);
    std::swap(ask_price_, other->ask_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata single_market_layer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = single_market_layer_descriptor_;
  metadata.reflection = single_market_layer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int single_market_level_1::kSymbolFieldNumber;
const int single_market_level_1::kLayerFieldNumber;
#endif  // !_MSC_VER

single_market_level_1::single_market_level_1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void single_market_level_1::InitAsDefaultInstance() {
  layer_ = const_cast< ::capkproto::single_market_layer*>(&::capkproto::single_market_layer::default_instance());
}

single_market_level_1::single_market_level_1(const single_market_level_1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void single_market_level_1::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  layer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

single_market_level_1::~single_market_level_1() {
  SharedDtor();
}

void single_market_level_1::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
    delete layer_;
  }
}

void single_market_level_1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* single_market_level_1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return single_market_level_1_descriptor_;
}

const single_market_level_1& single_market_level_1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spot_5ffx_5fmd_5fn_2eproto();
  return *default_instance_;
}

single_market_level_1* single_market_level_1::default_instance_ = NULL;

single_market_level_1* single_market_level_1::New() const {
  return new single_market_level_1;
}

void single_market_level_1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    if (has_layer()) {
      if (layer_ != NULL) layer_->::capkproto::single_market_layer::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool single_market_level_1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string symbol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_layer;
        break;
      }

      // required .capkproto.single_market_layer layer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_layer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_layer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void single_market_level_1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->symbol(), output);
  }

  // required .capkproto.single_market_layer layer = 2;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->layer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* single_market_level_1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // required .capkproto.single_market_layer layer = 2;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->layer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int single_market_level_1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // required .capkproto.single_market_layer layer = 2;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->layer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void single_market_level_1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const single_market_level_1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const single_market_level_1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void single_market_level_1::MergeFrom(const single_market_level_1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_layer()) {
      mutable_layer()->::capkproto::single_market_layer::MergeFrom(from.layer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void single_market_level_1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void single_market_level_1::CopyFrom(const single_market_level_1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool single_market_level_1::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_layer()) {
    if (!this->layer().IsInitialized()) return false;
  }
  return true;
}

void single_market_level_1::Swap(single_market_level_1* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(layer_, other->layer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata single_market_level_1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = single_market_level_1_descriptor_;
  metadata.reflection = single_market_level_1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int single_market_level_n::kSymbolFieldNumber;
const int single_market_level_n::kLayersFieldNumber;
#endif  // !_MSC_VER

single_market_level_n::single_market_level_n()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void single_market_level_n::InitAsDefaultInstance() {
}

single_market_level_n::single_market_level_n(const single_market_level_n& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void single_market_level_n::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

single_market_level_n::~single_market_level_n() {
  SharedDtor();
}

void single_market_level_n::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
  }
}

void single_market_level_n::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* single_market_level_n::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return single_market_level_n_descriptor_;
}

const single_market_level_n& single_market_level_n::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spot_5ffx_5fmd_5fn_2eproto();
  return *default_instance_;
}

single_market_level_n* single_market_level_n::default_instance_ = NULL;

single_market_level_n* single_market_level_n::New() const {
  return new single_market_level_n;
}

void single_market_level_n::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
  }
  layers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool single_market_level_n::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string symbol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_layers;
        break;
      }

      // repeated .capkproto.single_market_layer layers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_layers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_layers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_layers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void single_market_level_n::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->symbol(), output);
  }

  // repeated .capkproto.single_market_layer layers = 2;
  for (int i = 0; i < this->layers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->layers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* single_market_level_n::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // repeated .capkproto.single_market_layer layers = 2;
  for (int i = 0; i < this->layers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->layers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int single_market_level_n::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

  }
  // repeated .capkproto.single_market_layer layers = 2;
  total_size += 1 * this->layers_size();
  for (int i = 0; i < this->layers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->layers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void single_market_level_n::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const single_market_level_n* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const single_market_level_n*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void single_market_level_n::MergeFrom(const single_market_level_n& from) {
  GOOGLE_CHECK_NE(&from, this);
  layers_.MergeFrom(from.layers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void single_market_level_n::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void single_market_level_n::CopyFrom(const single_market_level_n& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool single_market_level_n::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < layers_size(); i++) {
    if (!this->layers(i).IsInitialized()) return false;
  }
  return true;
}

void single_market_level_n::Swap(single_market_level_n* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    layers_.Swap(&other->layers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata single_market_level_n::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = single_market_level_n_descriptor_;
  metadata.reflection = single_market_level_n_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int multi_market_instrument_layer::kBidVenueIdFieldNumber;
const int multi_market_instrument_layer::kBidPriceFieldNumber;
const int multi_market_instrument_layer::kBidSizeFieldNumber;
const int multi_market_instrument_layer::kAskVenueIdFieldNumber;
const int multi_market_instrument_layer::kAskPriceFieldNumber;
const int multi_market_instrument_layer::kAskSizeFieldNumber;
#endif  // !_MSC_VER

multi_market_instrument_layer::multi_market_instrument_layer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void multi_market_instrument_layer::InitAsDefaultInstance() {
}

multi_market_instrument_layer::multi_market_instrument_layer(const multi_market_instrument_layer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void multi_market_instrument_layer::SharedCtor() {
  _cached_size_ = 0;
  bid_venue_id_ = 0;
  bid_price_ = 0;
  bid_size_ = 0;
  ask_venue_id_ = 0;
  ask_price_ = 0;
  ask_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

multi_market_instrument_layer::~multi_market_instrument_layer() {
  SharedDtor();
}

void multi_market_instrument_layer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void multi_market_instrument_layer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* multi_market_instrument_layer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return multi_market_instrument_layer_descriptor_;
}

const multi_market_instrument_layer& multi_market_instrument_layer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spot_5ffx_5fmd_5fn_2eproto();
  return *default_instance_;
}

multi_market_instrument_layer* multi_market_instrument_layer::default_instance_ = NULL;

multi_market_instrument_layer* multi_market_instrument_layer::New() const {
  return new multi_market_instrument_layer;
}

void multi_market_instrument_layer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bid_venue_id_ = 0;
    bid_price_ = 0;
    bid_size_ = 0;
    ask_venue_id_ = 0;
    ask_price_ = 0;
    ask_size_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool multi_market_instrument_layer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sfixed32 bid_venue_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &bid_venue_id_)));
          set_has_bid_venue_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_bid_price;
        break;
      }

      // required double bid_price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bid_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bid_price_)));
          set_has_bid_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_bid_size;
        break;
      }

      // required double bid_size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bid_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bid_size_)));
          set_has_bid_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_ask_venue_id;
        break;
      }

      // required sfixed32 ask_venue_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ask_venue_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &ask_venue_id_)));
          set_has_ask_venue_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_ask_price;
        break;
      }

      // required double ask_price = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ask_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ask_price_)));
          set_has_ask_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_ask_size;
        break;
      }

      // required double ask_size = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ask_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ask_size_)));
          set_has_ask_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void multi_market_instrument_layer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sfixed32 bid_venue_id = 2;
  if (has_bid_venue_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->bid_venue_id(), output);
  }

  // required double bid_price = 3;
  if (has_bid_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->bid_price(), output);
  }

  // required double bid_size = 4;
  if (has_bid_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->bid_size(), output);
  }

  // required sfixed32 ask_venue_id = 5;
  if (has_ask_venue_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(5, this->ask_venue_id(), output);
  }

  // required double ask_price = 6;
  if (has_ask_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->ask_price(), output);
  }

  // required double ask_size = 7;
  if (has_ask_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->ask_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* multi_market_instrument_layer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sfixed32 bid_venue_id = 2;
  if (has_bid_venue_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->bid_venue_id(), target);
  }

  // required double bid_price = 3;
  if (has_bid_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->bid_price(), target);
  }

  // required double bid_size = 4;
  if (has_bid_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->bid_size(), target);
  }

  // required sfixed32 ask_venue_id = 5;
  if (has_ask_venue_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(5, this->ask_venue_id(), target);
  }

  // required double ask_price = 6;
  if (has_ask_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->ask_price(), target);
  }

  // required double ask_size = 7;
  if (has_ask_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->ask_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int multi_market_instrument_layer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sfixed32 bid_venue_id = 2;
    if (has_bid_venue_id()) {
      total_size += 1 + 4;
    }

    // required double bid_price = 3;
    if (has_bid_price()) {
      total_size += 1 + 8;
    }

    // required double bid_size = 4;
    if (has_bid_size()) {
      total_size += 1 + 8;
    }

    // required sfixed32 ask_venue_id = 5;
    if (has_ask_venue_id()) {
      total_size += 1 + 4;
    }

    // required double ask_price = 6;
    if (has_ask_price()) {
      total_size += 1 + 8;
    }

    // required double ask_size = 7;
    if (has_ask_size()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void multi_market_instrument_layer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const multi_market_instrument_layer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const multi_market_instrument_layer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void multi_market_instrument_layer::MergeFrom(const multi_market_instrument_layer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bid_venue_id()) {
      set_bid_venue_id(from.bid_venue_id());
    }
    if (from.has_bid_price()) {
      set_bid_price(from.bid_price());
    }
    if (from.has_bid_size()) {
      set_bid_size(from.bid_size());
    }
    if (from.has_ask_venue_id()) {
      set_ask_venue_id(from.ask_venue_id());
    }
    if (from.has_ask_price()) {
      set_ask_price(from.ask_price());
    }
    if (from.has_ask_size()) {
      set_ask_size(from.ask_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void multi_market_instrument_layer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void multi_market_instrument_layer::CopyFrom(const multi_market_instrument_layer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool multi_market_instrument_layer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void multi_market_instrument_layer::Swap(multi_market_instrument_layer* other) {
  if (other != this) {
    std::swap(bid_venue_id_, other->bid_venue_id_);
    std::swap(bid_price_, other->bid_price_);
    std::swap(bid_size_, other->bid_size_);
    std::swap(ask_venue_id_, other->ask_venue_id_);
    std::swap(ask_price_, other->ask_price_);
    std::swap(ask_size_, other->ask_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata multi_market_instrument_layer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = multi_market_instrument_layer_descriptor_;
  metadata.reflection = multi_market_instrument_layer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int multi_market_instrument_level_1::kSymbolFieldNumber;
const int multi_market_instrument_level_1::kLayerFieldNumber;
#endif  // !_MSC_VER

multi_market_instrument_level_1::multi_market_instrument_level_1()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void multi_market_instrument_level_1::InitAsDefaultInstance() {
  layer_ = const_cast< ::capkproto::multi_market_instrument_layer*>(&::capkproto::multi_market_instrument_layer::default_instance());
}

multi_market_instrument_level_1::multi_market_instrument_level_1(const multi_market_instrument_level_1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void multi_market_instrument_level_1::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  layer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

multi_market_instrument_level_1::~multi_market_instrument_level_1() {
  SharedDtor();
}

void multi_market_instrument_level_1::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
    delete layer_;
  }
}

void multi_market_instrument_level_1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* multi_market_instrument_level_1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return multi_market_instrument_level_1_descriptor_;
}

const multi_market_instrument_level_1& multi_market_instrument_level_1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spot_5ffx_5fmd_5fn_2eproto();
  return *default_instance_;
}

multi_market_instrument_level_1* multi_market_instrument_level_1::default_instance_ = NULL;

multi_market_instrument_level_1* multi_market_instrument_level_1::New() const {
  return new multi_market_instrument_level_1;
}

void multi_market_instrument_level_1::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    if (has_layer()) {
      if (layer_ != NULL) layer_->::capkproto::multi_market_instrument_layer::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool multi_market_instrument_level_1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string symbol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_layer;
        break;
      }

      // required .capkproto.multi_market_instrument_layer layer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_layer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_layer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void multi_market_instrument_level_1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->symbol(), output);
  }

  // required .capkproto.multi_market_instrument_layer layer = 2;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->layer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* multi_market_instrument_level_1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // required .capkproto.multi_market_instrument_layer layer = 2;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->layer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int multi_market_instrument_level_1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // required .capkproto.multi_market_instrument_layer layer = 2;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->layer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void multi_market_instrument_level_1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const multi_market_instrument_level_1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const multi_market_instrument_level_1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void multi_market_instrument_level_1::MergeFrom(const multi_market_instrument_level_1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_layer()) {
      mutable_layer()->::capkproto::multi_market_instrument_layer::MergeFrom(from.layer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void multi_market_instrument_level_1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void multi_market_instrument_level_1::CopyFrom(const multi_market_instrument_level_1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool multi_market_instrument_level_1::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_layer()) {
    if (!this->layer().IsInitialized()) return false;
  }
  return true;
}

void multi_market_instrument_level_1::Swap(multi_market_instrument_level_1* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(layer_, other->layer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata multi_market_instrument_level_1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = multi_market_instrument_level_1_descriptor_;
  metadata.reflection = multi_market_instrument_level_1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int multi_market_level_n::kSymbolFieldNumber;
const int multi_market_level_n::kLayersFieldNumber;
#endif  // !_MSC_VER

multi_market_level_n::multi_market_level_n()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void multi_market_level_n::InitAsDefaultInstance() {
}

multi_market_level_n::multi_market_level_n(const multi_market_level_n& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void multi_market_level_n::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

multi_market_level_n::~multi_market_level_n() {
  SharedDtor();
}

void multi_market_level_n::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
  }
}

void multi_market_level_n::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* multi_market_level_n::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return multi_market_level_n_descriptor_;
}

const multi_market_level_n& multi_market_level_n::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_spot_5ffx_5fmd_5fn_2eproto();
  return *default_instance_;
}

multi_market_level_n* multi_market_level_n::default_instance_ = NULL;

multi_market_level_n* multi_market_level_n::New() const {
  return new multi_market_level_n;
}

void multi_market_level_n::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
  }
  layers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool multi_market_level_n::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string symbol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_layers;
        break;
      }

      // repeated .capkproto.multi_market_instrument_layer layers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_layers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_layers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_layers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void multi_market_level_n::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->symbol(), output);
  }

  // repeated .capkproto.multi_market_instrument_layer layers = 2;
  for (int i = 0; i < this->layers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->layers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* multi_market_level_n::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // repeated .capkproto.multi_market_instrument_layer layers = 2;
  for (int i = 0; i < this->layers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->layers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int multi_market_level_n::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

  }
  // repeated .capkproto.multi_market_instrument_layer layers = 2;
  total_size += 1 * this->layers_size();
  for (int i = 0; i < this->layers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->layers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void multi_market_level_n::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const multi_market_level_n* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const multi_market_level_n*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void multi_market_level_n::MergeFrom(const multi_market_level_n& from) {
  GOOGLE_CHECK_NE(&from, this);
  layers_.MergeFrom(from.layers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void multi_market_level_n::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void multi_market_level_n::CopyFrom(const multi_market_level_n& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool multi_market_level_n::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < layers_size(); i++) {
    if (!this->layers(i).IsInitialized()) return false;
  }
  return true;
}

void multi_market_level_n::Swap(multi_market_level_n* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    layers_.Swap(&other->layers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata multi_market_level_n::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = multi_market_level_n_descriptor_;
  metadata.reflection = multi_market_level_n_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace capkproto

// @@protoc_insertion_point(global_scope)
