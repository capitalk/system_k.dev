// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: spot_fx_md_n.proto

#ifndef PROTOBUF_spot_5ffx_5fmd_5fn_2eproto__INCLUDED
#define PROTOBUF_spot_5ffx_5fmd_5fn_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "capk_globals.pb.h"
// @@protoc_insertion_point(includes)

namespace capkproto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_spot_5ffx_5fmd_5fn_2eproto();
void protobuf_AssignDesc_spot_5ffx_5fmd_5fn_2eproto();
void protobuf_ShutdownFile_spot_5ffx_5fmd_5fn_2eproto();

class single_market_layer;
class single_market_level_1;
class single_market_level_n;
class multi_market_instrument_layer;
class multi_market_instrument_level_1;
class multi_market_level_n;

// ===================================================================

class single_market_layer : public ::google::protobuf::Message {
 public:
  single_market_layer();
  virtual ~single_market_layer();

  single_market_layer(const single_market_layer& from);

  inline single_market_layer& operator=(const single_market_layer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const single_market_layer& default_instance();

  void Swap(single_market_layer* other);

  // implements Message ----------------------------------------------

  single_market_layer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const single_market_layer& from);
  void MergeFrom(const single_market_layer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sfixed32 venue_id = 2;
  inline bool has_venue_id() const;
  inline void clear_venue_id();
  static const int kVenueIdFieldNumber = 2;
  inline ::google::protobuf::int32 venue_id() const;
  inline void set_venue_id(::google::protobuf::int32 value);

  // required double bid_size = 3;
  inline bool has_bid_size() const;
  inline void clear_bid_size();
  static const int kBidSizeFieldNumber = 3;
  inline double bid_size() const;
  inline void set_bid_size(double value);

  // required double bid_price = 4;
  inline bool has_bid_price() const;
  inline void clear_bid_price();
  static const int kBidPriceFieldNumber = 4;
  inline double bid_price() const;
  inline void set_bid_price(double value);

  // required double ask_size = 5;
  inline bool has_ask_size() const;
  inline void clear_ask_size();
  static const int kAskSizeFieldNumber = 5;
  inline double ask_size() const;
  inline void set_ask_size(double value);

  // required double ask_price = 6;
  inline bool has_ask_price() const;
  inline void clear_ask_price();
  static const int kAskPriceFieldNumber = 6;
  inline double ask_price() const;
  inline void set_ask_price(double value);

  // @@protoc_insertion_point(class_scope:capkproto.single_market_layer)
 private:
  inline void set_has_venue_id();
  inline void clear_has_venue_id();
  inline void set_has_bid_size();
  inline void clear_has_bid_size();
  inline void set_has_bid_price();
  inline void clear_has_bid_price();
  inline void set_has_ask_size();
  inline void clear_has_ask_size();
  inline void set_has_ask_price();
  inline void clear_has_ask_price();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double bid_size_;
  double bid_price_;
  double ask_size_;
  double ask_price_;
  ::google::protobuf::int32 venue_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_spot_5ffx_5fmd_5fn_2eproto();
  friend void protobuf_AssignDesc_spot_5ffx_5fmd_5fn_2eproto();
  friend void protobuf_ShutdownFile_spot_5ffx_5fmd_5fn_2eproto();

  void InitAsDefaultInstance();
  static single_market_layer* default_instance_;
};
// -------------------------------------------------------------------

class single_market_level_1 : public ::google::protobuf::Message {
 public:
  single_market_level_1();
  virtual ~single_market_level_1();

  single_market_level_1(const single_market_level_1& from);

  inline single_market_level_1& operator=(const single_market_level_1& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const single_market_level_1& default_instance();

  void Swap(single_market_level_1* other);

  // implements Message ----------------------------------------------

  single_market_level_1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const single_market_level_1& from);
  void MergeFrom(const single_market_level_1& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string symbol = 1;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  inline void set_allocated_symbol(::std::string* symbol);

  // required .capkproto.single_market_layer layer = 2;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 2;
  inline const ::capkproto::single_market_layer& layer() const;
  inline ::capkproto::single_market_layer* mutable_layer();
  inline ::capkproto::single_market_layer* release_layer();
  inline void set_allocated_layer(::capkproto::single_market_layer* layer);

  // @@protoc_insertion_point(class_scope:capkproto.single_market_level_1)
 private:
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_layer();
  inline void clear_has_layer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* symbol_;
  ::capkproto::single_market_layer* layer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_spot_5ffx_5fmd_5fn_2eproto();
  friend void protobuf_AssignDesc_spot_5ffx_5fmd_5fn_2eproto();
  friend void protobuf_ShutdownFile_spot_5ffx_5fmd_5fn_2eproto();

  void InitAsDefaultInstance();
  static single_market_level_1* default_instance_;
};
// -------------------------------------------------------------------

class single_market_level_n : public ::google::protobuf::Message {
 public:
  single_market_level_n();
  virtual ~single_market_level_n();

  single_market_level_n(const single_market_level_n& from);

  inline single_market_level_n& operator=(const single_market_level_n& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const single_market_level_n& default_instance();

  void Swap(single_market_level_n* other);

  // implements Message ----------------------------------------------

  single_market_level_n* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const single_market_level_n& from);
  void MergeFrom(const single_market_level_n& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string symbol = 1;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  inline void set_allocated_symbol(::std::string* symbol);

  // repeated .capkproto.single_market_layer layers = 2;
  inline int layers_size() const;
  inline void clear_layers();
  static const int kLayersFieldNumber = 2;
  inline const ::capkproto::single_market_layer& layers(int index) const;
  inline ::capkproto::single_market_layer* mutable_layers(int index);
  inline ::capkproto::single_market_layer* add_layers();
  inline const ::google::protobuf::RepeatedPtrField< ::capkproto::single_market_layer >&
      layers() const;
  inline ::google::protobuf::RepeatedPtrField< ::capkproto::single_market_layer >*
      mutable_layers();

  // @@protoc_insertion_point(class_scope:capkproto.single_market_level_n)
 private:
  inline void set_has_symbol();
  inline void clear_has_symbol();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* symbol_;
  ::google::protobuf::RepeatedPtrField< ::capkproto::single_market_layer > layers_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_spot_5ffx_5fmd_5fn_2eproto();
  friend void protobuf_AssignDesc_spot_5ffx_5fmd_5fn_2eproto();
  friend void protobuf_ShutdownFile_spot_5ffx_5fmd_5fn_2eproto();

  void InitAsDefaultInstance();
  static single_market_level_n* default_instance_;
};
// -------------------------------------------------------------------

class multi_market_instrument_layer : public ::google::protobuf::Message {
 public:
  multi_market_instrument_layer();
  virtual ~multi_market_instrument_layer();

  multi_market_instrument_layer(const multi_market_instrument_layer& from);

  inline multi_market_instrument_layer& operator=(const multi_market_instrument_layer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const multi_market_instrument_layer& default_instance();

  void Swap(multi_market_instrument_layer* other);

  // implements Message ----------------------------------------------

  multi_market_instrument_layer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const multi_market_instrument_layer& from);
  void MergeFrom(const multi_market_instrument_layer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sfixed32 bid_venue_id = 2;
  inline bool has_bid_venue_id() const;
  inline void clear_bid_venue_id();
  static const int kBidVenueIdFieldNumber = 2;
  inline ::google::protobuf::int32 bid_venue_id() const;
  inline void set_bid_venue_id(::google::protobuf::int32 value);

  // required double bid_price = 3;
  inline bool has_bid_price() const;
  inline void clear_bid_price();
  static const int kBidPriceFieldNumber = 3;
  inline double bid_price() const;
  inline void set_bid_price(double value);

  // required double bid_size = 4;
  inline bool has_bid_size() const;
  inline void clear_bid_size();
  static const int kBidSizeFieldNumber = 4;
  inline double bid_size() const;
  inline void set_bid_size(double value);

  // required sfixed32 ask_venue_id = 5;
  inline bool has_ask_venue_id() const;
  inline void clear_ask_venue_id();
  static const int kAskVenueIdFieldNumber = 5;
  inline ::google::protobuf::int32 ask_venue_id() const;
  inline void set_ask_venue_id(::google::protobuf::int32 value);

  // required double ask_price = 6;
  inline bool has_ask_price() const;
  inline void clear_ask_price();
  static const int kAskPriceFieldNumber = 6;
  inline double ask_price() const;
  inline void set_ask_price(double value);

  // required double ask_size = 7;
  inline bool has_ask_size() const;
  inline void clear_ask_size();
  static const int kAskSizeFieldNumber = 7;
  inline double ask_size() const;
  inline void set_ask_size(double value);

  // @@protoc_insertion_point(class_scope:capkproto.multi_market_instrument_layer)
 private:
  inline void set_has_bid_venue_id();
  inline void clear_has_bid_venue_id();
  inline void set_has_bid_price();
  inline void clear_has_bid_price();
  inline void set_has_bid_size();
  inline void clear_has_bid_size();
  inline void set_has_ask_venue_id();
  inline void clear_has_ask_venue_id();
  inline void set_has_ask_price();
  inline void clear_has_ask_price();
  inline void set_has_ask_size();
  inline void clear_has_ask_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double bid_price_;
  ::google::protobuf::int32 bid_venue_id_;
  ::google::protobuf::int32 ask_venue_id_;
  double bid_size_;
  double ask_price_;
  double ask_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_spot_5ffx_5fmd_5fn_2eproto();
  friend void protobuf_AssignDesc_spot_5ffx_5fmd_5fn_2eproto();
  friend void protobuf_ShutdownFile_spot_5ffx_5fmd_5fn_2eproto();

  void InitAsDefaultInstance();
  static multi_market_instrument_layer* default_instance_;
};
// -------------------------------------------------------------------

class multi_market_instrument_level_1 : public ::google::protobuf::Message {
 public:
  multi_market_instrument_level_1();
  virtual ~multi_market_instrument_level_1();

  multi_market_instrument_level_1(const multi_market_instrument_level_1& from);

  inline multi_market_instrument_level_1& operator=(const multi_market_instrument_level_1& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const multi_market_instrument_level_1& default_instance();

  void Swap(multi_market_instrument_level_1* other);

  // implements Message ----------------------------------------------

  multi_market_instrument_level_1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const multi_market_instrument_level_1& from);
  void MergeFrom(const multi_market_instrument_level_1& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string symbol = 1;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  inline void set_allocated_symbol(::std::string* symbol);

  // required .capkproto.multi_market_instrument_layer layer = 2;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 2;
  inline const ::capkproto::multi_market_instrument_layer& layer() const;
  inline ::capkproto::multi_market_instrument_layer* mutable_layer();
  inline ::capkproto::multi_market_instrument_layer* release_layer();
  inline void set_allocated_layer(::capkproto::multi_market_instrument_layer* layer);

  // @@protoc_insertion_point(class_scope:capkproto.multi_market_instrument_level_1)
 private:
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_layer();
  inline void clear_has_layer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* symbol_;
  ::capkproto::multi_market_instrument_layer* layer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_spot_5ffx_5fmd_5fn_2eproto();
  friend void protobuf_AssignDesc_spot_5ffx_5fmd_5fn_2eproto();
  friend void protobuf_ShutdownFile_spot_5ffx_5fmd_5fn_2eproto();

  void InitAsDefaultInstance();
  static multi_market_instrument_level_1* default_instance_;
};
// -------------------------------------------------------------------

class multi_market_level_n : public ::google::protobuf::Message {
 public:
  multi_market_level_n();
  virtual ~multi_market_level_n();

  multi_market_level_n(const multi_market_level_n& from);

  inline multi_market_level_n& operator=(const multi_market_level_n& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const multi_market_level_n& default_instance();

  void Swap(multi_market_level_n* other);

  // implements Message ----------------------------------------------

  multi_market_level_n* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const multi_market_level_n& from);
  void MergeFrom(const multi_market_level_n& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string symbol = 1;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  inline void set_allocated_symbol(::std::string* symbol);

  // repeated .capkproto.multi_market_instrument_layer layers = 2;
  inline int layers_size() const;
  inline void clear_layers();
  static const int kLayersFieldNumber = 2;
  inline const ::capkproto::multi_market_instrument_layer& layers(int index) const;
  inline ::capkproto::multi_market_instrument_layer* mutable_layers(int index);
  inline ::capkproto::multi_market_instrument_layer* add_layers();
  inline const ::google::protobuf::RepeatedPtrField< ::capkproto::multi_market_instrument_layer >&
      layers() const;
  inline ::google::protobuf::RepeatedPtrField< ::capkproto::multi_market_instrument_layer >*
      mutable_layers();

  // @@protoc_insertion_point(class_scope:capkproto.multi_market_level_n)
 private:
  inline void set_has_symbol();
  inline void clear_has_symbol();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* symbol_;
  ::google::protobuf::RepeatedPtrField< ::capkproto::multi_market_instrument_layer > layers_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_spot_5ffx_5fmd_5fn_2eproto();
  friend void protobuf_AssignDesc_spot_5ffx_5fmd_5fn_2eproto();
  friend void protobuf_ShutdownFile_spot_5ffx_5fmd_5fn_2eproto();

  void InitAsDefaultInstance();
  static multi_market_level_n* default_instance_;
};
// ===================================================================


// ===================================================================

// single_market_layer

// required sfixed32 venue_id = 2;
inline bool single_market_layer::has_venue_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void single_market_layer::set_has_venue_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void single_market_layer::clear_has_venue_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void single_market_layer::clear_venue_id() {
  venue_id_ = 0;
  clear_has_venue_id();
}
inline ::google::protobuf::int32 single_market_layer::venue_id() const {
  return venue_id_;
}
inline void single_market_layer::set_venue_id(::google::protobuf::int32 value) {
  set_has_venue_id();
  venue_id_ = value;
}

// required double bid_size = 3;
inline bool single_market_layer::has_bid_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void single_market_layer::set_has_bid_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void single_market_layer::clear_has_bid_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void single_market_layer::clear_bid_size() {
  bid_size_ = 0;
  clear_has_bid_size();
}
inline double single_market_layer::bid_size() const {
  return bid_size_;
}
inline void single_market_layer::set_bid_size(double value) {
  set_has_bid_size();
  bid_size_ = value;
}

// required double bid_price = 4;
inline bool single_market_layer::has_bid_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void single_market_layer::set_has_bid_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void single_market_layer::clear_has_bid_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void single_market_layer::clear_bid_price() {
  bid_price_ = 0;
  clear_has_bid_price();
}
inline double single_market_layer::bid_price() const {
  return bid_price_;
}
inline void single_market_layer::set_bid_price(double value) {
  set_has_bid_price();
  bid_price_ = value;
}

// required double ask_size = 5;
inline bool single_market_layer::has_ask_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void single_market_layer::set_has_ask_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void single_market_layer::clear_has_ask_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void single_market_layer::clear_ask_size() {
  ask_size_ = 0;
  clear_has_ask_size();
}
inline double single_market_layer::ask_size() const {
  return ask_size_;
}
inline void single_market_layer::set_ask_size(double value) {
  set_has_ask_size();
  ask_size_ = value;
}

// required double ask_price = 6;
inline bool single_market_layer::has_ask_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void single_market_layer::set_has_ask_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void single_market_layer::clear_has_ask_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void single_market_layer::clear_ask_price() {
  ask_price_ = 0;
  clear_has_ask_price();
}
inline double single_market_layer::ask_price() const {
  return ask_price_;
}
inline void single_market_layer::set_ask_price(double value) {
  set_has_ask_price();
  ask_price_ = value;
}

// -------------------------------------------------------------------

// single_market_level_1

// required string symbol = 1;
inline bool single_market_level_1::has_symbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void single_market_level_1::set_has_symbol() {
  _has_bits_[0] |= 0x00000001u;
}
inline void single_market_level_1::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void single_market_level_1::clear_symbol() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    symbol_->clear();
  }
  clear_has_symbol();
}
inline const ::std::string& single_market_level_1::symbol() const {
  return *symbol_;
}
inline void single_market_level_1::set_symbol(const ::std::string& value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void single_market_level_1::set_symbol(const char* value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void single_market_level_1::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* single_market_level_1::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  return symbol_;
}
inline ::std::string* single_market_level_1::release_symbol() {
  clear_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = symbol_;
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void single_market_level_1::set_allocated_symbol(::std::string* symbol) {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (symbol) {
    set_has_symbol();
    symbol_ = symbol;
  } else {
    clear_has_symbol();
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .capkproto.single_market_layer layer = 2;
inline bool single_market_level_1::has_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void single_market_level_1::set_has_layer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void single_market_level_1::clear_has_layer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void single_market_level_1::clear_layer() {
  if (layer_ != NULL) layer_->::capkproto::single_market_layer::Clear();
  clear_has_layer();
}
inline const ::capkproto::single_market_layer& single_market_level_1::layer() const {
  return layer_ != NULL ? *layer_ : *default_instance_->layer_;
}
inline ::capkproto::single_market_layer* single_market_level_1::mutable_layer() {
  set_has_layer();
  if (layer_ == NULL) layer_ = new ::capkproto::single_market_layer;
  return layer_;
}
inline ::capkproto::single_market_layer* single_market_level_1::release_layer() {
  clear_has_layer();
  ::capkproto::single_market_layer* temp = layer_;
  layer_ = NULL;
  return temp;
}
inline void single_market_level_1::set_allocated_layer(::capkproto::single_market_layer* layer) {
  delete layer_;
  layer_ = layer;
  if (layer) {
    set_has_layer();
  } else {
    clear_has_layer();
  }
}

// -------------------------------------------------------------------

// single_market_level_n

// required string symbol = 1;
inline bool single_market_level_n::has_symbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void single_market_level_n::set_has_symbol() {
  _has_bits_[0] |= 0x00000001u;
}
inline void single_market_level_n::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void single_market_level_n::clear_symbol() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    symbol_->clear();
  }
  clear_has_symbol();
}
inline const ::std::string& single_market_level_n::symbol() const {
  return *symbol_;
}
inline void single_market_level_n::set_symbol(const ::std::string& value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void single_market_level_n::set_symbol(const char* value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void single_market_level_n::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* single_market_level_n::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  return symbol_;
}
inline ::std::string* single_market_level_n::release_symbol() {
  clear_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = symbol_;
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void single_market_level_n::set_allocated_symbol(::std::string* symbol) {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (symbol) {
    set_has_symbol();
    symbol_ = symbol;
  } else {
    clear_has_symbol();
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .capkproto.single_market_layer layers = 2;
inline int single_market_level_n::layers_size() const {
  return layers_.size();
}
inline void single_market_level_n::clear_layers() {
  layers_.Clear();
}
inline const ::capkproto::single_market_layer& single_market_level_n::layers(int index) const {
  return layers_.Get(index);
}
inline ::capkproto::single_market_layer* single_market_level_n::mutable_layers(int index) {
  return layers_.Mutable(index);
}
inline ::capkproto::single_market_layer* single_market_level_n::add_layers() {
  return layers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::capkproto::single_market_layer >&
single_market_level_n::layers() const {
  return layers_;
}
inline ::google::protobuf::RepeatedPtrField< ::capkproto::single_market_layer >*
single_market_level_n::mutable_layers() {
  return &layers_;
}

// -------------------------------------------------------------------

// multi_market_instrument_layer

// required sfixed32 bid_venue_id = 2;
inline bool multi_market_instrument_layer::has_bid_venue_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void multi_market_instrument_layer::set_has_bid_venue_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void multi_market_instrument_layer::clear_has_bid_venue_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void multi_market_instrument_layer::clear_bid_venue_id() {
  bid_venue_id_ = 0;
  clear_has_bid_venue_id();
}
inline ::google::protobuf::int32 multi_market_instrument_layer::bid_venue_id() const {
  return bid_venue_id_;
}
inline void multi_market_instrument_layer::set_bid_venue_id(::google::protobuf::int32 value) {
  set_has_bid_venue_id();
  bid_venue_id_ = value;
}

// required double bid_price = 3;
inline bool multi_market_instrument_layer::has_bid_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void multi_market_instrument_layer::set_has_bid_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void multi_market_instrument_layer::clear_has_bid_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void multi_market_instrument_layer::clear_bid_price() {
  bid_price_ = 0;
  clear_has_bid_price();
}
inline double multi_market_instrument_layer::bid_price() const {
  return bid_price_;
}
inline void multi_market_instrument_layer::set_bid_price(double value) {
  set_has_bid_price();
  bid_price_ = value;
}

// required double bid_size = 4;
inline bool multi_market_instrument_layer::has_bid_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void multi_market_instrument_layer::set_has_bid_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void multi_market_instrument_layer::clear_has_bid_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void multi_market_instrument_layer::clear_bid_size() {
  bid_size_ = 0;
  clear_has_bid_size();
}
inline double multi_market_instrument_layer::bid_size() const {
  return bid_size_;
}
inline void multi_market_instrument_layer::set_bid_size(double value) {
  set_has_bid_size();
  bid_size_ = value;
}

// required sfixed32 ask_venue_id = 5;
inline bool multi_market_instrument_layer::has_ask_venue_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void multi_market_instrument_layer::set_has_ask_venue_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void multi_market_instrument_layer::clear_has_ask_venue_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void multi_market_instrument_layer::clear_ask_venue_id() {
  ask_venue_id_ = 0;
  clear_has_ask_venue_id();
}
inline ::google::protobuf::int32 multi_market_instrument_layer::ask_venue_id() const {
  return ask_venue_id_;
}
inline void multi_market_instrument_layer::set_ask_venue_id(::google::protobuf::int32 value) {
  set_has_ask_venue_id();
  ask_venue_id_ = value;
}

// required double ask_price = 6;
inline bool multi_market_instrument_layer::has_ask_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void multi_market_instrument_layer::set_has_ask_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void multi_market_instrument_layer::clear_has_ask_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void multi_market_instrument_layer::clear_ask_price() {
  ask_price_ = 0;
  clear_has_ask_price();
}
inline double multi_market_instrument_layer::ask_price() const {
  return ask_price_;
}
inline void multi_market_instrument_layer::set_ask_price(double value) {
  set_has_ask_price();
  ask_price_ = value;
}

// required double ask_size = 7;
inline bool multi_market_instrument_layer::has_ask_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void multi_market_instrument_layer::set_has_ask_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void multi_market_instrument_layer::clear_has_ask_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void multi_market_instrument_layer::clear_ask_size() {
  ask_size_ = 0;
  clear_has_ask_size();
}
inline double multi_market_instrument_layer::ask_size() const {
  return ask_size_;
}
inline void multi_market_instrument_layer::set_ask_size(double value) {
  set_has_ask_size();
  ask_size_ = value;
}

// -------------------------------------------------------------------

// multi_market_instrument_level_1

// required string symbol = 1;
inline bool multi_market_instrument_level_1::has_symbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void multi_market_instrument_level_1::set_has_symbol() {
  _has_bits_[0] |= 0x00000001u;
}
inline void multi_market_instrument_level_1::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void multi_market_instrument_level_1::clear_symbol() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    symbol_->clear();
  }
  clear_has_symbol();
}
inline const ::std::string& multi_market_instrument_level_1::symbol() const {
  return *symbol_;
}
inline void multi_market_instrument_level_1::set_symbol(const ::std::string& value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void multi_market_instrument_level_1::set_symbol(const char* value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void multi_market_instrument_level_1::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* multi_market_instrument_level_1::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  return symbol_;
}
inline ::std::string* multi_market_instrument_level_1::release_symbol() {
  clear_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = symbol_;
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void multi_market_instrument_level_1::set_allocated_symbol(::std::string* symbol) {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (symbol) {
    set_has_symbol();
    symbol_ = symbol;
  } else {
    clear_has_symbol();
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .capkproto.multi_market_instrument_layer layer = 2;
inline bool multi_market_instrument_level_1::has_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void multi_market_instrument_level_1::set_has_layer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void multi_market_instrument_level_1::clear_has_layer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void multi_market_instrument_level_1::clear_layer() {
  if (layer_ != NULL) layer_->::capkproto::multi_market_instrument_layer::Clear();
  clear_has_layer();
}
inline const ::capkproto::multi_market_instrument_layer& multi_market_instrument_level_1::layer() const {
  return layer_ != NULL ? *layer_ : *default_instance_->layer_;
}
inline ::capkproto::multi_market_instrument_layer* multi_market_instrument_level_1::mutable_layer() {
  set_has_layer();
  if (layer_ == NULL) layer_ = new ::capkproto::multi_market_instrument_layer;
  return layer_;
}
inline ::capkproto::multi_market_instrument_layer* multi_market_instrument_level_1::release_layer() {
  clear_has_layer();
  ::capkproto::multi_market_instrument_layer* temp = layer_;
  layer_ = NULL;
  return temp;
}
inline void multi_market_instrument_level_1::set_allocated_layer(::capkproto::multi_market_instrument_layer* layer) {
  delete layer_;
  layer_ = layer;
  if (layer) {
    set_has_layer();
  } else {
    clear_has_layer();
  }
}

// -------------------------------------------------------------------

// multi_market_level_n

// required string symbol = 1;
inline bool multi_market_level_n::has_symbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void multi_market_level_n::set_has_symbol() {
  _has_bits_[0] |= 0x00000001u;
}
inline void multi_market_level_n::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void multi_market_level_n::clear_symbol() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    symbol_->clear();
  }
  clear_has_symbol();
}
inline const ::std::string& multi_market_level_n::symbol() const {
  return *symbol_;
}
inline void multi_market_level_n::set_symbol(const ::std::string& value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void multi_market_level_n::set_symbol(const char* value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void multi_market_level_n::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* multi_market_level_n::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  return symbol_;
}
inline ::std::string* multi_market_level_n::release_symbol() {
  clear_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = symbol_;
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void multi_market_level_n::set_allocated_symbol(::std::string* symbol) {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (symbol) {
    set_has_symbol();
    symbol_ = symbol;
  } else {
    clear_has_symbol();
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .capkproto.multi_market_instrument_layer layers = 2;
inline int multi_market_level_n::layers_size() const {
  return layers_.size();
}
inline void multi_market_level_n::clear_layers() {
  layers_.Clear();
}
inline const ::capkproto::multi_market_instrument_layer& multi_market_level_n::layers(int index) const {
  return layers_.Get(index);
}
inline ::capkproto::multi_market_instrument_layer* multi_market_level_n::mutable_layers(int index) {
  return layers_.Mutable(index);
}
inline ::capkproto::multi_market_instrument_layer* multi_market_level_n::add_layers() {
  return layers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::capkproto::multi_market_instrument_layer >&
multi_market_level_n::layers() const {
  return layers_;
}
inline ::google::protobuf::RepeatedPtrField< ::capkproto::multi_market_instrument_layer >*
multi_market_level_n::mutable_layers() {
  return &layers_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace capkproto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_spot_5ffx_5fmd_5fn_2eproto__INCLUDED
