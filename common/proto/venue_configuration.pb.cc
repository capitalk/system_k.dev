// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: venue_configuration.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "venue_configuration.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace capkproto {

namespace {

const ::google::protobuf::Descriptor* venue_configuration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  venue_configuration_reflection_ = NULL;
const ::google::protobuf::Descriptor* configuration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  configuration_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_venue_5fconfiguration_2eproto() {
  protobuf_AddDesc_venue_5fconfiguration_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "venue_configuration.proto");
  GOOGLE_CHECK(file != NULL);
  venue_configuration_descriptor_ = file->message_type(0);
  static const int venue_configuration_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(venue_configuration, venue_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(venue_configuration, mic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(venue_configuration, order_interface_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(venue_configuration, order_ping_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(venue_configuration, market_data_broadcast_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(venue_configuration, logging_broadcast_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(venue_configuration, use_synthetic_cancel_replace_),
  };
  venue_configuration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      venue_configuration_descriptor_,
      venue_configuration::default_instance_,
      venue_configuration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(venue_configuration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(venue_configuration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(venue_configuration));
  configuration_descriptor_ = file->message_type(1);
  static const int configuration_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(configuration, trade_serialization_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(configuration, recovery_listener_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(configuration, aggregated_bbo_book_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(configuration, aggregated_bbo_book_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(configuration, configs_),
  };
  configuration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      configuration_descriptor_,
      configuration::default_instance_,
      configuration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(configuration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(configuration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(configuration));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_venue_5fconfiguration_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    venue_configuration_descriptor_, &venue_configuration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    configuration_descriptor_, &configuration::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_venue_5fconfiguration_2eproto() {
  delete venue_configuration::default_instance_;
  delete venue_configuration_reflection_;
  delete configuration::default_instance_;
  delete configuration_reflection_;
}

void protobuf_AddDesc_venue_5fconfiguration_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::capkproto::protobuf_AddDesc_capk_5fglobals_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031venue_configuration.proto\022\tcapkproto\032\022"
    "capk_globals.proto\"\332\001\n\023venue_configurati"
    "on\022\020\n\010venue_id\030\001 \001(\017\022\020\n\010mic_name\030\002 \001(\t\022\034"
    "\n\024order_interface_addr\030\003 \001(\t\022\027\n\017order_pi"
    "ng_addr\030\004 \001(\t\022\"\n\032market_data_broadcast_a"
    "ddr\030\005 \001(\t\022\036\n\026logging_broadcast_addr\030\006 \001("
    "\t\022$\n\034use_synthetic_cancel_replace\030\007 \001(\010\""
    "\304\001\n\rconfiguration\022 \n\030trade_serialization"
    "_addr\030\001 \001(\t\022\036\n\026recovery_listener_addr\030\002 "
    "\001(\t\022 \n\030aggregated_bbo_book_addr\030\003 \001(\t\022\036\n"
    "\026aggregated_bbo_book_id\030\004 \001(\017\022/\n\007configs"
    "\030\005 \003(\0132\036.capkproto.venue_configuration", 478);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "venue_configuration.proto", &protobuf_RegisterTypes);
  venue_configuration::default_instance_ = new venue_configuration();
  configuration::default_instance_ = new configuration();
  venue_configuration::default_instance_->InitAsDefaultInstance();
  configuration::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_venue_5fconfiguration_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_venue_5fconfiguration_2eproto {
  StaticDescriptorInitializer_venue_5fconfiguration_2eproto() {
    protobuf_AddDesc_venue_5fconfiguration_2eproto();
  }
} static_descriptor_initializer_venue_5fconfiguration_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int venue_configuration::kVenueIdFieldNumber;
const int venue_configuration::kMicNameFieldNumber;
const int venue_configuration::kOrderInterfaceAddrFieldNumber;
const int venue_configuration::kOrderPingAddrFieldNumber;
const int venue_configuration::kMarketDataBroadcastAddrFieldNumber;
const int venue_configuration::kLoggingBroadcastAddrFieldNumber;
const int venue_configuration::kUseSyntheticCancelReplaceFieldNumber;
#endif  // !_MSC_VER

venue_configuration::venue_configuration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void venue_configuration::InitAsDefaultInstance() {
}

venue_configuration::venue_configuration(const venue_configuration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void venue_configuration::SharedCtor() {
  _cached_size_ = 0;
  venue_id_ = 0;
  mic_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  order_interface_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  order_ping_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  market_data_broadcast_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logging_broadcast_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  use_synthetic_cancel_replace_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

venue_configuration::~venue_configuration() {
  SharedDtor();
}

void venue_configuration::SharedDtor() {
  if (mic_name_ != &::google::protobuf::internal::kEmptyString) {
    delete mic_name_;
  }
  if (order_interface_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete order_interface_addr_;
  }
  if (order_ping_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete order_ping_addr_;
  }
  if (market_data_broadcast_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete market_data_broadcast_addr_;
  }
  if (logging_broadcast_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete logging_broadcast_addr_;
  }
  if (this != default_instance_) {
  }
}

void venue_configuration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* venue_configuration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return venue_configuration_descriptor_;
}

const venue_configuration& venue_configuration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_venue_5fconfiguration_2eproto();
  return *default_instance_;
}

venue_configuration* venue_configuration::default_instance_ = NULL;

venue_configuration* venue_configuration::New() const {
  return new venue_configuration;
}

void venue_configuration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    venue_id_ = 0;
    if (has_mic_name()) {
      if (mic_name_ != &::google::protobuf::internal::kEmptyString) {
        mic_name_->clear();
      }
    }
    if (has_order_interface_addr()) {
      if (order_interface_addr_ != &::google::protobuf::internal::kEmptyString) {
        order_interface_addr_->clear();
      }
    }
    if (has_order_ping_addr()) {
      if (order_ping_addr_ != &::google::protobuf::internal::kEmptyString) {
        order_ping_addr_->clear();
      }
    }
    if (has_market_data_broadcast_addr()) {
      if (market_data_broadcast_addr_ != &::google::protobuf::internal::kEmptyString) {
        market_data_broadcast_addr_->clear();
      }
    }
    if (has_logging_broadcast_addr()) {
      if (logging_broadcast_addr_ != &::google::protobuf::internal::kEmptyString) {
        logging_broadcast_addr_->clear();
      }
    }
    use_synthetic_cancel_replace_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool venue_configuration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sfixed32 venue_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &venue_id_)));
          set_has_venue_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mic_name;
        break;
      }

      // optional string mic_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mic_name().data(), this->mic_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_order_interface_addr;
        break;
      }

      // optional string order_interface_addr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order_interface_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_interface_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->order_interface_addr().data(), this->order_interface_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_order_ping_addr;
        break;
      }

      // optional string order_ping_addr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order_ping_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_ping_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->order_ping_addr().data(), this->order_ping_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_market_data_broadcast_addr;
        break;
      }

      // optional string market_data_broadcast_addr = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_market_data_broadcast_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_market_data_broadcast_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->market_data_broadcast_addr().data(), this->market_data_broadcast_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_logging_broadcast_addr;
        break;
      }

      // optional string logging_broadcast_addr = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logging_broadcast_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logging_broadcast_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->logging_broadcast_addr().data(), this->logging_broadcast_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_use_synthetic_cancel_replace;
        break;
      }

      // optional bool use_synthetic_cancel_replace = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_synthetic_cancel_replace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_synthetic_cancel_replace_)));
          set_has_use_synthetic_cancel_replace();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void venue_configuration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sfixed32 venue_id = 1;
  if (has_venue_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->venue_id(), output);
  }

  // optional string mic_name = 2;
  if (has_mic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mic_name().data(), this->mic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->mic_name(), output);
  }

  // optional string order_interface_addr = 3;
  if (has_order_interface_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_interface_addr().data(), this->order_interface_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->order_interface_addr(), output);
  }

  // optional string order_ping_addr = 4;
  if (has_order_ping_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_ping_addr().data(), this->order_ping_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->order_ping_addr(), output);
  }

  // optional string market_data_broadcast_addr = 5;
  if (has_market_data_broadcast_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->market_data_broadcast_addr().data(), this->market_data_broadcast_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->market_data_broadcast_addr(), output);
  }

  // optional string logging_broadcast_addr = 6;
  if (has_logging_broadcast_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logging_broadcast_addr().data(), this->logging_broadcast_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->logging_broadcast_addr(), output);
  }

  // optional bool use_synthetic_cancel_replace = 7;
  if (has_use_synthetic_cancel_replace()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->use_synthetic_cancel_replace(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* venue_configuration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sfixed32 venue_id = 1;
  if (has_venue_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->venue_id(), target);
  }

  // optional string mic_name = 2;
  if (has_mic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mic_name().data(), this->mic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mic_name(), target);
  }

  // optional string order_interface_addr = 3;
  if (has_order_interface_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_interface_addr().data(), this->order_interface_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->order_interface_addr(), target);
  }

  // optional string order_ping_addr = 4;
  if (has_order_ping_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order_ping_addr().data(), this->order_ping_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->order_ping_addr(), target);
  }

  // optional string market_data_broadcast_addr = 5;
  if (has_market_data_broadcast_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->market_data_broadcast_addr().data(), this->market_data_broadcast_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->market_data_broadcast_addr(), target);
  }

  // optional string logging_broadcast_addr = 6;
  if (has_logging_broadcast_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logging_broadcast_addr().data(), this->logging_broadcast_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->logging_broadcast_addr(), target);
  }

  // optional bool use_synthetic_cancel_replace = 7;
  if (has_use_synthetic_cancel_replace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->use_synthetic_cancel_replace(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int venue_configuration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sfixed32 venue_id = 1;
    if (has_venue_id()) {
      total_size += 1 + 4;
    }

    // optional string mic_name = 2;
    if (has_mic_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mic_name());
    }

    // optional string order_interface_addr = 3;
    if (has_order_interface_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_interface_addr());
    }

    // optional string order_ping_addr = 4;
    if (has_order_ping_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_ping_addr());
    }

    // optional string market_data_broadcast_addr = 5;
    if (has_market_data_broadcast_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->market_data_broadcast_addr());
    }

    // optional string logging_broadcast_addr = 6;
    if (has_logging_broadcast_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logging_broadcast_addr());
    }

    // optional bool use_synthetic_cancel_replace = 7;
    if (has_use_synthetic_cancel_replace()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void venue_configuration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const venue_configuration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const venue_configuration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void venue_configuration::MergeFrom(const venue_configuration& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_venue_id()) {
      set_venue_id(from.venue_id());
    }
    if (from.has_mic_name()) {
      set_mic_name(from.mic_name());
    }
    if (from.has_order_interface_addr()) {
      set_order_interface_addr(from.order_interface_addr());
    }
    if (from.has_order_ping_addr()) {
      set_order_ping_addr(from.order_ping_addr());
    }
    if (from.has_market_data_broadcast_addr()) {
      set_market_data_broadcast_addr(from.market_data_broadcast_addr());
    }
    if (from.has_logging_broadcast_addr()) {
      set_logging_broadcast_addr(from.logging_broadcast_addr());
    }
    if (from.has_use_synthetic_cancel_replace()) {
      set_use_synthetic_cancel_replace(from.use_synthetic_cancel_replace());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void venue_configuration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void venue_configuration::CopyFrom(const venue_configuration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool venue_configuration::IsInitialized() const {

  return true;
}

void venue_configuration::Swap(venue_configuration* other) {
  if (other != this) {
    std::swap(venue_id_, other->venue_id_);
    std::swap(mic_name_, other->mic_name_);
    std::swap(order_interface_addr_, other->order_interface_addr_);
    std::swap(order_ping_addr_, other->order_ping_addr_);
    std::swap(market_data_broadcast_addr_, other->market_data_broadcast_addr_);
    std::swap(logging_broadcast_addr_, other->logging_broadcast_addr_);
    std::swap(use_synthetic_cancel_replace_, other->use_synthetic_cancel_replace_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata venue_configuration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = venue_configuration_descriptor_;
  metadata.reflection = venue_configuration_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int configuration::kTradeSerializationAddrFieldNumber;
const int configuration::kRecoveryListenerAddrFieldNumber;
const int configuration::kAggregatedBboBookAddrFieldNumber;
const int configuration::kAggregatedBboBookIdFieldNumber;
const int configuration::kConfigsFieldNumber;
#endif  // !_MSC_VER

configuration::configuration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void configuration::InitAsDefaultInstance() {
}

configuration::configuration(const configuration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void configuration::SharedCtor() {
  _cached_size_ = 0;
  trade_serialization_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  recovery_listener_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  aggregated_bbo_book_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  aggregated_bbo_book_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

configuration::~configuration() {
  SharedDtor();
}

void configuration::SharedDtor() {
  if (trade_serialization_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete trade_serialization_addr_;
  }
  if (recovery_listener_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete recovery_listener_addr_;
  }
  if (aggregated_bbo_book_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete aggregated_bbo_book_addr_;
  }
  if (this != default_instance_) {
  }
}

void configuration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* configuration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return configuration_descriptor_;
}

const configuration& configuration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_venue_5fconfiguration_2eproto();
  return *default_instance_;
}

configuration* configuration::default_instance_ = NULL;

configuration* configuration::New() const {
  return new configuration;
}

void configuration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_trade_serialization_addr()) {
      if (trade_serialization_addr_ != &::google::protobuf::internal::kEmptyString) {
        trade_serialization_addr_->clear();
      }
    }
    if (has_recovery_listener_addr()) {
      if (recovery_listener_addr_ != &::google::protobuf::internal::kEmptyString) {
        recovery_listener_addr_->clear();
      }
    }
    if (has_aggregated_bbo_book_addr()) {
      if (aggregated_bbo_book_addr_ != &::google::protobuf::internal::kEmptyString) {
        aggregated_bbo_book_addr_->clear();
      }
    }
    aggregated_bbo_book_id_ = 0;
  }
  configs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool configuration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string trade_serialization_addr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trade_serialization_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trade_serialization_addr().data(), this->trade_serialization_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_recovery_listener_addr;
        break;
      }

      // optional string recovery_listener_addr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recovery_listener_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recovery_listener_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->recovery_listener_addr().data(), this->recovery_listener_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_aggregated_bbo_book_addr;
        break;
      }

      // optional string aggregated_bbo_book_addr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aggregated_bbo_book_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aggregated_bbo_book_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->aggregated_bbo_book_addr().data(), this->aggregated_bbo_book_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_aggregated_bbo_book_id;
        break;
      }

      // optional sfixed32 aggregated_bbo_book_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_aggregated_bbo_book_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &aggregated_bbo_book_id_)));
          set_has_aggregated_bbo_book_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_configs;
        break;
      }

      // repeated .capkproto.venue_configuration configs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_configs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_configs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_configs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void configuration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string trade_serialization_addr = 1;
  if (has_trade_serialization_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trade_serialization_addr().data(), this->trade_serialization_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->trade_serialization_addr(), output);
  }

  // optional string recovery_listener_addr = 2;
  if (has_recovery_listener_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recovery_listener_addr().data(), this->recovery_listener_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->recovery_listener_addr(), output);
  }

  // optional string aggregated_bbo_book_addr = 3;
  if (has_aggregated_bbo_book_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aggregated_bbo_book_addr().data(), this->aggregated_bbo_book_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->aggregated_bbo_book_addr(), output);
  }

  // optional sfixed32 aggregated_bbo_book_id = 4;
  if (has_aggregated_bbo_book_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->aggregated_bbo_book_id(), output);
  }

  // repeated .capkproto.venue_configuration configs = 5;
  for (int i = 0; i < this->configs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->configs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* configuration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string trade_serialization_addr = 1;
  if (has_trade_serialization_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trade_serialization_addr().data(), this->trade_serialization_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->trade_serialization_addr(), target);
  }

  // optional string recovery_listener_addr = 2;
  if (has_recovery_listener_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->recovery_listener_addr().data(), this->recovery_listener_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->recovery_listener_addr(), target);
  }

  // optional string aggregated_bbo_book_addr = 3;
  if (has_aggregated_bbo_book_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aggregated_bbo_book_addr().data(), this->aggregated_bbo_book_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->aggregated_bbo_book_addr(), target);
  }

  // optional sfixed32 aggregated_bbo_book_id = 4;
  if (has_aggregated_bbo_book_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->aggregated_bbo_book_id(), target);
  }

  // repeated .capkproto.venue_configuration configs = 5;
  for (int i = 0; i < this->configs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->configs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int configuration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string trade_serialization_addr = 1;
    if (has_trade_serialization_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trade_serialization_addr());
    }

    // optional string recovery_listener_addr = 2;
    if (has_recovery_listener_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recovery_listener_addr());
    }

    // optional string aggregated_bbo_book_addr = 3;
    if (has_aggregated_bbo_book_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aggregated_bbo_book_addr());
    }

    // optional sfixed32 aggregated_bbo_book_id = 4;
    if (has_aggregated_bbo_book_id()) {
      total_size += 1 + 4;
    }

  }
  // repeated .capkproto.venue_configuration configs = 5;
  total_size += 1 * this->configs_size();
  for (int i = 0; i < this->configs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->configs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void configuration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const configuration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const configuration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void configuration::MergeFrom(const configuration& from) {
  GOOGLE_CHECK_NE(&from, this);
  configs_.MergeFrom(from.configs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trade_serialization_addr()) {
      set_trade_serialization_addr(from.trade_serialization_addr());
    }
    if (from.has_recovery_listener_addr()) {
      set_recovery_listener_addr(from.recovery_listener_addr());
    }
    if (from.has_aggregated_bbo_book_addr()) {
      set_aggregated_bbo_book_addr(from.aggregated_bbo_book_addr());
    }
    if (from.has_aggregated_bbo_book_id()) {
      set_aggregated_bbo_book_id(from.aggregated_bbo_book_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void configuration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void configuration::CopyFrom(const configuration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool configuration::IsInitialized() const {

  return true;
}

void configuration::Swap(configuration* other) {
  if (other != this) {
    std::swap(trade_serialization_addr_, other->trade_serialization_addr_);
    std::swap(recovery_listener_addr_, other->recovery_listener_addr_);
    std::swap(aggregated_bbo_book_addr_, other->aggregated_bbo_book_addr_);
    std::swap(aggregated_bbo_book_id_, other->aggregated_bbo_book_id_);
    configs_.Swap(&other->configs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata configuration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = configuration_descriptor_;
  metadata.reflection = configuration_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace capkproto

// @@protoc_insertion_point(global_scope)
