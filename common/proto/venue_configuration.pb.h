// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: venue_configuration.proto

#ifndef PROTOBUF_venue_5fconfiguration_2eproto__INCLUDED
#define PROTOBUF_venue_5fconfiguration_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "capk_globals.pb.h"
// @@protoc_insertion_point(includes)

namespace capkproto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_venue_5fconfiguration_2eproto();
void protobuf_AssignDesc_venue_5fconfiguration_2eproto();
void protobuf_ShutdownFile_venue_5fconfiguration_2eproto();

class venue_configuration;
class configuration;

// ===================================================================

class venue_configuration : public ::google::protobuf::Message {
 public:
  venue_configuration();
  virtual ~venue_configuration();

  venue_configuration(const venue_configuration& from);

  inline venue_configuration& operator=(const venue_configuration& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const venue_configuration& default_instance();

  void Swap(venue_configuration* other);

  // implements Message ----------------------------------------------

  venue_configuration* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const venue_configuration& from);
  void MergeFrom(const venue_configuration& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sfixed32 venue_id = 1;
  inline bool has_venue_id() const;
  inline void clear_venue_id();
  static const int kVenueIdFieldNumber = 1;
  inline ::google::protobuf::int32 venue_id() const;
  inline void set_venue_id(::google::protobuf::int32 value);

  // optional string mic_name = 2;
  inline bool has_mic_name() const;
  inline void clear_mic_name();
  static const int kMicNameFieldNumber = 2;
  inline const ::std::string& mic_name() const;
  inline void set_mic_name(const ::std::string& value);
  inline void set_mic_name(const char* value);
  inline void set_mic_name(const char* value, size_t size);
  inline ::std::string* mutable_mic_name();
  inline ::std::string* release_mic_name();
  inline void set_allocated_mic_name(::std::string* mic_name);

  // optional string order_interface_addr = 3;
  inline bool has_order_interface_addr() const;
  inline void clear_order_interface_addr();
  static const int kOrderInterfaceAddrFieldNumber = 3;
  inline const ::std::string& order_interface_addr() const;
  inline void set_order_interface_addr(const ::std::string& value);
  inline void set_order_interface_addr(const char* value);
  inline void set_order_interface_addr(const char* value, size_t size);
  inline ::std::string* mutable_order_interface_addr();
  inline ::std::string* release_order_interface_addr();
  inline void set_allocated_order_interface_addr(::std::string* order_interface_addr);

  // optional string order_ping_addr = 4;
  inline bool has_order_ping_addr() const;
  inline void clear_order_ping_addr();
  static const int kOrderPingAddrFieldNumber = 4;
  inline const ::std::string& order_ping_addr() const;
  inline void set_order_ping_addr(const ::std::string& value);
  inline void set_order_ping_addr(const char* value);
  inline void set_order_ping_addr(const char* value, size_t size);
  inline ::std::string* mutable_order_ping_addr();
  inline ::std::string* release_order_ping_addr();
  inline void set_allocated_order_ping_addr(::std::string* order_ping_addr);

  // optional string market_data_broadcast_addr = 5;
  inline bool has_market_data_broadcast_addr() const;
  inline void clear_market_data_broadcast_addr();
  static const int kMarketDataBroadcastAddrFieldNumber = 5;
  inline const ::std::string& market_data_broadcast_addr() const;
  inline void set_market_data_broadcast_addr(const ::std::string& value);
  inline void set_market_data_broadcast_addr(const char* value);
  inline void set_market_data_broadcast_addr(const char* value, size_t size);
  inline ::std::string* mutable_market_data_broadcast_addr();
  inline ::std::string* release_market_data_broadcast_addr();
  inline void set_allocated_market_data_broadcast_addr(::std::string* market_data_broadcast_addr);

  // optional string logging_broadcast_addr = 6;
  inline bool has_logging_broadcast_addr() const;
  inline void clear_logging_broadcast_addr();
  static const int kLoggingBroadcastAddrFieldNumber = 6;
  inline const ::std::string& logging_broadcast_addr() const;
  inline void set_logging_broadcast_addr(const ::std::string& value);
  inline void set_logging_broadcast_addr(const char* value);
  inline void set_logging_broadcast_addr(const char* value, size_t size);
  inline ::std::string* mutable_logging_broadcast_addr();
  inline ::std::string* release_logging_broadcast_addr();
  inline void set_allocated_logging_broadcast_addr(::std::string* logging_broadcast_addr);

  // optional bool use_synthetic_cancel_replace = 7;
  inline bool has_use_synthetic_cancel_replace() const;
  inline void clear_use_synthetic_cancel_replace();
  static const int kUseSyntheticCancelReplaceFieldNumber = 7;
  inline bool use_synthetic_cancel_replace() const;
  inline void set_use_synthetic_cancel_replace(bool value);

  // @@protoc_insertion_point(class_scope:capkproto.venue_configuration)
 private:
  inline void set_has_venue_id();
  inline void clear_has_venue_id();
  inline void set_has_mic_name();
  inline void clear_has_mic_name();
  inline void set_has_order_interface_addr();
  inline void clear_has_order_interface_addr();
  inline void set_has_order_ping_addr();
  inline void clear_has_order_ping_addr();
  inline void set_has_market_data_broadcast_addr();
  inline void clear_has_market_data_broadcast_addr();
  inline void set_has_logging_broadcast_addr();
  inline void clear_has_logging_broadcast_addr();
  inline void set_has_use_synthetic_cancel_replace();
  inline void clear_has_use_synthetic_cancel_replace();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* mic_name_;
  ::std::string* order_interface_addr_;
  ::std::string* order_ping_addr_;
  ::google::protobuf::int32 venue_id_;
  bool use_synthetic_cancel_replace_;
  ::std::string* market_data_broadcast_addr_;
  ::std::string* logging_broadcast_addr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_venue_5fconfiguration_2eproto();
  friend void protobuf_AssignDesc_venue_5fconfiguration_2eproto();
  friend void protobuf_ShutdownFile_venue_5fconfiguration_2eproto();

  void InitAsDefaultInstance();
  static venue_configuration* default_instance_;
};
// -------------------------------------------------------------------

class configuration : public ::google::protobuf::Message {
 public:
  configuration();
  virtual ~configuration();

  configuration(const configuration& from);

  inline configuration& operator=(const configuration& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const configuration& default_instance();

  void Swap(configuration* other);

  // implements Message ----------------------------------------------

  configuration* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const configuration& from);
  void MergeFrom(const configuration& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string trade_serialization_addr = 1;
  inline bool has_trade_serialization_addr() const;
  inline void clear_trade_serialization_addr();
  static const int kTradeSerializationAddrFieldNumber = 1;
  inline const ::std::string& trade_serialization_addr() const;
  inline void set_trade_serialization_addr(const ::std::string& value);
  inline void set_trade_serialization_addr(const char* value);
  inline void set_trade_serialization_addr(const char* value, size_t size);
  inline ::std::string* mutable_trade_serialization_addr();
  inline ::std::string* release_trade_serialization_addr();
  inline void set_allocated_trade_serialization_addr(::std::string* trade_serialization_addr);

  // optional string recovery_listener_addr = 2;
  inline bool has_recovery_listener_addr() const;
  inline void clear_recovery_listener_addr();
  static const int kRecoveryListenerAddrFieldNumber = 2;
  inline const ::std::string& recovery_listener_addr() const;
  inline void set_recovery_listener_addr(const ::std::string& value);
  inline void set_recovery_listener_addr(const char* value);
  inline void set_recovery_listener_addr(const char* value, size_t size);
  inline ::std::string* mutable_recovery_listener_addr();
  inline ::std::string* release_recovery_listener_addr();
  inline void set_allocated_recovery_listener_addr(::std::string* recovery_listener_addr);

  // optional string aggregated_bbo_book_addr = 3;
  inline bool has_aggregated_bbo_book_addr() const;
  inline void clear_aggregated_bbo_book_addr();
  static const int kAggregatedBboBookAddrFieldNumber = 3;
  inline const ::std::string& aggregated_bbo_book_addr() const;
  inline void set_aggregated_bbo_book_addr(const ::std::string& value);
  inline void set_aggregated_bbo_book_addr(const char* value);
  inline void set_aggregated_bbo_book_addr(const char* value, size_t size);
  inline ::std::string* mutable_aggregated_bbo_book_addr();
  inline ::std::string* release_aggregated_bbo_book_addr();
  inline void set_allocated_aggregated_bbo_book_addr(::std::string* aggregated_bbo_book_addr);

  // optional sfixed32 aggregated_bbo_book_id = 4;
  inline bool has_aggregated_bbo_book_id() const;
  inline void clear_aggregated_bbo_book_id();
  static const int kAggregatedBboBookIdFieldNumber = 4;
  inline ::google::protobuf::int32 aggregated_bbo_book_id() const;
  inline void set_aggregated_bbo_book_id(::google::protobuf::int32 value);

  // repeated .capkproto.venue_configuration configs = 5;
  inline int configs_size() const;
  inline void clear_configs();
  static const int kConfigsFieldNumber = 5;
  inline const ::capkproto::venue_configuration& configs(int index) const;
  inline ::capkproto::venue_configuration* mutable_configs(int index);
  inline ::capkproto::venue_configuration* add_configs();
  inline const ::google::protobuf::RepeatedPtrField< ::capkproto::venue_configuration >&
      configs() const;
  inline ::google::protobuf::RepeatedPtrField< ::capkproto::venue_configuration >*
      mutable_configs();

  // @@protoc_insertion_point(class_scope:capkproto.configuration)
 private:
  inline void set_has_trade_serialization_addr();
  inline void clear_has_trade_serialization_addr();
  inline void set_has_recovery_listener_addr();
  inline void clear_has_recovery_listener_addr();
  inline void set_has_aggregated_bbo_book_addr();
  inline void clear_has_aggregated_bbo_book_addr();
  inline void set_has_aggregated_bbo_book_id();
  inline void clear_has_aggregated_bbo_book_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* trade_serialization_addr_;
  ::std::string* recovery_listener_addr_;
  ::std::string* aggregated_bbo_book_addr_;
  ::google::protobuf::RepeatedPtrField< ::capkproto::venue_configuration > configs_;
  ::google::protobuf::int32 aggregated_bbo_book_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_venue_5fconfiguration_2eproto();
  friend void protobuf_AssignDesc_venue_5fconfiguration_2eproto();
  friend void protobuf_ShutdownFile_venue_5fconfiguration_2eproto();

  void InitAsDefaultInstance();
  static configuration* default_instance_;
};
// ===================================================================


// ===================================================================

// venue_configuration

// optional sfixed32 venue_id = 1;
inline bool venue_configuration::has_venue_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void venue_configuration::set_has_venue_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void venue_configuration::clear_has_venue_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void venue_configuration::clear_venue_id() {
  venue_id_ = 0;
  clear_has_venue_id();
}
inline ::google::protobuf::int32 venue_configuration::venue_id() const {
  return venue_id_;
}
inline void venue_configuration::set_venue_id(::google::protobuf::int32 value) {
  set_has_venue_id();
  venue_id_ = value;
}

// optional string mic_name = 2;
inline bool venue_configuration::has_mic_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void venue_configuration::set_has_mic_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void venue_configuration::clear_has_mic_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void venue_configuration::clear_mic_name() {
  if (mic_name_ != &::google::protobuf::internal::kEmptyString) {
    mic_name_->clear();
  }
  clear_has_mic_name();
}
inline const ::std::string& venue_configuration::mic_name() const {
  return *mic_name_;
}
inline void venue_configuration::set_mic_name(const ::std::string& value) {
  set_has_mic_name();
  if (mic_name_ == &::google::protobuf::internal::kEmptyString) {
    mic_name_ = new ::std::string;
  }
  mic_name_->assign(value);
}
inline void venue_configuration::set_mic_name(const char* value) {
  set_has_mic_name();
  if (mic_name_ == &::google::protobuf::internal::kEmptyString) {
    mic_name_ = new ::std::string;
  }
  mic_name_->assign(value);
}
inline void venue_configuration::set_mic_name(const char* value, size_t size) {
  set_has_mic_name();
  if (mic_name_ == &::google::protobuf::internal::kEmptyString) {
    mic_name_ = new ::std::string;
  }
  mic_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* venue_configuration::mutable_mic_name() {
  set_has_mic_name();
  if (mic_name_ == &::google::protobuf::internal::kEmptyString) {
    mic_name_ = new ::std::string;
  }
  return mic_name_;
}
inline ::std::string* venue_configuration::release_mic_name() {
  clear_has_mic_name();
  if (mic_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mic_name_;
    mic_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void venue_configuration::set_allocated_mic_name(::std::string* mic_name) {
  if (mic_name_ != &::google::protobuf::internal::kEmptyString) {
    delete mic_name_;
  }
  if (mic_name) {
    set_has_mic_name();
    mic_name_ = mic_name;
  } else {
    clear_has_mic_name();
    mic_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string order_interface_addr = 3;
inline bool venue_configuration::has_order_interface_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void venue_configuration::set_has_order_interface_addr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void venue_configuration::clear_has_order_interface_addr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void venue_configuration::clear_order_interface_addr() {
  if (order_interface_addr_ != &::google::protobuf::internal::kEmptyString) {
    order_interface_addr_->clear();
  }
  clear_has_order_interface_addr();
}
inline const ::std::string& venue_configuration::order_interface_addr() const {
  return *order_interface_addr_;
}
inline void venue_configuration::set_order_interface_addr(const ::std::string& value) {
  set_has_order_interface_addr();
  if (order_interface_addr_ == &::google::protobuf::internal::kEmptyString) {
    order_interface_addr_ = new ::std::string;
  }
  order_interface_addr_->assign(value);
}
inline void venue_configuration::set_order_interface_addr(const char* value) {
  set_has_order_interface_addr();
  if (order_interface_addr_ == &::google::protobuf::internal::kEmptyString) {
    order_interface_addr_ = new ::std::string;
  }
  order_interface_addr_->assign(value);
}
inline void venue_configuration::set_order_interface_addr(const char* value, size_t size) {
  set_has_order_interface_addr();
  if (order_interface_addr_ == &::google::protobuf::internal::kEmptyString) {
    order_interface_addr_ = new ::std::string;
  }
  order_interface_addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* venue_configuration::mutable_order_interface_addr() {
  set_has_order_interface_addr();
  if (order_interface_addr_ == &::google::protobuf::internal::kEmptyString) {
    order_interface_addr_ = new ::std::string;
  }
  return order_interface_addr_;
}
inline ::std::string* venue_configuration::release_order_interface_addr() {
  clear_has_order_interface_addr();
  if (order_interface_addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = order_interface_addr_;
    order_interface_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void venue_configuration::set_allocated_order_interface_addr(::std::string* order_interface_addr) {
  if (order_interface_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete order_interface_addr_;
  }
  if (order_interface_addr) {
    set_has_order_interface_addr();
    order_interface_addr_ = order_interface_addr;
  } else {
    clear_has_order_interface_addr();
    order_interface_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string order_ping_addr = 4;
inline bool venue_configuration::has_order_ping_addr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void venue_configuration::set_has_order_ping_addr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void venue_configuration::clear_has_order_ping_addr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void venue_configuration::clear_order_ping_addr() {
  if (order_ping_addr_ != &::google::protobuf::internal::kEmptyString) {
    order_ping_addr_->clear();
  }
  clear_has_order_ping_addr();
}
inline const ::std::string& venue_configuration::order_ping_addr() const {
  return *order_ping_addr_;
}
inline void venue_configuration::set_order_ping_addr(const ::std::string& value) {
  set_has_order_ping_addr();
  if (order_ping_addr_ == &::google::protobuf::internal::kEmptyString) {
    order_ping_addr_ = new ::std::string;
  }
  order_ping_addr_->assign(value);
}
inline void venue_configuration::set_order_ping_addr(const char* value) {
  set_has_order_ping_addr();
  if (order_ping_addr_ == &::google::protobuf::internal::kEmptyString) {
    order_ping_addr_ = new ::std::string;
  }
  order_ping_addr_->assign(value);
}
inline void venue_configuration::set_order_ping_addr(const char* value, size_t size) {
  set_has_order_ping_addr();
  if (order_ping_addr_ == &::google::protobuf::internal::kEmptyString) {
    order_ping_addr_ = new ::std::string;
  }
  order_ping_addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* venue_configuration::mutable_order_ping_addr() {
  set_has_order_ping_addr();
  if (order_ping_addr_ == &::google::protobuf::internal::kEmptyString) {
    order_ping_addr_ = new ::std::string;
  }
  return order_ping_addr_;
}
inline ::std::string* venue_configuration::release_order_ping_addr() {
  clear_has_order_ping_addr();
  if (order_ping_addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = order_ping_addr_;
    order_ping_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void venue_configuration::set_allocated_order_ping_addr(::std::string* order_ping_addr) {
  if (order_ping_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete order_ping_addr_;
  }
  if (order_ping_addr) {
    set_has_order_ping_addr();
    order_ping_addr_ = order_ping_addr;
  } else {
    clear_has_order_ping_addr();
    order_ping_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string market_data_broadcast_addr = 5;
inline bool venue_configuration::has_market_data_broadcast_addr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void venue_configuration::set_has_market_data_broadcast_addr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void venue_configuration::clear_has_market_data_broadcast_addr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void venue_configuration::clear_market_data_broadcast_addr() {
  if (market_data_broadcast_addr_ != &::google::protobuf::internal::kEmptyString) {
    market_data_broadcast_addr_->clear();
  }
  clear_has_market_data_broadcast_addr();
}
inline const ::std::string& venue_configuration::market_data_broadcast_addr() const {
  return *market_data_broadcast_addr_;
}
inline void venue_configuration::set_market_data_broadcast_addr(const ::std::string& value) {
  set_has_market_data_broadcast_addr();
  if (market_data_broadcast_addr_ == &::google::protobuf::internal::kEmptyString) {
    market_data_broadcast_addr_ = new ::std::string;
  }
  market_data_broadcast_addr_->assign(value);
}
inline void venue_configuration::set_market_data_broadcast_addr(const char* value) {
  set_has_market_data_broadcast_addr();
  if (market_data_broadcast_addr_ == &::google::protobuf::internal::kEmptyString) {
    market_data_broadcast_addr_ = new ::std::string;
  }
  market_data_broadcast_addr_->assign(value);
}
inline void venue_configuration::set_market_data_broadcast_addr(const char* value, size_t size) {
  set_has_market_data_broadcast_addr();
  if (market_data_broadcast_addr_ == &::google::protobuf::internal::kEmptyString) {
    market_data_broadcast_addr_ = new ::std::string;
  }
  market_data_broadcast_addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* venue_configuration::mutable_market_data_broadcast_addr() {
  set_has_market_data_broadcast_addr();
  if (market_data_broadcast_addr_ == &::google::protobuf::internal::kEmptyString) {
    market_data_broadcast_addr_ = new ::std::string;
  }
  return market_data_broadcast_addr_;
}
inline ::std::string* venue_configuration::release_market_data_broadcast_addr() {
  clear_has_market_data_broadcast_addr();
  if (market_data_broadcast_addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = market_data_broadcast_addr_;
    market_data_broadcast_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void venue_configuration::set_allocated_market_data_broadcast_addr(::std::string* market_data_broadcast_addr) {
  if (market_data_broadcast_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete market_data_broadcast_addr_;
  }
  if (market_data_broadcast_addr) {
    set_has_market_data_broadcast_addr();
    market_data_broadcast_addr_ = market_data_broadcast_addr;
  } else {
    clear_has_market_data_broadcast_addr();
    market_data_broadcast_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string logging_broadcast_addr = 6;
inline bool venue_configuration::has_logging_broadcast_addr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void venue_configuration::set_has_logging_broadcast_addr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void venue_configuration::clear_has_logging_broadcast_addr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void venue_configuration::clear_logging_broadcast_addr() {
  if (logging_broadcast_addr_ != &::google::protobuf::internal::kEmptyString) {
    logging_broadcast_addr_->clear();
  }
  clear_has_logging_broadcast_addr();
}
inline const ::std::string& venue_configuration::logging_broadcast_addr() const {
  return *logging_broadcast_addr_;
}
inline void venue_configuration::set_logging_broadcast_addr(const ::std::string& value) {
  set_has_logging_broadcast_addr();
  if (logging_broadcast_addr_ == &::google::protobuf::internal::kEmptyString) {
    logging_broadcast_addr_ = new ::std::string;
  }
  logging_broadcast_addr_->assign(value);
}
inline void venue_configuration::set_logging_broadcast_addr(const char* value) {
  set_has_logging_broadcast_addr();
  if (logging_broadcast_addr_ == &::google::protobuf::internal::kEmptyString) {
    logging_broadcast_addr_ = new ::std::string;
  }
  logging_broadcast_addr_->assign(value);
}
inline void venue_configuration::set_logging_broadcast_addr(const char* value, size_t size) {
  set_has_logging_broadcast_addr();
  if (logging_broadcast_addr_ == &::google::protobuf::internal::kEmptyString) {
    logging_broadcast_addr_ = new ::std::string;
  }
  logging_broadcast_addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* venue_configuration::mutable_logging_broadcast_addr() {
  set_has_logging_broadcast_addr();
  if (logging_broadcast_addr_ == &::google::protobuf::internal::kEmptyString) {
    logging_broadcast_addr_ = new ::std::string;
  }
  return logging_broadcast_addr_;
}
inline ::std::string* venue_configuration::release_logging_broadcast_addr() {
  clear_has_logging_broadcast_addr();
  if (logging_broadcast_addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = logging_broadcast_addr_;
    logging_broadcast_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void venue_configuration::set_allocated_logging_broadcast_addr(::std::string* logging_broadcast_addr) {
  if (logging_broadcast_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete logging_broadcast_addr_;
  }
  if (logging_broadcast_addr) {
    set_has_logging_broadcast_addr();
    logging_broadcast_addr_ = logging_broadcast_addr;
  } else {
    clear_has_logging_broadcast_addr();
    logging_broadcast_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool use_synthetic_cancel_replace = 7;
inline bool venue_configuration::has_use_synthetic_cancel_replace() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void venue_configuration::set_has_use_synthetic_cancel_replace() {
  _has_bits_[0] |= 0x00000040u;
}
inline void venue_configuration::clear_has_use_synthetic_cancel_replace() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void venue_configuration::clear_use_synthetic_cancel_replace() {
  use_synthetic_cancel_replace_ = false;
  clear_has_use_synthetic_cancel_replace();
}
inline bool venue_configuration::use_synthetic_cancel_replace() const {
  return use_synthetic_cancel_replace_;
}
inline void venue_configuration::set_use_synthetic_cancel_replace(bool value) {
  set_has_use_synthetic_cancel_replace();
  use_synthetic_cancel_replace_ = value;
}

// -------------------------------------------------------------------

// configuration

// optional string trade_serialization_addr = 1;
inline bool configuration::has_trade_serialization_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void configuration::set_has_trade_serialization_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void configuration::clear_has_trade_serialization_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void configuration::clear_trade_serialization_addr() {
  if (trade_serialization_addr_ != &::google::protobuf::internal::kEmptyString) {
    trade_serialization_addr_->clear();
  }
  clear_has_trade_serialization_addr();
}
inline const ::std::string& configuration::trade_serialization_addr() const {
  return *trade_serialization_addr_;
}
inline void configuration::set_trade_serialization_addr(const ::std::string& value) {
  set_has_trade_serialization_addr();
  if (trade_serialization_addr_ == &::google::protobuf::internal::kEmptyString) {
    trade_serialization_addr_ = new ::std::string;
  }
  trade_serialization_addr_->assign(value);
}
inline void configuration::set_trade_serialization_addr(const char* value) {
  set_has_trade_serialization_addr();
  if (trade_serialization_addr_ == &::google::protobuf::internal::kEmptyString) {
    trade_serialization_addr_ = new ::std::string;
  }
  trade_serialization_addr_->assign(value);
}
inline void configuration::set_trade_serialization_addr(const char* value, size_t size) {
  set_has_trade_serialization_addr();
  if (trade_serialization_addr_ == &::google::protobuf::internal::kEmptyString) {
    trade_serialization_addr_ = new ::std::string;
  }
  trade_serialization_addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* configuration::mutable_trade_serialization_addr() {
  set_has_trade_serialization_addr();
  if (trade_serialization_addr_ == &::google::protobuf::internal::kEmptyString) {
    trade_serialization_addr_ = new ::std::string;
  }
  return trade_serialization_addr_;
}
inline ::std::string* configuration::release_trade_serialization_addr() {
  clear_has_trade_serialization_addr();
  if (trade_serialization_addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = trade_serialization_addr_;
    trade_serialization_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void configuration::set_allocated_trade_serialization_addr(::std::string* trade_serialization_addr) {
  if (trade_serialization_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete trade_serialization_addr_;
  }
  if (trade_serialization_addr) {
    set_has_trade_serialization_addr();
    trade_serialization_addr_ = trade_serialization_addr;
  } else {
    clear_has_trade_serialization_addr();
    trade_serialization_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string recovery_listener_addr = 2;
inline bool configuration::has_recovery_listener_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void configuration::set_has_recovery_listener_addr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void configuration::clear_has_recovery_listener_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void configuration::clear_recovery_listener_addr() {
  if (recovery_listener_addr_ != &::google::protobuf::internal::kEmptyString) {
    recovery_listener_addr_->clear();
  }
  clear_has_recovery_listener_addr();
}
inline const ::std::string& configuration::recovery_listener_addr() const {
  return *recovery_listener_addr_;
}
inline void configuration::set_recovery_listener_addr(const ::std::string& value) {
  set_has_recovery_listener_addr();
  if (recovery_listener_addr_ == &::google::protobuf::internal::kEmptyString) {
    recovery_listener_addr_ = new ::std::string;
  }
  recovery_listener_addr_->assign(value);
}
inline void configuration::set_recovery_listener_addr(const char* value) {
  set_has_recovery_listener_addr();
  if (recovery_listener_addr_ == &::google::protobuf::internal::kEmptyString) {
    recovery_listener_addr_ = new ::std::string;
  }
  recovery_listener_addr_->assign(value);
}
inline void configuration::set_recovery_listener_addr(const char* value, size_t size) {
  set_has_recovery_listener_addr();
  if (recovery_listener_addr_ == &::google::protobuf::internal::kEmptyString) {
    recovery_listener_addr_ = new ::std::string;
  }
  recovery_listener_addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* configuration::mutable_recovery_listener_addr() {
  set_has_recovery_listener_addr();
  if (recovery_listener_addr_ == &::google::protobuf::internal::kEmptyString) {
    recovery_listener_addr_ = new ::std::string;
  }
  return recovery_listener_addr_;
}
inline ::std::string* configuration::release_recovery_listener_addr() {
  clear_has_recovery_listener_addr();
  if (recovery_listener_addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = recovery_listener_addr_;
    recovery_listener_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void configuration::set_allocated_recovery_listener_addr(::std::string* recovery_listener_addr) {
  if (recovery_listener_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete recovery_listener_addr_;
  }
  if (recovery_listener_addr) {
    set_has_recovery_listener_addr();
    recovery_listener_addr_ = recovery_listener_addr;
  } else {
    clear_has_recovery_listener_addr();
    recovery_listener_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string aggregated_bbo_book_addr = 3;
inline bool configuration::has_aggregated_bbo_book_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void configuration::set_has_aggregated_bbo_book_addr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void configuration::clear_has_aggregated_bbo_book_addr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void configuration::clear_aggregated_bbo_book_addr() {
  if (aggregated_bbo_book_addr_ != &::google::protobuf::internal::kEmptyString) {
    aggregated_bbo_book_addr_->clear();
  }
  clear_has_aggregated_bbo_book_addr();
}
inline const ::std::string& configuration::aggregated_bbo_book_addr() const {
  return *aggregated_bbo_book_addr_;
}
inline void configuration::set_aggregated_bbo_book_addr(const ::std::string& value) {
  set_has_aggregated_bbo_book_addr();
  if (aggregated_bbo_book_addr_ == &::google::protobuf::internal::kEmptyString) {
    aggregated_bbo_book_addr_ = new ::std::string;
  }
  aggregated_bbo_book_addr_->assign(value);
}
inline void configuration::set_aggregated_bbo_book_addr(const char* value) {
  set_has_aggregated_bbo_book_addr();
  if (aggregated_bbo_book_addr_ == &::google::protobuf::internal::kEmptyString) {
    aggregated_bbo_book_addr_ = new ::std::string;
  }
  aggregated_bbo_book_addr_->assign(value);
}
inline void configuration::set_aggregated_bbo_book_addr(const char* value, size_t size) {
  set_has_aggregated_bbo_book_addr();
  if (aggregated_bbo_book_addr_ == &::google::protobuf::internal::kEmptyString) {
    aggregated_bbo_book_addr_ = new ::std::string;
  }
  aggregated_bbo_book_addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* configuration::mutable_aggregated_bbo_book_addr() {
  set_has_aggregated_bbo_book_addr();
  if (aggregated_bbo_book_addr_ == &::google::protobuf::internal::kEmptyString) {
    aggregated_bbo_book_addr_ = new ::std::string;
  }
  return aggregated_bbo_book_addr_;
}
inline ::std::string* configuration::release_aggregated_bbo_book_addr() {
  clear_has_aggregated_bbo_book_addr();
  if (aggregated_bbo_book_addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = aggregated_bbo_book_addr_;
    aggregated_bbo_book_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void configuration::set_allocated_aggregated_bbo_book_addr(::std::string* aggregated_bbo_book_addr) {
  if (aggregated_bbo_book_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete aggregated_bbo_book_addr_;
  }
  if (aggregated_bbo_book_addr) {
    set_has_aggregated_bbo_book_addr();
    aggregated_bbo_book_addr_ = aggregated_bbo_book_addr;
  } else {
    clear_has_aggregated_bbo_book_addr();
    aggregated_bbo_book_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional sfixed32 aggregated_bbo_book_id = 4;
inline bool configuration::has_aggregated_bbo_book_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void configuration::set_has_aggregated_bbo_book_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void configuration::clear_has_aggregated_bbo_book_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void configuration::clear_aggregated_bbo_book_id() {
  aggregated_bbo_book_id_ = 0;
  clear_has_aggregated_bbo_book_id();
}
inline ::google::protobuf::int32 configuration::aggregated_bbo_book_id() const {
  return aggregated_bbo_book_id_;
}
inline void configuration::set_aggregated_bbo_book_id(::google::protobuf::int32 value) {
  set_has_aggregated_bbo_book_id();
  aggregated_bbo_book_id_ = value;
}

// repeated .capkproto.venue_configuration configs = 5;
inline int configuration::configs_size() const {
  return configs_.size();
}
inline void configuration::clear_configs() {
  configs_.Clear();
}
inline const ::capkproto::venue_configuration& configuration::configs(int index) const {
  return configs_.Get(index);
}
inline ::capkproto::venue_configuration* configuration::mutable_configs(int index) {
  return configs_.Mutable(index);
}
inline ::capkproto::venue_configuration* configuration::add_configs() {
  return configs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::capkproto::venue_configuration >&
configuration::configs() const {
  return configs_;
}
inline ::google::protobuf::RepeatedPtrField< ::capkproto::venue_configuration >*
configuration::mutable_configs() {
  return &configs_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace capkproto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_venue_5fconfiguration_2eproto__INCLUDED
